
    menuItem
        -label "RG" 
        -divider 0
        -subMenu 0
        -tearOff 0
        -command "RGctrl 1;\n\nglobal proc RGctrl(int $YN)\n{\n\n    if($YN == 1)\n    {\n        if(`dockControl -ex rgdock `){deleteUI rgdock; } \n        if(`window -ex RGctrl`){deleteUI RGctrl;};\n         \n        RGctrlWIN;\n        dockControl -area \"right\" -fl 0\n                -content RGctrl -l \"RGctrl\"\n                -allowedArea \"right\" rgdock;\n    }\n    else \n    {\n        if(`dockControl -ex rgdock `){deleteUI rgdock; } \n        if(`window -ex RGctrl`){deleteUI RGctrl;};\n        RGctrlWIN;\n    }\n\n}\n      \n\n//////////////////////////////////////////////////////////////////////\n////////////////////////////  RGctrlWIN  ///////////////////////////\n/////////////////////////////////////////////////////////////////////\n\n\nglobal proc RGctrlWIN()\n{\n    if(`window -ex RGctrl`){deleteUI RGctrl;};\n    window -title \"RG Controller v2.1\" -s 0 RGctrl;\n    formLayout topLayout;\n    \n        //////////////// Zone 3    \n        columnLayout  -p topLayout -adj 1 ColClm;\n            text   -al left -bgc 0 0.1 0.2 -l \"  Color :         \" cntTxt;\n            button -l \"    None    \" -c  \"overrideColor(0)\";\n            button -l \"\" -bgc 0 0 1 -c  \"overrideColor(6)\";\n            button -l \"\" -bgc 1 0 0 -c  \"overrideColor(13)\";\n            button -l \"\" -bgc 0 1 0 -c  \"overrideColor(14)\";\n            button -l \"\" -bgc 0 1 1 -c  \"overrideColor(18)\";\n            button -l \"\" -bgc 1 1 0 -c  \"overrideColor(17)\";\n            text -l \"\"; \n            text   -al left -bgc 0 0.1 0.2 -l \"  Axis :         \" axsTxt;\n            checkBox -v 1 -l \"Orient Child\" orntCB;\n            button -l \"Y UP\" -bgc 0 0.5 0.5 -c \"orientJnt YUP\" yUpBtt ;\n            button -l \"Y DN\" -bgc 0 0.5 0.5 -c \"orientJnt YDN\" yDnBtt ;\n            button -l \"Z UP\" -bgc 0 0.5 0.5 -c \"orientJnt ZUP\" zUpBtt ;\n            button -l \"Z DN\" -bgc 0 0.5 0.5 -c \"orientJnt ZDN\" zDnBtt ;\n            button -l \"None\" -bgc 0 0.5 0.5 -c \"orientJnt NONE\" nonBtt ;\n            button -l \"LRA\"  -bgc 0 0.5 0.5 -c \"\" lraBtt ;\n\n    \n    \n        //////////////// Zone 2\n        columnLayout -p topLayout -adj 1 wireCnt;\n            text   -al left -bgc 0 0.1 0.2 -l \"  Controller :              \" cntTxt;\n            button -bgc 0.2 0.2 0.3 -l \"Triangle\" -c \"cntWireNw Triangle\";\n            button -bgc 0.2 0.2 0.3 -l \"Circle\" -c \"cntWireNw Circle\";\n            button -bgc 0.2 0.2 0.3 -l \"Square\" -c \"cntWireNw Square\";\n            button -bgc 0.2 0.2 0.3 -l \"Fat Cross\" -c \"cntWireNw FatCross\";\n            button -bgc 0.2 0.2 0.3 -l \"Pyramid\" -c \"cntWireNw Pyramid\";\n            button -bgc 0.2 0.2 0.3 -l \"Cube\" -c \"cntWireNw Cube\";\n            button -bgc 0.2 0.2 0.3 -l \"Sphere\" -c \"cntWireNw Sphere\";\n            button -bgc 0.2 0.2 0.3 -l \"Cone\" -c \"cntWireNw Cone\";\n            button -bgc 0.2 0.2 0.3 -l \"Rombus\" -c \"cntWireNw Rombus\";\n            button -bgc 0.2 0.2 0.3 -l \"Single Normal\" -c \"cntWireNw SingleNormal\";\n            button -bgc 0.2 0.2 0.3 -l \"Four Normal\" -c \"cntWireNw FourNormal\";\n            button -bgc 0.2 0.2 0.3 -l \"Dumbell\" -c \"cntWireNw Dumbell\";\n            button -bgc 0.2 0.2 0.3 -l \"Arrow On Ball\" -c \"cntWireNw ArrowOnBall\";\n            button -bgc 0.3 0.5 0.2 -l \"Shape Replacer\" -c \"shpRplc\";\n        \n        \n     //////////////// Zone 1   \n    formLayout -p topLayout mainLayout;\n        text -p mainLayout -al left -bgc 0 0.1 0.2 -l \"\\t           --Rahul Gawade--\" ownTxt;\n \n        text -p mainLayout -al left -bgc 0 0.1 0.2 -l \"  Joints :\" jntTxt;\n        \n        formLayout -p mainLayout -bgc 0.4 0.4 0.4 jntgrid;\n            checkBox  -v 1 -l \"Uv Axis\" uvAxisCB;  \n            button -l \"Jnt @ Center\" -bgc 0 0.5 0.5 -c RGjntAtCntr FKCB;  \n            button -l \"Component\" -bgc 0 0.5 0.5 -c cmpntJntCreator Cmpnt ;\n            button -l \"Volume\" -bgc 0 0.5 0.5 -c  jntAtCntr Vlm ;\n                   \n        text -p mainLayout -al left -bgc 0 0.1 0.2 -l \"  Constaints :\" lbTxt;\n        \n        gridLayout -p mainLayout -bgc 0.4 0.4 0.4 -cr 1 -numberOfColumns 3 -cellWidthHeight 80 30 radiogrid;\n            radioCollection cnst;\n            radioButton -label \"Point\" pnt;\n            radioButton -label \"Orient\" ort;\n            radioButton -sl -label \"Parent\" prnt;\n            checkBox  -v 1 -l \"Scale\" sclCB;\n        \n        text -p mainLayout -bgc 0 0.1 0.2 -al left -l \"  Constaints Axis :\" lbTxt2;\n        \n        gridLayout  -bgc 0.4 0.4 0.4 -p mainLayout -cr 1 -numberOfColumns 3 -cellWidthHeight 80 30 axisGrid;\n            radioCollection ax;\n            radioButton -label \"X\" x;\n            radioButton -sl -label \"Y\" y;\n            radioButton -label \"Z\" z; \n            checkBox  -v 0 -l \"Proxy\" -cc RGprxCB pxCB; \n            text -l \"\"; \n            checkBox  -en 0 -v 0 -l \"Neg Trans\" negCB;  \n        button -p mainLayout -l \"Float\" -bgc 0 0.5 0.5 -c (\"doIt 0\") cnt ;\n        button -p mainLayout -l \"FK\" -bgc 0 0.5 0.5 -c  (\"doIt 1\") prxcnt ;\n\n\n    // Extra Layout\n    formLayout  -p topLayout  -numberOfDivisions 100 xtraLay;\n    string $columnLX = `columnLayout  -p xtraLay -adjustableColumn true`;\n    button -l \"Fk Parnt\" -bgc 0.3 0.5 0.2 -c prntFk;\n    button -l \"Folicle\" -bgc 0.3 0.5 0.2 -c RGuvFlc;\n    \n    string $columnRX = `columnLayout -p xtraLay -adjustableColumn true`;\n    button -l \"Zero Out\" -bgc 0.3 0.5 0.2 -c RGzeroOut;\n    button -l \"Re-Skin\" -bgc 0.3 0.5 0.2 -c RGreSkin;\n    \n    formLayout -edit\n        -attachForm     $columnLX     \"top\"    4\n        -attachForm     $columnLX     \"left\"   1\n        -attachForm     $columnLX     \"bottom\" 1 \n        -attachPosition $columnLX     \"right\"  1 50\n    \n        -attachForm     $columnRX     \"top\"    4\n        -attachPosition $columnRX     \"left\"   1 50\n        -attachForm     $columnRX     \"bottom\" 1 \n        -attachForm     $columnRX     \"right\"  1\n        \n        \n    xtraLay;\n    \n\n    // Dynamic Layout\n    text -p mainLayout -al left -bgc 0 0.1 0.2 -l \"  Dynamics :\" dnyTxt;\n    formLayout  -p mainLayout -bgc 0.4 0.4 0.4 -numberOfDivisions 100 shp;\n    string $columnL = `columnLayout  -p shp -adjustableColumn true`;\n    button -l \"Add Dynamic\" -bgc 0 0.5 0.5 -c dynaSetup;\n    button -l \"Add Dyna\" -bgc 0 0.5 0.5 -c addDyna;\n    checkBox -v 1 -l \"with nucleus\" -h 23 -bgc 0 0.5 0.5 Ncb;\n    string $columnR = `columnLayout -p shp -adjustableColumn true`;\n    button -l \"Remove Dynamic\" -bgc 0 0.5 0.5 -c rmDynaSetup;\n    button -l \"Add PropA\" -bgc 0 0.5 0.5 -c addPropA;\n    button -l \"Connect nucleus\" -bgc 0 0.5 0.5 -c CN;\n    string $close = `button -p shp -bgc 0.2 0.2 0.3 -l \"Transfer Attribute\" -c transAtt`;\n    \n    formLayout -edit\n        -attachForm     $columnL     \"top\"    5\n        -attachForm     $columnL     \"left\"   5\n        -attachControl  $columnL     \"bottom\" 5 $close\n        -attachPosition $columnL     \"right\"  5 50\n    \n        -attachForm     $columnR     \"top\"    5\n        -attachPosition $columnR     \"left\"   0 50\n        -attachControl  $columnR     \"bottom\" 5 $close\n        -attachForm     $columnR     \"right\"  5\n        \n        \n        -attachNone     $close       \"top\"    \n        -attachForm     $close       \"left\"   5 \n        -attachForm     $close       \"bottom\" 5 \n        -attachForm     $close       \"right\"  5\n        \n    shp;\n \n \n \n           \n    formLayout -edit\n\n        -attachForm     ownTxt       \"top\"    5\n        -attachForm     ownTxt       \"left\"   5\n        -attachControl  ownTxt       \"bottom\" 5 jntTxt\n        -attachForm     ownTxt       \"right\"  5\n                \n        -attachNone     jntTxt       \"top\"    \n        -attachForm     jntTxt       \"left\"   5\n        -attachControl  jntTxt       \"bottom\" 5 jntgrid\n        -attachForm     jntTxt       \"right\"  5\n        \n        -attachNone     jntgrid       \"top\"    \n        -attachForm     jntgrid       \"left\"   5\n        -attachControl  jntgrid       \"bottom\" 5 lbTxt\n        -attachForm     jntgrid       \"right\"  5\n          \n        -attachNone     lbTxt       \"top\"    \n        -attachForm     lbTxt       \"left\"   5\n        -attachControl  lbTxt       \"bottom\" 5 radiogrid\n        -attachForm     lbTxt       \"right\"  5\n    \n        -attachNone     radiogrid   \"top\"    \n        -attachForm     radiogrid   \"left\"   5\n        -attachControl  radiogrid   \"bottom\" 5 lbTxt2\n        -attachForm     radiogrid   \"right\"  5\n        \n        -attachNone     lbTxt2       \"top\"    \n        -attachForm     lbTxt2       \"left\"   5\n        -attachControl  lbTxt2       \"bottom\" 5 axisGrid\n        -attachForm     lbTxt2       \"right\"  5\n    \n        -attachNone     axisGrid       \"top\"    \n        -attachForm     axisGrid       \"left\"   5\n        -attachControl  axisGrid       \"bottom\" 5 cnt\n        -attachForm     axisGrid       \"right\"  5\n    \n    \n        -attachNone     cnt         \"top\"    \n        -attachForm     cnt         \"left\"   5 \n        -attachControl  cnt         \"bottom\" 5 dnyTxt\n        -attachPosition cnt         \"right\"  5 50\n        \n        -attachNone     prxcnt      \"top\"    \n        -attachControl  prxcnt      \"left\"   5 cnt\n        -attachControl  prxcnt      \"bottom\" 5 dnyTxt\n        -attachForm     prxcnt      \"right\"  5    \n\n        -attachNone     dnyTxt      \"top\"    \n        -attachForm     dnyTxt      \"left\"   5\n        -attachControl  dnyTxt      \"bottom\" 5 shp\n        -attachForm     dnyTxt      \"right\"  5 \n                   \n        -attachNone     shp         \"top\"\n        -attachForm     shp         \"left\"   5\n        -attachForm     shp         \"bottom\" 5 \n        -attachForm     shp         \"right\"  5\n        \n    mainLayout;\n\n    formLayout -edit\n        \n        -attachForm     uvAxisCB       \"top\"    5\n        -attachForm     uvAxisCB       \"left\"   5 \n        -attachNone     uvAxisCB       \"bottom\" \n        -attachForm     uvAxisCB       \"right\"  5 \n\n        -attachForm     FKCB           \"top\"    5 \n        -attachPosition FKCB           \"left\"   5 50\n        -attachNone     FKCB           \"bottom\" \n        -attachForm     FKCB           \"right\"  5\n        \n        -attachControl  Cmpnt           \"top\"    13 uvAxisCB\n        -attachForm     Cmpnt           \"left\"   5 \n        -attachForm     Cmpnt           \"bottom\" 5\n        -attachControl  Cmpnt           \"right\"  5 Vlm\n\n        -attachControl  Vlm           \"top\"    5 FKCB\n        -attachPosition Vlm           \"left\"   5 50\n        -attachForm     Vlm           \"bottom\" 5\n        -attachForm     Vlm           \"right\"  5\n        \n                \n    jntgrid;\n \n \n    formLayout -edit\n        \n        -attachForm     mainLayout    \"top\"    0 \n        -attachForm     mainLayout    \"left\"   5\n        -attachNone     mainLayout    \"bottom\" \n        -attachNone     mainLayout    \"right\"  \n\n        -attachForm     wireCnt       \"top\"    5\n        -attachControl  wireCnt       \"left\"   5 mainLayout\n        -attachNone     wireCnt       \"bottom\" \n        -attachControl  wireCnt       \"right\"  5 ColClm\n\n        -attachForm     ColClm       \"top\"    5\n        -attachNone     ColClm       \"left\"   \n        -attachNone     ColClm       \"bottom\"  \n        -attachForm     ColClm       \"right\"  5 \n        \n        -attachControl  xtraLay       \"top\"    5 ColClm        \n        -attachControl  xtraLay       \"left\"   5 mainLayout\n        -attachForm     xtraLay       \"bottom\" 5 \n        -attachForm     xtraLay       \"right\"  5 \n\n    topLayout; \n\n \n \n    \n    showWindow RGctrl;\n}\n\nglobal proc RGprxCB()\n{\n    int $val =`checkBox  -q -v pxCB`; \n    if($val == 1)\n    {\n        checkBox  -e -en 1 -v 1 negCB;  \n    }\n    else\n    {\n        checkBox  -e -en 0 -v 0 negCB;          \n    }  \n}\n\n\nglobal proc RGjntAtCntr()\n{\n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {\n        for ($each in $sel)\n        {\n           \n            float $center[]={};\n            float $bbox[] = `exactWorldBoundingBox $each`;\n            $center[0] = ( $bbox[0] + $bbox[3] )/2;\n            $center[1] = ( $bbox[1] + $bbox[4] )/2;\n            $center[2] = ( $bbox[2] + $bbox[5] )/2;   \n            select -cl  ;\n            joint -p $center[0] $center[1] $center[2] -n ($each + \"_Jnt\");\n        }     \n    }\n    else\n    {\n        error \"Nakari ki nakari hi rahegi Select multiple Objects\";\n    }\n}\n\n\n\nglobal proc RGzeroOut()\n{\n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {\n        for ($each in $sel)\n        {\n          string $grp = `group -em -n ($each + \"_grp\")`;  \n          float $pos[] =`xform -q -ws -rp $each`;\n          float $rot[] =`xform -q -ws -ro $each`;\n          xform -ws -t $pos[0] $pos[1] $pos[2] $grp;\n          xform -ws -ro $rot[0] $rot[1] $rot[2] $grp;\n          string $prnt[] =`listRelatives -p $each`;\n          \n          if(`size($prnt)` != 0)\n          {\n              parent $grp $prnt[0];\n              parent $each $grp;\n          }\n          else\n          {\n              parent $each $grp;              \n          }\n          \n        }\n    }\n    else\n    {\n        error \"school nahi gaye kya pata nahi Zero Out kya hai\";\n    }\n}        \n\n//////////////////////////////////////////////////////////////////////\n//////////////////////////  Re-Skin Object  /////////////////////////\n/////////////////////////////////////////////////////////////////////\n\n\nglobal proc RGreSkin ()\n{\nstring $sel[]=`ls -sl`;\n    \n    if(`size $sel` != 0)\n    {\n\n        for($i = 0; $i<`size($sel)`; $i++)\n        {\n            \n            string $skinclst  = `findRelatedSkinCluster($sel[$i])`;\n            \n            if($skinclst != \"\")\n            {\n                string $shp[] =`ls -dag -s $sel[$i]`;\n                string $jnts[] =`skinCluster -q -inf $skinclst`;\n                skinCluster -e  -ubk $shp[0];\n                catchQuiet(`delete \"*bindPose*\"`);\n                skinCluster $jnts $shp[0];\n            }\n            else\n            {\n                error \"dub mar jake select skin object\";\n            }\n \n        }\n    }\n    else\n    {\n        error \"dub mar jake select skin object\";\n    }\n}    \n    \n//////////////////////////////////////////////////////////////////////\n////////////////////////////  Display LRA  ///////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nglobal proc RGLRA ()\n{\nstring $sel[]=`ls -sl`;\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        if(`objectType -isType \"joint\" $sel[$i]`)\n        {\n            float $val= `getAttr ($sel[$i] + \".displayLocalAxis\")`;\n            if($val == 0)\n                setAttr ($sel[$i] + \".displayLocalAxis\") 1;\n            else\n                setAttr ($sel[$i] + \".displayLocalAxis\") 0;\n\n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n///////////////////////////  orient Joint  //////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nglobal proc orientJnt (string $TYPE)\n{\nstring $sel[]=`ls -sl`;\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        if(`objectType -isType \"joint\" $sel[$i]`)\n        {\n            string $cld[] =`listRelatives -c $sel[$i]`;\n            if(`size($cld)` != 0)\n            {\n                 int $val=`checkBox -q -v orntCB`;\n\n                if($val == 0)\n                {\n                    switch ($TYPE)\n                    {\n                        case \"YUP\" :\n                            joint -e  -oj xyz -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"YDN\" :\n                            joint -e  -oj xyz -secondaryAxisOrient ydown $sel[$i];\n                        break ; \n                        \n                        case \"ZUP\" :\n                            joint -e  -oj xzy -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"ZDN\" :\n                            joint -e  -oj xzy -secondaryAxisOrient ydown $sel[$i];\n                        break ;  \n                        \n                        case \"NONE\" :\n                            joint -e  -oj none $sel[$i];\n                        break ;  \n                    } \n                }\n                else\n                {\n                    switch ($TYPE)\n                    {\n                        case \"YUP\" :\n                            joint -e -ch -oj xyz -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"YDN\" :\n                            joint -e -ch  -oj xyz -secondaryAxisOrient ydown $sel[$i];\n                        break ; \n                        \n                        case \"ZUP\" :\n                            joint -e -ch  -oj xzy -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"ZDN\" :\n                            joint -e -ch  -oj xzy -secondaryAxisOrient ydown $sel[$i];\n                        break ;  \n                        \n                        case \"NONE\" :\n                            joint -e -ch  -oj none $sel[$i];\n                        break ;  \n                    } \n                }              \n               \n            }\n            else\n            {\n                 switch ($TYPE)\n                {\n                    case \"NONE\" :\n                        joint -e  -oj none $sel[$i];\n                    break ;  \n                } \n            }         \n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////////  override Color  /////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nglobal proc overrideColor(int $Index) {\n    string $selected[]=`ls -sl`;\n    int $amount=`size($selected)`;\n    for ($n=0; $n<$amount; $n++) {\n        setAttr ($selected[$n] + \".overrideEnabled\") 1;\n    };\n\n    for ($n=0; $n<$amount; $n++) {\n        setAttr ($selected[$n] + \".overrideColor\") $Index;\n    };\n}\n\n//////////////////////////////////////////////////////////////////////\n////////////////////////  Parent FK Hierarchy  ///////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc prntFk()\n{\n    string $sel[] =`ls -os`;\n    \n    if(`size($sel)` != 1)\n    {\n        for($i = (size($sel)-1); $i>0; $i--)\n        {\n            parent $sel[$i] $sel[$i-1];\n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////  Component Joint Creator  /////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc cmpntJntCreator()\n{\n    string $sel[] =`ls -fl -os`;\n    int $uvChk = `checkBox -q -v uvAxisCB`;\n    \n    if(`size($sel)` == 0)\n    {\n         error \"sharam kar abhi tak etana bhi nahi path select component\";\n    }\n    else\n    {\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        \n            if($uvChk == 1)\n            {\n                string $converted[] =`polyListComponentConversion -fv -fe -ff -fvf -fuv -tuv $sel[$i]`;\n                    if(`gmatch $sel[$i] \"*.vtx*\"` || `gmatch $sel[$i] \"*.map*\"`){\n                        float $uv[] =`polyEditUV -q $converted[0]`;\n                        uvJnt $converted[0] $uv[0] $uv[1];\n                    }\n                    \n                    if(`gmatch $sel[$i] \"*.e*\"`){\n                        string $flatCom[] =`ls -fl $converted`;\n                        float $uv[] =`polyEditUV -q $flatCom[0]`;\n                        uvJnt $flatCom[0] $uv[0] $uv[1];\n                        \n                        if($i == size($sel)-1)\n                        {\n                            float $uv[] =`polyEditUV -q $flatCom[1]`;\n                            uvJnt $flatCom[1] $uv[0] $uv[1];\n                        }\n                    } \n                          \n                    if(`gmatch $sel[$i] \"*.f*\"`){\n                        string $flatCom[] =`componentFlatOut $converted`;\n                        float $u= 0;\n                        float $v= 0;\n                        for($r = 0; $r <`size($flatCom)`; $r++)\n                        {\n                            float $uv[] =`polyEditUV -q $flatCom[$r]`;\n                            $u+=$uv[0];\n                            $v+=$uv[1];\n                        }\n                       uvJnt $converted[0] ($u/size($flatCom)) ($v/size($flatCom));\n                    }\n            }\n            else\n            {\n                string $converted[] =`polyListComponentConversion -fv -fe -ff -fvf -fuv -tv $sel[$i]`;\n                string $flatCom[] =`componentFlatOut $converted`;\n        \n                    if(`gmatch $sel[$i] \"*.vtx*\"` || `gmatch $sel[$i] \"*.map*\"`){\n                    \n                    float $pos[] =`xform -q -ws -t $flatCom[0]`;\n                    select -cl  ;\n                    string $jnt=`joint -p $pos[0] $pos[1] $pos[2] `;\n                    select -cl  ;\n        \n                    }\n        \n                    if(`gmatch $sel[$i] \"*.e*\"`){\n                        \n                            float $pos[] =`xform -q -ws -t $flatCom[0]`;\n                            select -cl  ;\n                            string $jnt=`joint -p $pos[0] $pos[1] $pos[2] `;\n                            select -cl  ;\n                        if($i == size($sel)-1)\n                        {\n                            float $pos[] =`xform -q -ws -t $flatCom[1]`;\n                            select -cl  ;\n                            string $jnt=`joint -p $pos[0] $pos[1] $pos[2] `;\n                            select -cl  ;\n                        }\n                    } \n        \n                    if(`gmatch $sel[$i] \"*.f*\"`){\n                        float $x= 0;\n                        float $y= 0;\n                        float $z= 0;\n        \n                        for($r = 0; $r <`size($flatCom)`; $r++)\n                        {\n                            float $pos[] =`xform -q -ws -t $flatCom[$r]`;\n                            $x+=$pos[0];\n                            $y+=$pos[1];\n                            $z+=$pos[2];\n        \n                        }\n                            select -cl  ;\n                            string $jnt=`joint -p ($x/size($flatCom)) ($y/size($flatCom)) ($z/size($flatCom)) `;\n                            select -cl  ;\n                    }\n            }\n        \n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n///////////////////////  Joint At Controller  ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc jntAtCntr()\n{\n    string $sel[] =`ls -fl -os`;\n    \n    if(`size($sel)` != 0)\n    { \n    \n        float $pos[]=`BBcenter $sel`;\n        select -cl  ;\n        joint -p $pos[0] $pos[1] $pos[2];\n        select -r $sel;\n    \n    }\n    else\n    {\n        error \"Bimad estamal kiya karo error ke bharose mat raho\";\n    }\n\n}\n\n//////////////////////////////////////////////////////////////////////\n////////////////////////  Component Flat Out  ///////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc string[] componentFlatOut(string $cmpnt[])\n{\n\nstring $return[] = {};\nint $incr = 0;\n    for($i = 0; $i < `size($cmpnt)`; $i++)\n    {\n\n        if(`gmatch $cmpnt[$i] \"*:*\"`){\n            \n        string $buffer[] ={};\n        $numTokens = `tokenize $cmpnt[$i] \"[\" $buffer`;\n        string $objNm = $buffer[0];\n        $numTokens = `tokenize $buffer[1] \"]\" $buffer`;\n        $numTokens = `tokenize $buffer[0] \":\" $buffer`;\n        int $start = $buffer[0];\n        int $end = $buffer[1];\n        \n            for($r = $start; $r <= $end; $r++)\n            {\n              $return[$incr]= ($objNm + \"[\" + $r + \"]\" ); \n              $incr++;\n            }\n        \n        }\n        else\n        {\n              $return[$incr]=  $cmpnt[$i]; \n              $incr++;            \n        }\n    }\n    return $return; \n}\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////  UV Folicle Button  ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\n\nglobal proc RGuvFlc()\n{\nstring $sel[] =`filterExpand -ex 1 -sm 31 -sm 35`;\nstring $folicle = \"\";\nif(`size($sel)` == 0)\n{\n     error \"riger ka naam kharab kar rahe ho select UV or Vertex\";\n}\nelse\n{\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        \n        string $shp[]=`listRelatives -p -s $sel[$i]`;\n        string $converted[] =`polyListComponentConversion -fv -fe -ff -fvf -fuv -tuv $sel[$i]`;\n        if(`gmatch $converted[0] \"*.map*\"`){\n            float $uv[] =`polyEditUV -q $converted[0]`;\n            $folicle =`uvFolicle $shp[0] $uv[0] $uv[1]`; \n        }\n    }\n}\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////////////  UV Joint  ////////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc uvJnt(string $objNm,float $u, float $v)\n{\n    string $shp[]=`listRelatives -p -s $objNm`;\n    string $folicle =`uvFolicle $shp[0] $u $v`; \n    select -cl  ;\n    string $jnt=`joint`;\n    parent $jnt $folicle;\n    xform -os -t 0 0 0 $jnt;\n    xform -os -ro 0 0 0 $jnt;\n    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -jointOrient $jnt;\n    parent  -w $jnt;\n    delete $folicle;\n    select -cl  ;\n}\n\n//////////////////////////////////////////////////////////////////////\n///////////////////////  BoundingBox Center  ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc float[]  BBcenter(string $objs[])\n{\n\n    float $center[]={};\n    float $bbox[] = `exactWorldBoundingBox $objs`;\n    $center[0] = ( $bbox[0] + $bbox[3] )/2;\n    $center[1] = ( $bbox[1] + $bbox[4] )/2;\n    $center[2] = ( $bbox[2] + $bbox[5] )/2;   \n    \n    return $center;\n\n}\n\n\n//////////////////////////////////////////////////////////////////////\n////////////////////////////  UV Folicle  ////////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc string uvFolicle(string $shp, float $uVal, float $vVal)\n{\n    string $hsys = `createNode hairSystem`;\n    int $ind[0] ;\n    $ind[0] = 0;\n    int $i;\n    float $v = 0;\n    float $u = $i/10.0;\n    string $newHair = createHairCurveNode( $hsys, $shp, $uVal,$vVal,2, \n    false, false, false, false, \"\", 1.0, $ind, \"\",\"\",1);\n    delete `listRelatives -p $hsys`;\n    return $newHair;\n}\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////    LOCK AND HIDE    ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc int  LNH (string $obj,int $tx,int $ty,int $tz,int $rx,int $ry,int $rz,int $sx,int $sy,int $sz,int $v)\n{\nint $attrVal[];\n$attrVal[0] =$tx;$attrVal[1] =$ty;$attrVal[2] =$tz;\n$attrVal[3] =$rx;$attrVal[4] =$ry;$attrVal[5] =$rz;\n$attrVal[6] =$sx;$attrVal[7] =$sy;$attrVal[8] =$sz;\n$attrVal[9] =$v;\nint $keyVal;\nstring $attrs[] ={\"tx\",\"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"};\n\n    for ($i=0;$i<(size($attrs));$i++)\n    {            \n        if ($attrVal[$i] == 1){\n            $keyVal = 0;\n            setAttr -lock $attrVal[$i] -keyable $keyVal -channelBox $keyVal ($obj +  \".\" + $attrs[$i]);\n    \n    }\n    }\n\n    return 1;\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////// CONTROL PROXY OR NOT ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc doIt(int $Fk)\n{\n\nint $prx = `checkBox  -q -v pxCB`;  \n\n    if($prx == 1)\n    {\n    prxCnt $Fk;\n    }\n    \n    if($prx == 0)\n    {\n    cnt $Fk;\n    }\n}\n\n\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////      CONTROLER      ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc cnt(int $Fk)\n{\nstring $sel[]= `ls -sl`;\n\nif ((size($sel)) == 0){\nerror \"Select Object for controller\";\n}\nelse{\n    //find UI info \n    string $axis =`radioCollection -q -sl ax`;\n    int $Nrax[] ={0, 0, 0};\n    if($axis==\"x\"){$Nrax ={1, 0, 0};};\n    if($axis==\"y\"){$Nrax ={0, 1, 0};};\n    if($axis==\"z\"){$Nrax ={0, 0, 1};};\n    string $cnst =`radioCollection -q -sl cnst`;\n    int $sclCst =`checkBox -q -v sclCB`;\n    \n    //create parent group\n    string $mnGrp = `group -em -n ($sel[0] + \"_ctlGrp\")`;\n    if(`objExists \"Extra_MotionSystem\"`)\n        {parent $mnGrp \"Extra_MotionSystem\";}\n    for ($each in $sel){\n        string $chld[] = {};\n        if ($Fk == 1)\n        {\n         $chld =`ls -dag $each `;\n        }\n        else\n        {\n        $chld[0] = $each;\n        }\n        \n        for ($i=0;$i<(size($chld));$i++)\n        {\n            string $typ =`nodeType $chld[$i]`;\n            if ($typ == \"transform\" || $typ == \"joint\")\n                {        \n                //create contrller shape \n                string $cntName[] =`circle \n                    -c 0 0 0 \n                    -nr $Nrax[0] $Nrax[1] $Nrax[2] \n                    -sw 360 -r 1 -d 3 -ut 0 \n                    -tol 0.01 -s 8 -ch 0\n                    -n ($chld[$i] + \"_ctl\")`;\n                    \n                string $grp = `group -em -n ($chld[$i] + \"_OffsetGrp\")`;\n                string $grp1 =`group -em -n ($chld[$i] + \"_PosGrp\")`;\n                \n                parent $cntName[0] $grp;\n                parent $grp $grp1;\n                \n                // position controller\n                float $pos[]=`xform -q -ws -rp$chld[$i]`;\n                float $rot[]=`xform -q -ws -ro $chld[$i]`;\n                \n                xform -ws -t $pos[0] $pos[1] $pos[2] $grp1;\n                xform -ws -ro $rot[0] $rot[1] $rot[2] $grp1;\n                \n                //Constraint \n                if($cnst==\"pnt\"){\n                pointConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 0 0 0 1 1 1 0 0 0 1;\n                LNH $grp 0 0 0 1 1 1 0 0 0 1;\n                }\n                \n                if($cnst==\"ort\"){\n                orientConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 1 1 1 0 0 0 0 0 0 1;\n                LNH $grp 1 1 1 0 0 0 0 0 0 1;\n                }\n                \n                if($cnst==\"prnt\"){\n                parentConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n                LNH $grp 0 0 0 0 0 0 0 0 0 1;\n                }\n                \n                if($sclCst== 1){\n                scaleConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n                LNH $grp 0 0 0 0 0 0 0 0 0 1;\n                }else{\n                LNH $cntName[0] 0 0 0 0 0 0 1 1 1 1;\n                LNH $grp 0 0 0 0 0 0 1 1 1 1;\n                }\n                \n                //give parent \n                string $prnt[] =`listRelatives -p $chld[$i]`;\n\n                if(`objExists  ($prnt[0] + \"_ctl\")`)\n                {\n                parent $grp1  ($prnt[0] + \"_ctl\");\n                }\n                else\n                {\n                parent $grp1 $mnGrp;\n                }\n               \n                \n                }\n            }\n        }\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////   PROXY CONTROLER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc prxCnt(int $Fk)\n{\nstring $sel[]= `ls -sl`;\n\nif ((size($sel)) == 0){\nerror \"Select Object for controller\";\n}\n    else{\n    \n    int $mdVal =`checkBox -q -v negCB`;\n    \n    //find UI info \n    string $axis =`radioCollection -q -sl ax`;\n    int $Nrax[] ={0, 0, 0};\n    if($axis==\"x\"){$Nrax ={1, 0, 0};};\n    if($axis==\"y\"){$Nrax ={0, 1, 0};};\n    if($axis==\"z\"){$Nrax ={0, 0, 1};};\n    string $cnst =`radioCollection -q -sl cnst`;\n    int $sclCst =`checkBox -q -v sclCB`;\n    \n    //create parent group\n    string $mnGrp = `group -em -n ($sel[0] + \"_ctlGrp\")`;\n    \n        if(`objExists \"Extra_MotionSystem\"`)\n            {parent $mnGrp \"Extra_MotionSystem\";}\n        \n    string $prxMnGrp = `group -em -n (\"Proxy_\" + $sel[0] + \"_ctlGrp\")`;\n    setAttr ($prxMnGrp + \".visibility\") 0;\n    setAttr -lock true ($prxMnGrp + \".visibility\");\n    \n   \n    for ($each in $sel){\n    \n        string $chld[] = {};\n        if ($Fk == 1)\n        {\n         $chld =`ls -dag $each `;\n        }\n        else\n        {\n        $chld[0] = $each;\n        }\n        \n        \n        for ($i=0;$i<(size($chld));$i++)\n        {\n        \n            string $typ =`nodeType $chld[$i]`;\n            if ($typ == \"transform\" || $typ == \"joint\"){\n            //create contrller shape \n            string $cntName[] =`circle \n                -c 0 0 0 \n                -nr $Nrax[0] $Nrax[1] $Nrax[2] \n                -sw 360 -r 1 -d 3 -ut 0 \n                -tol 0.01 -s 8 -ch 0\n                -n ($chld[$i] + \"_ctl\")`;\n                \n            string $grp = `group -em -n ($chld[$i] + \"_OffsetGrp\")`;\n            string $grp1 =`group -em -n ($chld[$i] + \"_PosGrp\")`;\n            \n            parent $cntName[0] $grp;\n            parent $grp $grp1;\n            \n            //proxy setup\n            string $pxCnt[] =`circle \n                -c 0 0 0 \n                -nr $Nrax[0] $Nrax[1] $Nrax[2] \n                -sw 360 -r 1 -d 3 -ut 0 \n                -tol 0.01 -s 8 -ch 0\n                -n (\"Proxy_\" + $chld[$i] + \"_ctl\")`;\n                \n            string $pxGrp = `group -em -n (\"Proxy_\" + $chld[$i] + \"_OffsetGrp\")`;\n            string $pxGrp1 =`group -em -n (\"Proxy_\" + $chld[$i] + \"_PosGrp\")`;\n            \n            parent $pxCnt[0] $pxGrp;\n            parent $pxGrp $pxGrp1;\n            \n            //Make Connections\n            connectAttr -f ($cntName[0] + \".translate\") ($pxCnt[0] + \".translate\");\n            connectAttr -f ($cntName[0] + \".rotate\") ($pxCnt[0] + \".rotate\");\n            connectAttr -f ($cntName[0] + \".scale\") ($pxCnt[0] + \".scale\");\n\n            if($mdVal == 0)\n            {\n                connectAttr -f ($grp + \".translate\") ($pxGrp + \".translate\");\n\n            }\n            else\n            {\n                string $revMD =`createNode multiplyDivide -n ($cntName[0] + \"revMD\")`;\n                connectAttr -f ($cntName[0] + \".translate\") ($revMD + \".input1\");\n                setAttr ($revMD + \".input2\") -type \"float3\" -1.0 -1.0 -1.0;\n                connectAttr -f  ($revMD + \".output\") ($grp + \".translate\");\n\n            }\n\n            \n            connectAttr -f ($grp + \".rotate\") ($pxGrp + \".rotate\");\n            connectAttr -f ($grp + \".scale\") ($pxGrp + \".scale\");\n            \n            \n            // position controller\n            float $pos[]=`xform -q -ws -rp$chld[$i]`;\n            float $rot[]=`xform -q -ws -ro $chld[$i]`;\n            \n            xform -ws -t $pos[0] $pos[1] $pos[2] $grp1;\n            xform -ws -ro $rot[0] $rot[1] $rot[2] $grp1;\n            \n            xform -ws -t $pos[0] $pos[1] $pos[2] $pxGrp1;\n            xform -ws -ro $rot[0] $rot[1] $rot[2] $pxGrp1;\n            \n            \n            \n            //Constraint \n            if($cnst==\"pnt\"){\n            pointConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 0 0 0 1 1 1 0 0 0 1;\n            LNH $grp 0 0 0 1 1 1 0 0 0 1;\n            }\n            \n            if($cnst==\"ort\"){\n            orientConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 1 1 1 0 0 0 0 0 0 1;\n            LNH $grp 1 1 1 0 0 0 0 0 0 1;\n            }\n            \n            if($cnst==\"prnt\"){\n            parentConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n            LNH $grp 0 0 0 0 0 0 0 0 0 1;\n            }\n            \n            if($sclCst== 1){\n            scaleConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n            LNH $grp 0 0 0 0 0 0 0 0 0 1;\n            }else{\n            LNH $cntName[0] 0 0 0 0 0 0 1 1 1 1;\n            LNH $grp 0 0 0 0 0 0 1 1 1 1;\n            }\n            \n                \n                //give parent \n                string $prnt[] =`listRelatives -p $chld[$i]`;\n\n                if(`objExists  ($prnt[0] + \"_ctl\")`)\n                {\n                parent $grp1  ($prnt[0] + \"_ctl\");\n                }\n                else\n                {\n                parent $grp1 $mnGrp;\n                }\n                \n                \n                if(`objExists  (\"Proxy_\" + $prnt[0] + \"_ctl\")`)\n                {\n                parent $pxGrp1  (\"Proxy_\" + $prnt[0] + \"_ctl\");\n                }\n                else\n                {\n                parent $pxGrp1 $prxMnGrp;\n                }\n                \n            }\n\n        }\n        \n  \n    }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////    SHAPE REPLACER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc shpRplc ()\n{\n    string $sel[]= `ls -sl`;\n    if ((size($sel)) == 0){\n    error \"Select Target objects & then source object\";\n    }\n    else{\n        int $sz = size($sel)-1;\n        string $grp = `group -em -n (\"TempGrp\" + $sel[$sz])`;\n        string $prntShp[] =`listRelatives -ad -s $sel[$sz] `;\n        parent -add -s $prntShp[0] $grp;\n        \n        for ($i=0;$i<$sz;$i++)\n            {\n            string $dupl[] =`duplicate -renameChildren $grp`;\n            string $nwShp[] =`listRelatives -ad -s$dupl[0] `;\n            \n            string $chld[] =`listRelatives -ad -s $sel[$i] `;\n            parent -add -s $nwShp[0] $sel[$i];\n            \n            for ($each in $chld){if(`objExists $each`){delete $each;}}\n            rename $nwShp[0] ($sel[$i] + \"Shape\");\n            delete $dupl;\n            }\n       delete $grp;\n    }\n}\n\n\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////   WIRE CONTROLLER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc string cntWire (string $TYPE)\n  {\n  \nstring $return[] ={};\n  switch ($TYPE)\n    {\n    case \"Triangle\" :\n      $return[0] =`curve -d 1 -p -1.03923 0 0.6 -p 1.03923 0 0.6 -p 0 0 -1.2 -p -1.03923 0 0.6 -k 0 -k 1 -k 2 -k 3 -n \"controller1\" `;\n\tbreak ;\n\t\n    case \"Circle\" :\n      $return =`circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n \"controller1\" `;\n      break ;\t\n\t\n    case \"Square\" :\n      $return[0] =`curve -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -n \"controller1\"` ;\n      break ;\n      \n    case \"FatCross\" :\n      $return[0] =`curve -d 1 -p 2 0 1 -p 2 0 -1 -p 1 0 -1 -p 1 0 -2 -p -1 0 -2 -p -1 0 -1 -p -2 0 -1 -p -2 0 1 -p -1 0 1 -p -1 0 2 -p 1 0 2 -p 1 0 1 -p 2 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -n \"controller1\" `;\n      break ;      \n      \n    case \"Pyramid\" :\n      $return[0] =`curve -d 1 -p 0 2 0 -p 1 0 -1 -p -1 0 -1 -p 0 2 0 -p -1 0 1 -p 1 0 1 -p 0 2 0 -p 1 0 -1 -p 1 0 1 -p -1 0 1 -p -1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -n \"controller1\" `;\n      break ;\n      \n    case \"Cube\" :\n      $return[0] =`curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -n \"controller1\" `;\n      break ; \n           \n    case \"Sphere\" :\n      $return[0] =`curve -d 1 -p 0 0 1 -p 0 0.5 0.866025 -p 0 0.866025 0.5 -p 0 1 0 -p 0 0.866025 -0.5 -p 0 0.5 -0.866025 -p 0 0 -1 -p 0 -0.5 -0.866025 -p 0 -0.866025 -0.5 -p 0 -1 0 -p 0 -0.866025 0.5 -p 0 -0.5 0.866025 -p 0 0 1 -p 0.707107 0 0.707107 -p 1 0 0 -p 0.707107 0 -0.707107 -p 0 0 -1 -p -0.707107 0 -0.707107 -p -1 0 0 -p -0.866025 0.5 0 -p -0.5 0.866025 0 -p 0 1 0 -p 0.5 0.866025 0 -p 0.866025 0.5 0 -p 1 0 0 -p 0.866025 -0.5 0 -p 0.5 -0.866025 0 -p 0 -1 0 -p -0.5 -0.866025 0 -p -0.866025 -0.5 0 -p -1 0 0 -p -0.707107 0 0.707107 -p 0 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n \"controller1\" `;\n      break ;    \n              \t\n    case \"Cone\":\n\t\t$return[0] =`curve -d 1 -p 0.5 -1 0.866025 -p -0.5 -1 0.866025 -p 0 1 0 -p 0.5 -1 0.866025 -p 1 -1 0 -p 0 1 0 -p 0.5 -1 -0.866025 -p 1 -1 0 -p 0 1 0 -p -0.5 -1 -0.866026 -p 0.5 -1 -0.866025 -p 0 1 0 -p -1 -1 -1.5885e-007 -p -0.5 -1 -0.866026 -p 0 1 0 -p -0.5 -1 0.866025 -p -1 -1 -1.5885e-007 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n helperCone`;\n\tbreak;\n\n    case \"Rombus\" :\n      $return[0] =`curve -d 1 -p 0 1 0 -p 1 0 0 -p 0 0 1 -p -1 0 0 -p 0 0 -1 -p 0 1 0 -p 0 0 1 -p 0 -1 0 -p 0 0 -1 -p 1 0 0 -p 0 1 0 -p -1 0 0 -p 0 -1 0 -p 1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -n \"controller1\" `;\n      break ;\n\n    case \"SingleNormal\" :\n      $return[0] =`curve -d 1 -p 0 0 -1.32 -p -0.99 0 0 -p -0.33 0 0 -p -0.33 0 0.99 -p 0.33 0 0.99 -p 0.33 0 0 -p 0.99 0 0 -p 0 0 -1.32 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n \"controller1\" `;\n      break ;\n\n    case \"FourNormal\" :\n      $return[0] =`curve -d 1 -p 0 0 -1.98 -p -0.495 0 -1.32 -p -0.165 0 -1.32 -p -0.165 0 -0.165 -p -1.32 0 -0.165 -p -1.32 0 -0.495 -p -1.98 0 0 -p -1.32 0 0.495 -p -1.32 0 0.165 -p -0.165 0 0.165 -p -0.165 0 1.32 -p -0.495 0 1.32 -p 0 0 1.98 -p 0.495 0 1.32 -p 0.165 0 1.32 -p 0.165 0 0.165 -p 1.32 0 0.165 -p 1.32 0 0.495 -p 1.98 0 0 -p 1.32 0 -0.495 -p 1.32 0 -0.165 -p 0.165 0 -0.165 -p 0.165 0 -1.32 -p 0.495 0 -1.32 -p 0 0 -1.98 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -n \"controller1\" `;\n      break ;\n\n    case \"Dumbell\":\n\t\t$return[0] =`curve -d 1 -p -1.207536 0 0.0254483 -p -1.123549 -0.202763 0.0254483 -p -0.920786 -0.28675 0.0254483 -p -0.718023 -0.202763 0.0254483 -p -0.63504 -0.00242492 0.0254483 -p 0.634091 0 0.0254483 -p 0.718023 -0.202763 0.0254483 -p 0.920786 -0.28675 0.0254483 -p 1.123549 -0.202763 0.0254483 -p 1.207536 0 0.0254483 -p 1.123549 0.202763 0.0254483 -p 0.920786 0.28675 0.0254483 -p 0.718023 0.202763 0.0254483 -p 0.634091 0 0.0254483 -p -0.63504 -0.00242492 0.0254483 -p -0.718023 0.202763 0.0254483 -p -0.920786 0.28675 0.0254483 -p -1.123549 0.202763 0.0254483 -p -1.207536 0 0.0254483 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -n helperDumbell`;\n\tbreak;\n\t\n    case \"ArrowOnBall\" :\n      $return[0] =`curve -d 1 -p 0 0.35 -1.001567 -p -0.336638 0.677886 -0.751175 -p -0.0959835 0.677886 -0.751175 -p -0.0959835 0.850458 -0.500783 -p -0.0959835 0.954001 -0.0987656 -p -0.500783 0.850458 -0.0987656 -p -0.751175 0.677886 -0.0987656 -p -0.751175 0.677886 -0.336638 -p -1.001567 0.35 0 -p -0.751175 0.677886 0.336638 -p -0.751175 0.677886 0.0987656 -p -0.500783 0.850458 0.0987656 -p -0.0959835 0.954001 0.0987656 -p -0.0959835 0.850458 0.500783 -p -0.0959835 0.677886 0.751175 -p -0.336638 0.677886 0.751175 -p 0 0.35 1.001567 -p 0.336638 0.677886 0.751175 -p 0.0959835 0.677886 0.751175 -p 0.0959835 0.850458 0.500783 -p 0.0959835 0.954001 0.0987656 -p 0.500783 0.850458 0.0987656 -p 0.751175 0.677886 0.0987656 -p 0.751175 0.677886 0.336638 -p 1.001567 0.35 0 -p 0.751175 0.677886 -0.336638 -p 0.751175 0.677886 -0.0987656 -p 0.500783 0.850458 -0.0987656 -p 0.0959835 0.954001 -0.0987656 -p 0.0959835 0.850458 -0.500783 -p 0.0959835 0.677886 -0.751175 -p 0.336638 0.677886 -0.751175 -p 0 0.35 -1.001567 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n \"controller1\" `;\n      break ;\n\t}\nstring $rtrn = $return[0];\n\n    return $rtrn;\n\t\n}\n//////////////////////////////////////////////////////////////////////\n/////////////////////////   WIRE CONTROLLER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc cntWireNw (string $TYPE)\n{\nstring $sel[] = `ls -os -fl `;\n    if(`size $sel` != 0)\n    {\n        string $cnt =`cntWire $TYPE`;\n        select  $sel;\n        select -add $cnt;\n        shpRplc;\n        delete $cnt;\n        select  $sel;\n    }\n    else\n    {\n       cntWire $TYPE;\n       select -cl  ;\n\n    }\n}\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////   Dynamic Setuup   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Copyright (C) 2011-2011 Rahul Gawade, and/or its licensors.\n// All rights reserved.\n//\n// The coded instructions, statements, computer programs, and/or related\n// material (collectively the \"Data\") in these files contain unpublished\n// information proprietary to Rahul Gawade, and/or its licensors,\n// which is protected by Indian federal copyright law and by\n// international treaties.\n// Forr any quarries contact Rahul Gawade at rahulsg2901@gmail.com \n\n//\n//\n//  Creation Date:  06-04-2014\n//\n//  Description:\n//      Add IK/FK dynamic Setup\n//\n\n//  Procedure Name:\n//\t\tdynamicSetup\n//\n//  Lebals:\n//\t\t1. dyna + any string\n//      2. propA any where you wont IK controller & at end of joint\n//\n//  Description:\n//      Add IK/FK dynamic Setup.\n//\n//  Input Arguments:\n//      None.\n//\n//  Return Value:\n//      None.\n//\n\nglobal proc transAtt()\n{\nstring $sel[] =`ls -sl`;\n\n\nif(size($sel) == 2)\n{\nstring $text;\nstring $result = `promptDialog\n    -title \"Rename Object\"\n    -message \"Enter Name:\"\n    -button \"OK\" -button \"Cancel\"\n    -defaultButton \"OK\" -cancelButton \"Cancel\"\n    -dismissString \"Cancel\"`;\n\n\nif ($result == \"OK\") {\n    $text = `promptDialog -query -text`;\n    print $text;\n    if($text != \"\")\n    {\n    int $go = 0;\n    string $lstatt[] =`listAttr -ud $sel[1]`;\n    string $atts[] ={\"Setup\", \"Before\", \"After\", \"Dynamic\", \"Stiffness\", \n    \"Damp\", \"Friction\", \"Gravity\", \"Attract\",\"Flow\", \"Iterations\"}; \n    \n    for ($e in $lstatt)\n    {\n        for($item in $atts)\n        {\n            if($e == $item)\n            {\n            $go +=1;\n            }\n        }\n    }\n    \n    if( size($atts) == $go)\n    {\n    //Add Attr\n    if ((`attrExt $sel[0] $text`) == 0){\n        addAttr -ln $text  -at \"enum\" -en \"Off:On:\"  $sel[0];\n        setAttr -e -lock true -keyable false -cb true ($sel[0] + \".\" + $text);}\n     $text = ($text + \"_\");\n        \n    if ((`attrExt $sel[0] ($text + \"Setup\")`) == 0){\n        addAttr -ln ($text + \"Setup\")  -at \"enum\" -en \"Off:On:\"  $sel[0];\n        setAttr -e -keyable false ($sel[0] + \".\" + $text + \"Setup\");}\n    \n    if ((`attrExt $sel[0] ($text + \"Before\")`) == 0){\n        addAttr -ln ($text + \"Before\")  -at \"enum\" -en \"Off:FK:IK:\"  $sel[0];\n        setAttr -e-keyable false -cb true ($sel[0] + \".\" + $text + \"Before\");}\n    \n    if ((`attrExt $sel[0] ($text + \"After\")`) == 0){\n        addAttr -ln ($text + \"After\")  -at \"enum\" -en \"Off:On:\"  $sel[0];\n        setAttr -e-keyable false -cb true ($sel[0] +  \".\" + $text + \"After\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Dynamic\")`) == 0){\n        addAttr -ln ($text + \"Dynamic\")  -at \"enum\" -en \"Static:Dynamic:\"  $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Dynamic\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Stiffness\")`) == 0){\n        addAttr -ln ($text + \"Stiffness\")  -min 0 -max 1  -at \"double\" -dv 0.15 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Stiffness\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Damp\")`) == 0){\n        addAttr -ln ($text + \"Damp\") -min 0 -max 1  -at \"double\" $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Damp\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Friction\")`) == 0){\n        addAttr -ln ($text + \"Friction\")  -min 0 -max 1  -at \"double\" -dv 0.5 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Friction\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Gravity\")`) == 0){\n        addAttr -ln ($text + \"Gravity\")  -at \"double\" -dv 0.98 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Gravity\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Attract\")`) == 0){\n        addAttr -ln ($text + \"Attract\")  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Attract\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Flow\")`) == 0){\n        addAttr -ln ($text + \"Flow\")  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Flow\");}  \n    \n    if ((`attrExt $sel[0] ($text + \"Iterations\")`) == 0){\n        addAttr -ln ($text + \"Iterations\")  -at \"long\" -min 1 -max 50 -dv 4 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Iterations\");} \n              \n            \n        for ($e in $atts)\n        {\n        connectAttr -f ($sel[0] + \".\" + $text + $e) ($sel[1] + \".\" + $e);\n        }\n        \n            \n        }\n        else\n        {\n        error \"Attribute not exists\";\n        }\n    }\n    else\n    {\n        error \"Tuz.... naav tak\";    \n    }\n    }\n\n}\nelse\n{\nerror \"select Controller then Parent joint\";\n}\n}\n\nglobal proc addPropA()\n{\n    \n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {\n        for ($each in $sel)\n        {\n        \n            if(`objectType $each` == \"joint\")\n            {\n                if(`getAttr ($each + \".drawLabel\")` != 1)\n                {\n                    setAttr ($each + \".type\") 15;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"\");\n                    setAttr ($each + \".drawLabel\") 1;\n                }\n                else\n                {\n                    setAttr ($each + \".type\") 0;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"\");\n                    setAttr ($each + \".drawLabel\") 0; \n                }\n            }\n        }\n    }\n    else\n    {\n        error \"Tuzse yahi umid thi select Joint first\";\n    }\n}\n\n\n\n\nglobal proc addDyna()\n{\n    \n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {    \n        for ($each in $sel)\n        {\n            if(`objectType $each` == \"joint\")\n            {\n                if(`getAttr ($each + \".drawLabel\")` != 1)\n                {\n                    setAttr ($each + \".type\") 18;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"dyna\" + $each);\n                    setAttr ($each + \".drawLabel\") 1;\n                }\n                else\n                {\n                    setAttr ($each + \".type\") 0;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"\");\n                    setAttr ($each + \".drawLabel\") 0; \n                }\n            }\n        }\n    }\n    else\n    {\n        error \"Tuzse yahi umid thi select Joint first\";\n    }\n}\n\n\n\nglobal proc bakeDyna()\n{\nstring $sets[] =`ls -set \"*HairBakedSet*\"`;\nstring $setObj[] =`sets -q $sets[0]`;\nfloat $start  = `playbackOptions -q -ast`;\nfloat $end  = `playbackOptions -q -aet`;\n\nbakeResults \n    -simulation true \n    -t ($start + \":\" +  $end)\n    -sampleBy 1 \n    -disableImplicitControl true \n    -preserveOutsideKeys true \n    -sparseAnimCurveBake false \n    -removeBakedAttributeFromLayer false \n    -bakeOnOverrideLayer false \n    -controlPoints false \n    -shape true \n    $setObj;\n    \nprint \"Bake successfully\\n\";\n}\n\nglobal proc unbakeDyna()\n{\n    string $sets[] =`ls -set \"*HairBakedSet*\"`;\n    string $setObj[] =`sets -q $sets[0]`;\n    cutKey -time \"-9000:9000\" $setObj; \n\n    for ($obj in $setObj)\n    {\n        string $s1 = `substitute \"aftdyna_\"  $obj \"@#$%^&*!\"`;\n        string $buffer[] = {};\n        $numTokens = `tokenize  $s1 \"@#$%^&*!\"  $buffer`;\n        string $s2 = `substitute \"_grp\"  $buffer[size($buffer)-1] \"\"`;\n        string $conJnt[] =`ls (\"*Dyna_\" + $s2)`;\n        \n        connectAttr -f  ($conJnt[0] + \".rotateX\") ($obj + \".rotateX\");\n        connectAttr -f  ($conJnt[0] + \".rotateY\") ($obj + \".rotateY\");\n        connectAttr -f  ($conJnt[0] + \".rotateZ\") ($obj + \".rotateZ\");\n        connectAttr -f  ($conJnt[0] + \".scaleX\") ($obj + \".scaleX\");\n        \n        \n        string $attr[]=`listAttr -ud $obj`;\n            if($attr[0] == \"transCon\")\n            {\n            connectAttr -f  ($conJnt[0] + \".translateX\") ($obj + \".translateX\");\n            connectAttr -f  ($conJnt[0] + \".translateY\") ($obj + \".translateY\");\n            connectAttr -f  ($conJnt[0] + \".translateZ\") ($obj + \".translateZ\");\n            }\n    }\n    print \"Unbake successfully\\n\";\n}\n\n\n\nglobal proc dynaSetup()\n{\n\nstring $sel[] =`ls -sl`;\nstring $nucl[] ={};\n \nif ((size($sel)) == 0){\n     warning \"select the parent joint.....\";}\nelse{\n//find all dyan lables\nstring $child[] =`listRelatives -ad -c $sel[0]`;\nstring $Dyna[] = {};\nint $no= 0;\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            string $lable =`getAttr ($each + \".otherType\")`;\n            int $types =`getAttr ($each + \".type\")`;\n            int $drawlb =`getAttr ($each + \".drawLabel\")`;\n            \n                    if ((startsWith ($lable, \"dyna\")) == 1 && $types == 18 && $drawlb == 1)\n                    {\n                        setAttr ($each + \".drawLabel\") 0;\n                        $Dyna[$no]=$each;\n                        $no+= 1;\n                    }\n                    \n\n        }\n    }\n    \n\nif ((size($Dyna)) == 0){\n     warning \"No dyna Exist....\";}\nelse{\n\n//Add Attr\nif ((`attrExt $sel[0] \"Setup\"`) == 0){\n    addAttr -ln \"Setup\"  -at \"enum\" -en \"Off:On:\"  $sel[0];\n    setAttr -e -keyable 0 ($sel[0] + \".Setup\");}\n\nif ((`attrExt $sel[0] \"Before\"`) == 0){\n    addAttr -ln \"Before\"  -at \"enum\" -en \"Off:FK:IK:\"  $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Before\");}\n\nif ((`attrExt $sel[0] \"After\"`) == 0){\n    addAttr -ln \"After\"  -at \"enum\" -en \"Off:On:\"  $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".After\");}\n    \nif ((`attrExt $sel[0] \"Dynamic\"`) == 0){\n    addAttr -ln \"Dynamic\"  -at \"enum\" -en \"Static:Dynamic:\"  $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Dynamic\");}\n    \nif ((`attrExt $sel[0] \"Stiffness\"`) == 0){\n    addAttr -ln \"Stiffness\"  -min 0 -max 1  -at \"double\" -dv 0.15 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Stiffness\");}\n    \nif ((`attrExt $sel[0] \"Damp\"`) == 0){\n    addAttr -ln \"Damp\" -min 0 -max 1  -at \"double\" $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Damp\");}\n    \nif ((`attrExt $sel[0] \"Friction\"`) == 0){\n    addAttr -ln \"Friction\"  -min 0 -max 1  -at \"double\" -dv 0.5 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Friction\");}\n    \nif ((`attrExt $sel[0] \"Gravity\"`) == 0){\n    addAttr -ln \"Gravity\"  -at \"double\" -dv 0.98 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Gravity\");}\n    \nif ((`attrExt $sel[0] \"Attract\"`) == 0){\n    addAttr -ln \"Attract\"  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Attract\");}\n    \nif ((`attrExt $sel[0] \"Flow\"`) == 0){\n    addAttr -ln \"Flow\"  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Flow\");}    \n    \nif ((`attrExt $sel[0] \"Iterations\"`) == 0){\n    addAttr -ln \"Iterations\"  -at \"long\" -min 1 -max 50 -dv 4 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Iterations\");}   \n\n\n\n//Veribles\nstring $fkJnts[] = {};\nstring $fkcnt[] = {};\nstring $ikJnts[] = {};\nstring $ikcnt[] = {};\nstring $dynaJnts[] = {};\nstring $dynacnt[] = {};\nstring $bfrJnts[] = {};\nstring $dynaParent[] ={};\n\nfor ($i=0;$i<(size($Dyna));$i++)\n{\nstring $prt[] =`listRelatives -p $Dyna[$i]`;\nparent -w $Dyna[$i];\n$dynaParent[$i] = $prt[0];\n}\n\n//int $j=0;\n\nfor ($j=0;$j<(size($Dyna));$j++)\n{\n\n//create Joints\n$fkJnts = `dupPrifix $Dyna[$j] FK`;\n$ikJnts = `dupPrifix $Dyna[$j] IK`;\n$dynaJnts = `dupPrifix $Dyna[$j] Dyna`;\n$bfrJnts = `dupPrifix $Dyna[$j] Before`;\n\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n    //Fk setup \n    $fkcnt =`fkCtrls $fkJnts[0]`;\n      \n          for ($each in $fkcnt){\n              string $shp[]=`listRelatives -s $each`;\n              setAttr ($shp[0] + \".overrideEnabled\") 1;\n              setAttr ($shp[0] + \".overrideColor\") 6;}\n          \n    string $s1 = `substitute  \"fk_\"  $fkcnt[0] \"\"`;\n    string $s2 = `substitute  \"_ctl\" $s1 \"\"`;\n    \n    string $cnd1 = `createNode condition -n ($Dyna[$j] + \"IkCnd\")`;\n    string $cnd2 = `createNode condition -n ($Dyna[$j] + \"FkCnd\")`;\n\n    connectAttr -f ($sel[0] + \".Before\") ($cnd1 + \".firstTerm\");\n    setAttr ($cnd1 + \".secondTerm\") 2;\n    setAttr ($cnd1 + \".colorIfTrueR\") 1;\n    setAttr ($cnd1 + \".colorIfFalseR\") 0;\n\n    connectAttr -f ($sel[0] + \".Before\") ($cnd2 + \".firstTerm\");\n    setAttr ($cnd2 + \".secondTerm\") 1;\n    setAttr ($cnd2 + \".colorIfTrueR\") 1;\n    setAttr ($cnd2 + \".colorIfFalseR\") 0;\n\n    connectAttr -f ($cnd2 + \".outColor.outColorR\") ($s2 + \"_fkCtrls_grp.v\"); \n\n  \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n  \n\n//IK setup    \n\nstring $child[] =`listRelatives -ad -c $ikJnts[0]`;\nstring $ikLbl[] = {};\nint $no= 0;\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            int $types =`getAttr ($each + \".type\")`;\n            int $drawlb =`getAttr ($each + \".drawLabel\")`;\n            \n                    if ($types == 15 && $drawlb == 1)\n                    {      \n                        string $s1 = `substitute \"IK_\" $each \"\"`;  \n                        setAttr ($s1 + \".drawLabel\") 0;               \n                        $ikLbl[$no]=$each;\n                        $no+= 1;\n                    }\n        }\n        \n    \n    }\n\n    //revers array \n    string $ikLblJnt[]= {};\n    int $no = 1;\n    $ikLblJnt[0] =$ikJnts[0];\n\n        for ($i=((size($ikLbl))-1);$i>=0;$i--)\n        {\n        $ikLblJnt[$no] =$ikLbl[$i];\n        $no += 1;\n        }\n    int $sizeIkjnt = size ($ikJnts); \n        \n        if ((`size($ikLblJnt)`) <= 1)\n        {\n           \n               $ikLblJnt[0] =$ikJnts[0];\n               \n               //center of joint \n               int $center = ($sizeIkjnt * 0.5);\n               $ikLblJnt[1] =$ikJnts[$center];\n               \n               \n               $ikLblJnt[2] =$ikJnts[($sizeIkjnt - 1)]; \n               \n        }\n\n\n\n    //create IK curve\n    float $pos[] =`xform -q -ws -rp $ikLblJnt[0]`;\n    string $crv =`curve  -d 2 -p $pos[0] $pos[1] $pos[2] -n ($Dyna[$j] + \"_IK_Curve\")`;\n     \n              for ($i=1;$i<(size($ikLblJnt));$i++)\n              {\n                 float $pos[] =`xform -q -ws -rp $ikLblJnt[$i]`;\n                 curve  -a -d 2 -p $pos[0] $pos[1] $pos[2] $crv;\n              }\n              \n\n    //Create Controllers\n    string $parentGrp =`group -em -n ($Dyna[$j] + \"_IkCtlrs_grp\")`; \n    string $clstrList[] = {};\n              \n              for ($i=0;$i<(size($ikLblJnt));$i++)\n              {\n                  string $Box =`curve \n                                    -d 1 -p -0.5 0.5 -0.5 \n                                    -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 \n                                    -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 \n                                    -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 \n                                    -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 \n                                    -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 \n                                    -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 \n                                    -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 \n                                    -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 \n                                    -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 \n                                    -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 \n                                    -k 12 -k 13 -k 14 -k 15 -k 16\n                                    -n ($Dyna[$j] + \"_IK_\" + $i + \"_ctl\")`;\n                                    \n                \n                string $grp =`group -em -n ($Box + \"_grp\")`; \n            \n                parent $Box $grp;\n                                    \n                string $clst[] =`cluster  -n ($Dyna[$j] + \"_IK_Cluster\" + $i)  ($Dyna[$j] + \"_IK_Curve.cv[\" + $i + \"]\")`;\n                \n                float $pos[] =`xform -q -ws -rp $clst[1]`;\n                float $rot[] =`xform -q -ws -ro $clst[1]`;\n                \n                xform -ws -t  $pos[0] $pos[1] $pos[2] $grp;\n                xform -ws -ro $rot[0] $rot[1] $rot[2] $grp;\n\n\n                parentConstraint $Box $clst[1];\n                LNH $Box 0 0 0 1 1 1 1 1 1 1;\n                parent $grp $parentGrp;\n                \n                $ikcnt[$i] = $Box;\n                $clstrList[$i] = $clst[0];\n              }\n              \n              connectAttr -f ($cnd1 + \".outColor.outColorR\") ($parentGrp + \".v\"); \n              string $ikGrp =`group -em -n ($Dyna[$j] + \"_IkExtra_grp\")`; \n\n\n                     \n        int $sz = size($ikLblJnt);\n        string $ikHd[]=` ikHandle \n        -sol ikSplineSolver \n        -ccv false \n        -pcv false \n        -sj $ikLblJnt[0] \n        -ee $ikLblJnt[($sz - 1)] \n        -c $crv\n        -n ($Dyna[$j] + \"_BefoerIK_\" + $i)`;\n \n            for ($each in $clstrList)\n                parent ($each + \"Handle\") $ikGrp;\n            \n            parent  $crv $ikGrp;\n            parent  $ikHd[0] $ikGrp;\n \n           for ($each in $ikcnt){\n              string $shp[]=`listRelatives -s $each`;\n              setAttr ($shp[0] + \".overrideEnabled\") 1;\n              setAttr ($shp[0] + \".overrideColor\") 17;}\n \n //Make Stretch\n          stretchSpine $ikJnts $ikHd[0] $crv $sel[0] $ikcnt[0]; \n\n \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n       \n    //before setup\n    \n       string $cnd3 = `createNode condition -n ($Dyna[$j] + \"_cnstCnd\")`;\n    setAttr ($cnd3 + \".secondTerm\") 2;\n    setAttr ($cnd3 + \".operation\") 0;\n    setAttr ($cnd3 + \".colorIfTrueR\") 0;\n    setAttr ($cnd3 + \".colorIfFalseR\") 1;\n    \n    connectAttr -f ($sel[0] + \".Before\") ($cnd3 + \".firstTerm\") ;\n    \n        for ($i=0;$i<(size($bfrJnts));$i++)\n        {\n            \n            string $cnst[] =`parentConstraint $fkJnts[$i] $ikJnts[$i] $bfrJnts[$i] `;\n\n            connectAttr -f ($cnd1 + \".outColor.outColorR\") ($cnst[0] + \".\" + $ikJnts[$i] + \"W1\");\n            connectAttr -f ($cnd3 + \".outColor.outColorR\") ($cnst[0] + \".\" + $fkJnts[$i] + \"W0\");\n\n       }\n \n \n \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\n    //after setup\n    $dynacnt=`aftCtrls $Dyna[$j]`;\n    string $aftgrp =`group -em -n (\"after_\" + $Dyna[$j] + \"_ctl_grp\")`; \n    connectAttr ($sel[0] + \".After\") ($aftgrp + \".v\");\n\n        for ($each in $dynacnt)\n        {\n            \n            string $s1 = `substitute  \"aft_\" $each \"\"`;\n            string $s2 = `substitute  \"_ctl\" $s1 \"\"`;\n\n            parent (\"aftparent_\" + $s2 + \"_grp\")  $aftgrp;\n        }\n        \n             for ($each in $dynacnt){\n              string $shp[]=`listRelatives -s $each`;\n              setAttr ($shp[0] + \".overrideEnabled\") 1;\n              setAttr ($shp[0] + \".overrideColor\") 13;}\n       \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\n    //Dynamic setup\n    //List all chind joints\n    string $child[] =`listRelatives -ad -c $dynaJnts[0]`;\n    $child[((size($child)))] = $dynaJnts[0];\n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n\n\n    //create base curve\n    float $pos[] =`xform -q -ws -rp $list[0]`;\n    string $crv =`curve  -d 3 -p $pos[0] $pos[1] $pos[2] -n ($Dyna[$j] + \"_Base_Curve\")`;\n     \n              for ($i=1;$i<(size($list));$i++)\n              {\n                 float $pos[] =`xform -q -ws -rp $list[$i]`;\n                 curve  -a -d 3 -p $pos[0] $pos[1] $pos[2] $crv;\n              }\n              \n     //Make base curve Dynamic\n     select -cl  ;\n     select  $crv ;\n     //makeCurvesDynamicHairs 1 0 1;\n     makeCurvesDynamic 2 { \"1\", \"0\", \"1\", \"1\", \"0\"};\n     select -cl  ;\n     \n     \n     \n     //Find connected Hair System\n     string $shape[] =`listRelatives -ad -s $crv`;\n     string $folicle[] =`listConnections   $shape[0]`;\n     string $folicleShp[] =`listRelatives -ad -s $folicle[1]`;\n     string $hairSysShp[] =`listConnections -sh 1 $folicleShp[0]`;\n     string $hairSys[] =`listRelatives -ad -p $hairSysShp[2]`;\n     string $dynaCrv[] =`listRelatives -ad -p $hairSysShp[4]`;\n     setAttr ($hairSysShp[2] + \".active\") 0;\n\n\n     $nucl =`listConnections ($hairSysShp[2] + \".startState\")`;\n\n\n\n     string $hairSysGrp =`group -em -n ($Dyna[$j] + \"_HairSystem_grp\")`; \n     \n    parent $hairSys[0] $folicle[1] $crv $dynaCrv[0] $hairSysGrp;\n    rename $dynaCrv[0] ($Dyna[$j] + \"_Dynamic_crv\");\n    \n    delete ($hairSys[0] + \"Follicles\");\n    delete ($hairSys[0] + \"OutputCurves\");\n    \n    setAttr ($folicleShp[0] + \".pointLock\") 1;\n\n     \n    int $size =size( $dynaJnts );\n    \n    string $ikHlds[]=` ikHandle \n        -sol ikSplineSolver \n        -ccv false \n        -pcv false \n        -sj $dynaJnts[0] \n        -ee $dynaJnts[($size - 1)] \n        -c ($Dyna[$j] + \"_Dynamic_crv\")`;\n\n         \n            parent  $crv $ikGrp;\n            parent  $ikHlds[0] $ikGrp;\n\n    //Make stretchy\n\n     stretchSpine $dynaJnts $ikHlds[0] $crv $sel[0] $ikcnt[0];\n\n    for ($i=0;$i<($size - 1);$i++)\n    {\n    \n    string $s1 = `substitute  \"Dyna_\" $list[$i] \"\"`;\n    if(`objExists (\"FK_\" + $s1 + \"_ctl\")`)\n    {\n    connectAttr -f (\"FK_\" + $s1 + \"_ctl.rotateX\") (\"aftdyna_\" + $s1 + \"_grp.rotateX\");\n    }\n    //connectAttr -f ($dynaJnts[$i] + \".rotateX\") (\"aftdyna_\" + $s1 + \"_grp.rotateX\");\n    connectAttr -f ($dynaJnts[$i] + \".rotateY\") (\"aftdyna_\" + $s1 + \"_grp.rotateY\");\n    connectAttr -f ($dynaJnts[$i] + \".rotateZ\") (\"aftdyna_\" + $s1 + \"_grp.rotateZ\");\n    connectAttr -f ($dynaJnts[$i] + \".scaleX\") (\"aftdyna_\" + $s1 + \"_grp.scaleX\");\n   \n    }\n    \n    connectAttr -f ($dynaJnts[0] + \".translateX\") (\"aftdyna_\" + $Dyna[$j] + \"_grp.translateX\");\n    connectAttr -f ($dynaJnts[0] + \".translateY\") (\"aftdyna_\" + $Dyna[$j] + \"_grp.translateY\");\n    connectAttr -f ($dynaJnts[0] + \".translateZ\") (\"aftdyna_\" + $Dyna[$j] + \"_grp.translateZ\");\n \n\n    string $hrShp[] =`listRelatives -s $hairSys[0]`;\n    connectAttr -f ($sel[0] + \".Stiffness\") ($hrShp[0] + \".stiffness\");\n    connectAttr -f ($sel[0] + \".Damp\") ($hrShp[0] + \".damp\");\n    connectAttr -f ($sel[0] + \".Friction\") ($hrShp[0] + \".friction\");\n    connectAttr -f ($sel[0] + \".Gravity\") ($hrShp[0] + \".gravity\");\n    connectAttr -f ($sel[0] + \".Attract\") ($hrShp[0] + \".startCurveAttract\");\n    connectAttr -f ($sel[0] + \".Flow\") ($hrShp[0] + \".attractionScale[1].attractionScale_FloatValue\");\n    connectAttr -f ($sel[0] + \".Iterations\") ($hrShp[0] + \".iterations\");\n    \n \n    setDrivenKeyframe -cd ($sel[0] + \".Dynamic\") -dv 0 -v 1 ($hrShp[0] + \".simulationMethod\");\n    setDrivenKeyframe -cd ($sel[0] + \".Dynamic\") -dv 1 -v 3 ($hrShp[0] + \".simulationMethod\");\n    setAttr -l 1 ($hrShp[0] + \".simulationMethod\");\n    \n    customPrifix $hairSys[0] $Dyna[$j];\n    customPrifix $folicle[1] $Dyna[$j];\n    customPrifix $ikHlds[0] $Dyna[$j];\n    customPrifix $ikHlds[1] $Dyna[$j];    \n        \n\nstring $sknClst[] =`skinCluster -dr 4.0 -tsb  $bfrJnts[0] ($Dyna[$j] + \"_Base_Curve\")`;\n\n    for ($s=1;$s<(size($bfrJnts));$s++)\n    {      \n    skinCluster -e -ai $bfrJnts[$s] $sknClst[0];        \n    }\n       \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++// \nstring $ctrlGrp =`group -em -n ($Dyna[$j] + \"_Controllers_grp\")`; \nstring $stupGrp =`group -em -n ($Dyna[$j] + \"_Setup_grp\")`; \nstring $sclGrp =`group -em -n ($Dyna[$j] + \"_scale_grp\")`; \n\n\nfloat $dynaPos[] =`xform -q -ws -t $dynaJnts[0]`;\nfloat $dynaRot[] =`xform -q -ws -ro $dynaJnts[0]`;\n\nstring $RGJnt =`joint -p $dynaPos[0] $dynaPos[1] $dynaPos[2] -n (\"Extra\" + $dynaJnts[0])`;\nxform -ws -ro $dynaRot[0] $dynaRot[1] $dynaRot[2] $RGJnt;\nmakeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $RGJnt;\nparent $dynaJnts[0] $RGJnt;\nparentConstraint -mo $dynaParent[$j] $RGJnt;\n\nparent (\"after_\" + $Dyna[$j] + \"_ctl_grp\") ($Dyna[$j] + \"_IkCtlrs_grp\") (\"FK_\" + $Dyna[$j] + \"_fkCtrls_grp\") $ctrlGrp;\nparentConstraint -mo $dynaParent[$j] $ctrlGrp;\n\nparent  $hairSysGrp $ikGrp $stupGrp;\nparent $fkJnts[0] $ikJnts[0] $bfrJnts[0]  $sclGrp;\n\nconnectAttr  -f ($sel[0] + \".Setup\") ($stupGrp + \".v\");\n\nif (!`objExists \"HairBakedSet\"`){\n    string $set =`sets -em -name \"HairBakedSet\"`;\n            for ($each in $dynacnt){\n            \n            string $prnt[]= `listRelatives -p $each`;\n            string $grndprnt[]= `listRelatives -p $prnt[0]`;\n            sets -e  -add $set $grndprnt;\n            \n            }\n        }\n    else{\n            for ($each in $dynacnt){\n            \n                string $prnt[]= `listRelatives -p $each`;\n                string $grndprnt[]= `listRelatives -p $prnt[0]`;\n                sets -e  -in \"HairBakedSet\" $grndprnt;\n                \n            }\n    }\n\n\n\n\n\n// For scale\nparent $sclGrp $stupGrp;\nscaleConstraint -mo $sel[0] $ctrlGrp;\nscaleConstraint -mo $sel[0] $sclGrp;\n}\n\nstring $mnStupGrp;    \nstring $mnCtrlGrp;\n\n\nif (!`objExists \"DynaControllers_grp\"`){\n    $mnCtrlGrp =`group -em -n \"DynaControllers_grp\"`; }\n\nif (!`objExists \"DynaSetup_grp\"`){\n    $mnStupGrp =`group -em -n \"DynaSetup_grp\"`; }\n\nfor ($i=0;$i<(size($Dyna));$i++)\n{\nparent $Dyna[$i] $dynaParent[$i];\nparent ($Dyna[$i] + \"_Controllers_grp\") DynaControllers_grp;\nparent ($Dyna[$i] + \"_Setup_grp\") DynaSetup_grp;\n \n\nselect -cl;\nprint \"// Result 1\";\n\n\n//For Scale\n\nstring $allJnt[] =`ls -dag -type \"joint\" $sel[0]`;\n\nfor ($j=0;$j<(size($allJnt));$j++)\n{\n\nstring $cons =`connectionInfo -sfd ($allJnt[$j] + \".inverseScale\")`;\n\n    if($cons != \"\")\n    {\n    disconnectAttr $cons ($allJnt[$j] + \".inverseScale\");\n    }\n    \n}\n\n\n}\n}\n}\nint $cb=`checkBox -q -v Ncb`;\nif ($cb!=1)\n{\n    delete $nucl;\n}\n\n};\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n//\n//                       Extra procedures\n//\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] dupPrifix (string $joint, string $prefix )\n{  \n    //get child joints\n    string $child[] =`listRelatives -ad -c $joint`;\n    $child[((size($child)))] = $joint;\n    string $newjnt[] = {};\n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n    \n \n    //duplicate joint with prefix\n       string $dup[] =` duplicate  -rc $joint`;\n\n       int $count = 0;\n            for ($i=0;$i<(size($dup));$i++)\n            {\n                rename $dup[$i] ($prefix + \"_\" + $list[$i]);\n                $newjnt[$count] = ($prefix + \"_\" + $list[$i]);\n                $count += 1;\n                \n            }  \n            \n     return $newjnt;\n};\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] customPrifix (string $joint,string $prefix )\n{  \n    //get child joints\n    string $child[] =`listRelatives -ad -c $joint`;\n    $child[((size($child)))] = $joint;\n    string $newjnt[] = {};\n\n        int $count = 0;\n            for ($i=0;$i<(size($child));$i++)\n            {\n                rename $child[$i] ($prefix + \"_\" + $child[$i]);\n                $newjnt[$count] = ($prefix + \"_\" + $child[$i]);\n                $count += 1;\n                \n            }  \n            \n     return $newjnt;\n};\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] fkCtrls (string $joint)\n{\nstring $ctrls[] = {};\nint $count = 0;\nstring $child[] =`listRelatives -ad -c $joint`;\n$child[((size($child)))] = $joint;\nstring $newjnt[] = {};\n    \n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n    \n        string $fkGrp =`group -em -n ($joint + \"_fkCtrls_grp\")`; \n\n        //constriant jont with new controler\n        for ($i=0;$i<((size($list)-1 ));$i++)\n        {\n           string $fkctrl[]= `circle \n               -c 0 0 0 -nr 1 0 0 \n               -sw 360 -r 1 -d 3 \n               -ut 0 -tol 0.01 \n               -s 8 -ch 0 \n               -n ($list[$i] + \"_ctl\")`;\n           string $grp1 =`group -em -n (\"fkExtra_\" + $list[$i] + \"_grp\")`; \n           string $grp2 =`group -em -n (\"fkparent_\" + $list[$i] + \"_grp\")`; \n        \n           parent $fkctrl[0] $grp1;\n           parent $grp1 $grp2;\n           \n           float $pos[] =`xform -q -ws -rp $list[$i]`;\n           float $rot[] =`xform -q -ws -ro $list[$i]`;\n           \n           xform -ws -t $pos[0] $pos[1] $pos[2] $grp2;\n           xform -ws -ro $rot[0] $rot[1] $rot[2] $grp2;\n        \n           parentConstraint -mo $fkctrl[0] $list[$i];\n           \n           LNH $fkctrl[0] 0 0 0 0 0 0 1 1 1 1;\n           LNH $grp1   0 0 0 0 0 0 1 1 1 1;\n           \n           parent $grp2 $fkGrp;\n           \n           $ctrls[$count] = $fkctrl[0];\n           $count += 1;\n        }\n\n\n        // make fk hierachy\n        for ($i=1;$i<((size($ctrls)));$i++)\n        {            \n            parentConstraint -mo $ctrls[($i - 1)] (\"fkparent_\" + $list[$i] + \"_grp\") ;\n        }\n        \n  return $ctrls;\n\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] aftCtrls (string $joint)\n{ \n\nstring $ctrls[] = {};\nint $count = 0;\nstring $child[] =`listRelatives -ad -c $joint`;\n$child[((size($child)))] = $joint;\nstring $newjnt[] = {};\n    \n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n    \n    \n        //constriant jont with new controler\n        for ($i=0;$i<((size($list)-1 ));$i++)\n        {\n\n           string $aftctrl[]= `circle \n               -c 0 0 0 -nr 1 0 0 \n               -sw 360 -r 1 -d 1 \n               -ut 0 -tol 0.01 \n               -s 4 -ch 0 \n               -n (\"aft_\" + $list[$i] + \"_ctl\")`;\n               \n           xform -ws -ro -45 0 0 $aftctrl[0];\n           makeIdentity -apply 1 -r 1 $aftctrl[0];\n\n           string $grp1 =`group -em -n (\"aftExtra_\" + $list[$i] + \"_grp\")`; \n           string $grp2 =`group -em -n (\"aftparent_\" + $list[$i] + \"_grp\")`; \n           string $grp3 =`group -em -n (\"aftdyna_\" + $list[$i] + \"_grp\")`; \n\n\n           if($i == 0)\n           {\n            addAttr -ln \"transCon\"  -at bool  $grp3;\n            setAttr -e -keyable false -lock true ($grp3 + \".transCon\");\n           }\n           \n        \n           parent $aftctrl[0] $grp1;\n           parent $grp1 $grp3;\n           parent $grp3 $grp2;\n           \n           float $pos[] =`xform -q -ws -rp $list[$i]`;\n           float $rot[] =`xform -q -ws -ro $list[$i]`;\n           \n           xform -ws -t $pos[0] $pos[1] $pos[2] $grp2;\n           xform -ws -ro $rot[0] $rot[1] $rot[2] $grp2;\n        \n           parentConstraint -mo $aftctrl[0] $list[$i];\n           \n           \n          LNH $aftctrl[0] 0 0 0 0 0 0 1 1 1 1;\n          LNH $grp1 0 0 0 0 0 0 1 1 1 1;\n\n            \n           $ctrls[$count] = $aftctrl[0];\n           $count += 1;\n        }\n\n\n        // make fk hierachy\n        for ($i=1;$i<(size($ctrls));$i++)\n        {\n            parentConstraint -mo (\"aft_\" + $list[($i-1)] + \"_ctl\") (\"aftparent_\" + $list[$i] + \"_grp\");\n            \n        }\n        \n   \n    \n  return $ctrls;\n\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc stretchSpine (string $jnt[],string $ikHandle, string $crv,string $glCrv, string $attrCrv )\n{\nint $attExt = 1;\nstring $Attr[] = `listAttr -k $attrCrv`;\n    for ($arbt in $Attr)\n    {\n        if ($arbt == \"Stretchy\" || $arbt == \"stretchy\" )\n        {\n        $attExt = 0;\n        }\n        \n    }\n    \n    if ($attExt == 1)\n    {\n        addAttr -ln \"Stretchy\"  -at \"enum\" -en \"Off:On:\" $attrCrv ;\n        setAttr -e-keyable true ($attrCrv  + \".Stretchy\");\n    }\n\n\n\nstring $cvrInfo =`arclen -ch 1 $crv`;\n\nstring $cnd =`createNode condition -n ($jnt[0] + \"_Schy\")`;\n\nconnectAttr -f ($attrCrv + \".Stretchy\") ($cnd + \".firstTerm\");\nsetAttr ($cnd + \".secondTerm\") 1;\nsetAttr ($cnd + \".operation\") 0;\nconnectAttr -f ($cvrInfo + \".arcLength\") ($cnd + \".colorIfTrueR\");\nfloat $arc = `getAttr ($cvrInfo + \".arcLength\")`;\n\n\nstring $glMd =`createNode multiplyDivide -n ($jnt[0] + \"_glMD\")`;\n\n    if(!`objExists \"SRT\"`)\n    {\n        connectAttr -f ($glCrv  + \".scaleX\") ($glMd + \".input1X\");\n    }\n    else\n    {\n        connectAttr -f (\"SRT.scaleX\") ($glMd + \".input1X\");\n    }\nsetAttr ($glMd + \".operation\") 1;\nsetAttr ($glMd + \".input2X\") $arc;\nconnectAttr -f ($glMd  + \".outputX\") ($cnd + \".colorIfFalseR\");\n\nstring $md =`createNode multiplyDivide -n ($jnt[0] + \"_MD\")`;\nsetAttr ($md+ \".operation\") 2;\n\nconnectAttr -f ($cnd + \".outColorR\") ($md + \".input1X\");\nconnectAttr -f ($glMd + \".outputX\") ($md + \".input2X\");\n\n\n        for ($each in $jnt)\n            connectAttr -f ($md + \".outputX\") ($each  + \".scaleX\");\n\n\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc int attrExt (string $obj, string $attr)\n{\nstring $allAttr[] =`listAttr -ud $obj`;\nint $go = 0;\nfor ($each in $allAttr)\n\nif ($each == $attr)\n    {\n        $go = 1;\n    }\n    \n    \n    return $go;\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc int  LNH (string $obj,int $tx,int $ty,int $tz,int $rx,int $ry,int $rz,int $sx,int $sy,int $sz,int $v)\n{\nint $attrVal[];\n$attrVal[0] =$tx;$attrVal[1] =$ty;$attrVal[2] =$tz;\n$attrVal[3] =$rx;$attrVal[4] =$ry;$attrVal[5] =$rz;\n$attrVal[6] =$sx;$attrVal[7] =$sy;$attrVal[8] =$sz;\n$attrVal[9] =$v;\nint $keyVal;\nstring $attrs[] ={\"tx\",\"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"};\n\n    for ($i=0;$i<(size($attrs));$i++)\n    {\n        if ($attrVal[$i] == 0)\n            $keyVal = 1;\n            \n        if ($attrVal[$i] == 1)\n            $keyVal = 0;\n            \n            \n    setAttr -lock $attrVal[$i] -keyable $keyVal ($obj +  \".\" + $attrs[$i]);\n    }\n\n    return 1;\n}\n\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc rmDynaSetup ()\n{\nstring $sel[] =`ls -sl`; \nif ((size($sel)) == 0){\n     warning \"select the parent joint.....\";}\nelse{\n//find all dyan lables\nstring $child[] =`listRelatives -ad -c $sel[0]`;\nstring $Dyna[] = {};\nstring $ikLbl[] = {};\nint $no= 0;\n\n    //List Dyna joints\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            string $lable =`getAttr ($each + \".otherType\")`;\n            int $types =`getAttr ($each + \".type\")`;\n            \n                    if ((startsWith ($lable, \"dyna\")) == 1 && $types == 18)\n                    {\n                        setAttr ($each + \".drawLabel\") 0;\n                        $Dyna[$no]=$each;\n                        $no+= 1;\n                    }\n                    \n\n        }\n    }\n$no= 0;\n\n    //List PropA joints\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            int $types =`getAttr ($each + \".type\")`;\n            \n                    if ($types == 15)\n                    {      \n                        string $s1 = `substitute \"IK_\" $each \"\"`;  \n                        setAttr ($s1 + \".drawLabel\") 0;               \n                        $ikLbl[$no]=$each;\n                        $no+= 1;\n                    }\n        }\n        \n    \n    }\n\n\n\nif ((size($Dyna)) == 0){\n    \n         string $lable =`getAttr ($sel[0] + \".otherType\")`;\n         int $types =`getAttr ($sel[0] + \".type\")`;\n         \n                    if ((startsWith ($lable, \"dyna\")) == 1 && $types == 18){\n                        $Dyna[0]=$sel[0]; }\n                    }\n\nif ((size($Dyna)) == 0){\n    warning \"There is no Dyna.....\";}\nelse{\n//Delete Setup\nfor ($each in $Dyna)\n{    \n    setAttr ($each + \".drawLabel\") 1;\n    delete -cn $each;\n    \n    if (`objExists ($each + \"_Controllers_grp\")`)\n        delete ($each + \"_Controllers_grp\");\n\n    if (`objExists ($each + \"_Setup_grp\")`)\n        delete ($each + \"_Setup_grp\");\n \n}\n    \n//Restore lable\nfor ($e in  $ikLbl)\n    setAttr ($e + \".drawLabel\") 1;\n    \nstring $child[] =`listRelatives -c \"DynaControllers_grp\"`;\nif ((size($child)) == 0)\n    delete \"DynaControllers_grp\";\n    \n    \nstring $child[] =`listRelatives -c \"DynaSetup_grp\"`;\nif ((size($child)) == 0)\n    delete \"DynaSetup_grp\";\n    \n    }        \n    }\n};\nglobal proc CN()\n{\n    string $ctl[]=`ls -sl`;\n    addAttr -ln \"StartFrame\" -k 1 -at \"long\" -dv 1 $ctl[0];\n    connectAttr -f ($ctl[0] + \".StartFrame\") \"nucleus1.startFrame\";\n} \n " 
        -optionBox 0
        -enable 1
        -data 0
        -radialPosition "N" 
        -allowOptionBoxes 1
        -postMenuCommandOnce 0
        -enableCommandRepeat 1
        -echoCommand 0
        -italicized 0
        -boldFont 0
        -sourceType "mel" 
        -longDivider 1
        menuEditorMenuItem1;

setParent -m ..;

