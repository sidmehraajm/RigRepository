global proc string[] zooAttrManUtilsArrayReorder( string $array[], int $entries[], string $dir ) {
	string $newArray[] = $array;
	int $gaps[];
	int $be;	if( !`size $entries` ) return $array;
	$entries = `sort $entries`;
	$gaps[0] = $entries[0];
	for( $n = 0; $n < `size $entries`-1; $n++ ) if( $entries[$n]+1 != $entries[( $n+1 )] ) {
		$gaps[( `size $gaps` )] = $entries[$n];
		$gaps[( `size $gaps` )] = $entries[( $n+1 )];
		}
	$gaps[( `size $gaps` )] = $entries[( `size $entries`-1 )];	for( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == "up" ) $newArray = `zooAttrManUtilsArrayShiftUp $newArray $gaps[$n] $gaps[( $n+1 )]`;
	for( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == "down" ) $newArray = `zooAttrManUtilsArrayShiftDown $newArray $gaps[$n] $gaps[( $n+1 )]`;	return $newArray;
	}
global proc string[] zooAttrManUtilsArrayShiftUp( string $array[], int $startIndex, int $endIndex ) {
	string $newArray[];
	int $displaced = $startIndex-1;
	int $num = ( $endIndex-$startIndex )+1;	if( $startIndex == 0 ) return $array;	for( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];	int $i = $startIndex-1;
	for( $n = 0; $n < $num; $n++, $i++) $newArray[$i] = $array[( $i+1 )];	$newArray[$endIndex] = $array[$displaced];
	return $newArray;
	}
global proc string[] zooAttrManUtilsArrayShiftDown( string $array[], int $startIndex, int $endIndex ) {
	string $newArray[];
	int $displaced = $endIndex+1;
	int $num = ( $endIndex-$startIndex )+1;	if( $endIndex >= `size $array`-1 ) return $array;
	for( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];	int $i = $startIndex+$num;
	for( $n = 0; $n < $num; $i--, $n++ ) $newArray[$i] = $array[( $i-1 )];	$newArray[$startIndex] = $array[$displaced];
	return $newArray;
	}
global proc string zooAttrManUtilsReturnElement( int $entry, string $array[] ) {
	if( $entry<0 ) $entry = `size $array` + $entry;
	return $array[$entry];
	}
global proc zooDoReorder( string $dir ) {
	string $validTypes[] = { "bool", "enum", "long", "double" };
	string $obj = `text -q -l dwAttrManObjTXT`;
	string $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;
	if( !`size $selAttrs` ) return;	string $attrs[] = `listAttr -k -ud $obj`;
	string $validAttrs[];
	int $toReorder[];
	for( $n=0; $n<`size $attrs`; $n++ ) {
		string $type = `addAttr -q -at ( $obj +"."+ $attrs[$n] )`;
		int $isValid = 0;
		for( $a in $validTypes ) if( $type == $a ) { $isValid = 1; break; }
		if( $isValid ) $validAttrs[( `size $validAttrs` )] = $attrs[$n];
		}
	for( $n=0; $n<`size $validAttrs`; $n++ ) for( $a in $selAttrs ){
		if( $a == $validAttrs[$n] ) $toReorder[( `size $toReorder` )] = $n;
		}	string $newOrder[] = `zooAttrManUtilsArrayReorder $validAttrs $toReorder $dir`;
	zooAttrManReorder $obj $newOrder;
	dwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;
	for( $a in $selAttrs ) textScrollList -e -si $a dwAttrManTSL;
	}
global proc zooAttrManReorder ( string $obj, string $newAttribOrder[] ) {
	string $selObjs[] = `ls -sl`;
	for ( $attrib in $newAttribOrder ) {
		int $isAttrLocked = `getAttr -l ( $obj + "." + $attrib )`;
		if( $isAttrLocked ) setAttr -l 0 ( $obj + "." + $attrib );
		string $tempAttrib = `renameAttr ( $obj + "." + $attrib ) "temp"`;
		renameAttr ( $obj + "." + $tempAttrib ) $attrib;
		if( $isAttrLocked ) setAttr -l 1 ( $obj + "." + $attrib );
		}	select -r $selObjs;
	select $selObjs;
	}
global proc zooAttrManDoRename() {
	string $obj = `text -q -l dwAttrManObjTXT`;
	string $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;
	string $oldName = $selAttrs[0];
	string $newName = `textField -q -tx dwNewAttrName`;	zooAttrManRenameAttrInPlace $obj $oldName $newName;	dwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;
	textScrollList -e -si $newName dwAttrManTSL;
	}
global proc zooAttrManRenameAttrInPlace( string $obj, string $oldAttr, string $newAttr ) {
	string $attrs[] = `listAttr -k -ud $obj`;	for( $n=0; $n<`size $attrs`; $n++ ) if( $attrs[$n] == $oldAttr ) {
		int $isLocked = `getAttr -l ( $obj + "." + $attrs[$n] )`;
		setAttr -l 0 ( $obj + "." + $attrs[$n] );
		renameAttr ( $obj + "." + $attrs[$n] ) $newAttr;
		$attrs[$n] = $newAttr;
		setAttr -l $isLocked ( $obj + "." + $attrs[$n] );
		}	zooAttrManReorder $obj $attrs;
	}global proc dwAttrMan_LoadAttributes (string $obj, int $keyableCheck)
{
if (! `objExists $obj`)
	{
	print "Object invalid or unspecified. Try again.\n";
	return;
	}
string $attrs[];
if ($keyableCheck)
	$attrs = `listAttr -ud -k $obj`;
else
	$attrs = `listAttr -ud $obj`;string $expandedAttrs[];
for( $a in $attrs ) {
	string $children[] = `attributeQuery -listChildren -n $obj $a`;
	if( `size $children` ) for( $b in $children ) $expandedAttrs[( `size $expandedAttrs` )] = $b;
	else $expandedAttrs[( `size $expandedAttrs` )] = $a;
	}
text -e -l $obj dwAttrManObjTXT;
textScrollList -e -ra dwAttrManTSL;
for ($a in $attrs)
	{	string $parent = `addAttr -q -parent ($obj + "." + $a)`;	if ($parent == $a)
		textScrollList -e -a $a dwAttrManTSL;
	}
}
global proc int dwAttrMan_TransferConnections(string $sourceObj, 		//Source obj.
							string $attr, 		//Source attribute.
							string $targetObj, 	//Target obj.
							int $isMulti)		//Is the attribute a multi attribute?
{
string $sourceConnections[] = `listConnections -source 1 -destination 0 -plugs 1 ($sourceObj + "." + $attr)`;
string $destinationConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + "." + $attr)`;
string $messageConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + ".message")`;
string $messageBuffer[];
string $destinationBuffer[];
int $isLockedByMessage = 0;
int $n = 0;
if (`size $messageConnections`)
	{
	tokenize $messageConnections[0] "." $messageBuffer;
	tokenize $destinationConnections[0] "." $destinationBuffer;
	for ($n = 0; $n < `size $destinationConnections`; $n++)
		{
		if ($messageBuffer[0] == $destinationBuffer[$n])
			{
			warning ($sourceObj + "." + $attr + " is locked to " + $destinationBuffer[$n] + ". Cannot transfer connections for this attribute.");
			$isLockedByMessage = 1;
			}
		}
	}
if ($isLockedByMessage)
	return $isLockedByMessage;
int $i = 0;
for ($s in $sourceConnections)
	{
	if ($isMulti)
		{			disconnectAttr $s ($sourceObj + "." + $attr + "[" + $i + "]");
			connectAttr -f $s ($targetObj + "." + $attr + "[" + $i + "]");		}
	else
		{
		disconnectAttr $s ($sourceObj + "." + $attr);
		connectAttr -f $s ($targetObj + "." + $attr);
		}
	$i++;
	}
$i = 0;
for ($d in $destinationConnections)
	{
	if ($isMulti)
		{			disconnectAttr ($sourceObj + "." + $attr + "[" + $i + "]") $d;
			connectAttr -f ($targetObj + "." + $attr + "[" + $i + "]") $d;		}
	else
		{
		disconnectAttr ($sourceObj + "." + $attr) $d;
		connectAttr -f ($targetObj + "." + $attr) $d;
		}
	$i++;
	}return $isLockedByMessage;
}
global proc int dwAttrMan_IsCompoundType(string $sourceObj, string $attribute)
{
string $type = `addAttr -q -attributeType ($sourceObj + "." + $attribute)`;if (($type == "reflectance") || ($type == "spectrum") || ($type == "float2") || ($type == "float3")
		 || ($type == "double2") || ($type == "double3") || ($type == "long2") || ($type == "long3")
		 || ($type == "short2") || ($type == "short3") || ($type == "compound"))
	return 1;
else
	return 0;
}
global proc int dwAttrMan_IsDataType(string $object, string $attr)
{
string $type = `addAttr -q -attributeType ($object + "." + $attr)`;if ($type == "typed")
	return 1;
else
	return 0;
}
global proc dwAttrMan_TransferAttributes(string $sourceObj,			  //Source object
						string $attrs[], 	  //Attr list
						string $parent,		  //Parent attr (necessary for compound attrs)
						int $transferConnections, //Transfer connections?
						int $deleteOri ginals)	  //Delete original attrs?
{
if (! `objExists $sourceObj`)
	error "Source object specified incorrectly. Try again.";
if (! `size $attrs`)
	error "No attributes selected in list. Try again.";
string $sel[] = `ls -sl -o`;
if (! `size $sel`)
	error "Nothing selected. Select one object and try again.";
if (`size $sel` > 1)
	error "Select only one object and try again.";
if ($sel[0] == $sourceObj)
	error ("Selected object is the same as the source. Try again.");
for ($a in $attrs)
	{
	if (`attributeExists $a $sel[0]`)
		error ("Attribute \"" + $a + "\" conflicts with name of existing attribute on target " + $sel[0] + ". Try again.");
	}int $numberOfChildren;
for ($a in $attrs)
	{
	string $type = `addAttr -q -attributeType ($sourceObj + "." + $a)`;
	string $children[];
	int $isCompoundType = `dwAttrMan_IsCompoundType $sourceObj $a`;
	if ($isCompoundType)
		{
		$numberOfChildren = `addAttr -q -numberOfChildren ($sourceObj + "." + $a)`;
		$children = `listAttr ($sourceObj + "." + $a)`;
		$children = `stringArrayRemove {$a} $children`;
		}	int $keyable = `getAttr -keyable ($sourceObj + "." + $a)`;
	int $locked = `getAttr -lock ($sourceObj + "." + $a)`;	string $longName = `addAttr -q -longName ($sourceObj + "." + $a)`;
	string $shortName = `addAttr -q -shortName ($sourceObj + "." + $a)`;	int $hasMin; int $hasMax; float $minValue; float $maxValue; int $hasSoftMin;
	int $hasSoftMax; float $softMinValue; float $softMaxValue;
	if (($type != "typed") && ($type != "message") && ($type != "fltMatrix") && ($type != "matrix") && (! $isCompoundType))
		{
		$hasMin = `addAttr -q -hasMinValue ($sourceObj + "." + $a)`;
		$hasMax = `addAttr -q -hasMaxValue ($sourceObj + "." + $a)`;
		$minValue = `addAttr -q -minValue ($sourceObj + "." + $a)`;
		$maxValue = `addAttr -q -maxValue ($sourceObj + "." + $a)`;
		$hasSoftMin = `addAttr -q -hasSoftMinValue ($sourceObj + "." + $a)`;
		$hasSoftMax = `addAttr -q -hasSoftMaxValue ($sourceObj + "." + $a)`;
		$softMinValue = `addAttr -q -softMinValue ($sourceObj + "." + $a)`;
		$softMaxValue = `addAttr -q -softMaxValue ($sourceObj + "." + $a)`;
		}
	int $isString = 0;
	string $typedDataType[]; //For some reason querying "-dataType" returns an array (while "-attributeType" returns a string).
	if ($type == "typed")
		{
		$typedDataType = `addAttr -q -dataType ($sourceObj + "." + $a)`;
		if ($typedDataType[0] == "string")
			$isString = 1;
		}	int $isMulti = `attributeQuery -n $sourceObj -multi $a`;
	int $multiSize = `getAttr -size ($sourceObj + "." + $a)`;
	int $indexMatters = `addAttr -q -indexMatters ($sourceObj + "." + $a)`;	string $enumName;
	if ($type == "enum")
		$enumName = `addAttr -q -enumName ($sourceObj + "." + $a)`;	if (! $isMulti)
		{
		//Criteria for enum attributes.
		if ($type != "enum")
			{
			if (! $isString)
				{
				if (`size $parent`)
					{
					addAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];
					}
				else
					addAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];				}
			else
				{				if (`size $parent`)
					addAttr -parent $parent -dataType "string" -longName $longName -shortName $shortName $sel[0];
				else
					addAttr -dataType "string" -longName $longName -shortName $shortName $sel[0];
				}
			}
		else
			{
			if (`size $parent`)
				addAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType "enum" -enumName $enumName -longName $longName -shortName $shortName $sel[0];
			else
				addAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType "enum" -enumName $enumName -longName $longName -shortName $shortName $sel[0];
			}
		}
	else if ($isMulti)
		{
		if (`size $parent`)
			addAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];
		else
			addAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];
		}	if ($isCompoundType)
		{
		for ($c in $children)
			dwAttrMan_TransferAttributes($sourceObj,		//Source obj
							 {$c}, 			//child attribute to add.
							 $a, 			//Parent attribute (same as current attr).
							 $transferConnections,  //transfer connections?
							 0);			//Don´t delete attr (we´ll delete the parent attr later).
		}	if (($type != "typed") && ($type != "message") && ($type != "fltMatrix") && ($type != "matrix") && (! $isCompoundType))
		{
		if ($hasMin)
			addAttr -e -minValue $minValue ($sel[0] + "." + $a);
		if ($hasMax)
			addAttr -e -maxValue $maxValue ($sel[0] + "." + $a);
		if ($hasSoftMin)
			addAttr -e -softMinValue $softMinValue ($sel[0] + "." + $a);
		if ($hasSoftMax)
			addAttr -e -softMaxValue $softMaxValue ($sel[0] + "." + $a);
		}	if ($locked)
		setAttr -lock 1 ($sel[0] + "." + $a);
	int $isLockedByMessage = 0;
	if ($transferConnections)
		{		if ((`size $parent`) && (`attributeExists $parent $sel[0]`))
			{
			$children = `listAttr ($sel[0] + "." + $parent)`;
			$children = `stringArrayRemove {$parent} $children`;
			for ($c in $children)
				$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $c $sel[0] $isMulti`;
			}
		else if (! `size $parent`)
			$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $a $sel[0] $isMulti`;
		}	if ($isLockedByMessage)
		continue;	if ($deleteOriginals)
		{
		if ($locked)
			setAttr -lock 0 ($sourceObj + "." + $a);
		if (! `size $parent`)
			deleteAttr ($sourceObj + "." + $a);
		}
	}if (! `size $parent`)
	dwAttrMan_LoadAttributes $sourceObj `checkBox -q -v dwAttrManListKeyableCheck`;
}
global proc doHideConXnList() {
	int $hideState = `control -q -vis dwAttrManConXnForm`;
	string $buttonLabel = ( $hideState )? "<": ">";
	int $newPos = ( $hideState )? 100: 50;	button -e -width 12 -l $buttonLabel dwAttrManButtonCollapseConXn;
	control -e -vis (!$hideState) dwAttrManConXnForm;	formLayout -e
		-ap dwAttrManConXnForm left -3 $newPos
		dwAttrManFormMaster;
	}
global proc dwAttrMan_ShowConnections(int $kind)
{
textScrollList -e -ra dwAttrManConXnTSL;
string $obj = `text -q -l dwAttrManObjTXT`;
if (! `objExists $obj`)
	return;
string $attr[] = `textScrollList -q -si dwAttrManTSL`;
if (`size $attr` > 1)
	textScrollList -e -a "..." dwAttrManConXnTSL;
else if (`size $attr` == 1)
	{
	string $connections[];
	if ($kind == 1)
		$connections = `listConnections -s 1 -d 0 -p 1 ($obj + "." + $attr[0])`;
	else if ($kind == 2)
		$connections = `listConnections -s 0 -d 1 -p 1 ($obj + "." + $attr[0])`;	for ($c in $connections)
		{
		string $nodeBuffer[];
		tokenize $c "." $nodeBuffer;
		string $nodeType = `nodeType $nodeBuffer[0]`;
		textScrollList -e -a ($c + " (" + $nodeType + ")") dwAttrManConXnTSL;
		}
	}
}global proc dwAttrMan_DeleteAttributes(string $obj, string $attrs[])
{
if (! `size $attrs`)
	return;for ($a in $attrs)
	deleteAttr ($obj + "." + $a);dwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;
dwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;
}global proc dwAttrMan_SelectConnectionObject()
{
string $objAttr[] = `textScrollList -q -si dwAttrManConXnTSL`;
if (! `size $objAttr`)
	return;string $objBuffer[];
string $selectionString;
for ($i = 0; $i < `size $objAttr`; $i++)
	{
	tokenize $objAttr[$i] "." $objBuffer;
	if (`objExists $objBuffer[$i]`)
		$selectionString += ($objBuffer[$i] + " ");
	}if (`size $selectionString`)
	select -r $selectionString;
}global proc dwAttrMan_SelectSourceObject()
{
string $obj = `text -q -l dwAttrManObjTXT`;
if (! `objExists $obj`)
	return;
select -r $obj;
}global proc dwAttrMan_SetKeyable()
{
string $obj = `text -q -l dwAttrManObjTXT`;
string $attrs[] = `textScrollList -q -si dwAttrManTSL`;
for ($a in $attrs)
	{
	if (`dwAttrMan_IsCompoundType $obj $a `)
		{
		string $children[] = `listAttr ($obj + "." + $a)`;
		$children = `stringArrayRemove {($obj + "." + $a)} $children`;
		int $keyable;
		for ($c in $children)
			{
			$keyable = `getAttr -k ($obj + "." + $c)`;
			setAttr -k (! $keyable) ($obj + "." + $c);
			//print ($c + " ----> " + (! $keyable) + "\n");
			}
		setAttr -k ($keyable) ($obj + "." + $a);
		//print ($a + " ----> " + ($keyable) + "\n");
		}	if (`dwAttrMan_IsDataType $obj $a`)
		{
		warning ($obj + "." + $a + " is a dataType attribute. Attributes that require the \"-dataType\" flag cannot be keyable.");
		continue;
		}	if (`getAttr -k ($obj + "." + $a)` == 0)
		setAttr -k 1 ($obj + "." + $a);
	else
		setAttr -k 0 ($obj + "." + $a);
	}
dwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;
}global proc string dwAttrManGetAttrTypeGeneral(string $object, string $attribute)
{
string $type = `addAttr -q -attributeType ($object + "." + $attribute)`;if ($type == "typed")
	{
	//Data typed attrs return an array for their -dataType
	string $dataType[] = `addAttr -q -dataType ($object + "." + $attribute)`;
	return $dataType[0];
	}else
	return $type;
}global proc int dwAttrManIsMulti(string $object, string $attribute)
{
string $isMulti = `addAttr -q -multi ($object + "." + $attribute)`;return $isMulti;
}
global proc attrManHelp()
{
if (`window -ex attrManHelpUI`)
	deleteUI attrManHelpUI;window -t "AttributeMan Help" -wh 450 350 attrManHelpUI;
	string $form = `formLayout`;
		string $scroll = `scrollLayout`;
			columnLayout;				rowColumnLayout -nc 2 -cw 1 75 -cw 2 300;
					text -label "Authors: " -font boldLabelFont;
					text -label "Hamish McKenzie:  www.macaronikazoo.com";
					text -label "";
					text -label "David Walden:        www.davidwalden.com";
					text -label "";
					text -label "";
					text -label "Created:" -font boldLabelFont;
					text -label "May 5-18, 2004";
					setParent..;				text -label "" -h 30;
				text -label "   About: " -font boldLabelFont;
				string $noteText = "  This tool allows the user to manage custom object attributes, providing the following\n";
				$noteText += "   functionality:  reordering of attributes, renaming attributes, and transferring attributes\n";
				$noteText += "   between objects. To use, simply select an object and load it into the UI via the \"Load Obj\"\n";
				$noteText += "   button. \n";
				$noteText += "   \n";
				$noteText += "   Reordering of attributes is done via the \"Move Up\" and \"Move Down\" buttons. User can  \n" ;
				$noteText += "   rename attributes by simply providing a new name for the selected attribute in the text  \n";
				$noteText += "   field below the attribute list. \n";
				$noteText += "   \n";
				$noteText += "   Transferring attributes allows the user to move custom attributes between objects. User  \n";
				$noteText += "   has the option of transferring all input and output connections. The original object \n";
				$noteText += "   attributes can either be preserved or deleted. \n";
				$noteText += "   \n";
				$noteText += "   In the main attribute UI list, the user can access additional functionality via the RMB popup \n";
				$noteText += "   menu. Here the user can see the exact attribute type, toggle the attribute´s keyable status, \n";
				$noteText += "   and delete the attribute. On the right-hand side of the UI is a button that opens another text \n";
				$noteText += "   list which allows the user to view both input and output connections on the selected attribute.\n";
				$noteText += "   Double clicking in this list selects the connected object. \n";
				$noteText += "   \n";
				$noteText += "   Virtually all attribute types are supported. Compound attributes, for example vector attributes, \n";
				$noteText += "   are shown in the UI according to their parent attribute name. Compound children attributes \n";
				$noteText += "   must be transferred together with their parent, and thus are not available in the UI. \"Move Up\"   \n";
				$noteText += "   and \"Move Down\" is currently not supported with compound attributes, nor with attributes that   \n";
				$noteText += "   require the \"-dataType\" flag upon creation.  \n";
				$noteText += "   \n";
				$noteText += "   There are some known bugs with transferring compound attributes multiple times in the same \n";
				$noteText += "   Maya session.  Compound attributes (with their connections) can be transferred once per \n";
				$noteText += "   Maya session; more than that and Maya will report errors, or worse, crash. There is currently \n";
				$noteText += "   no known fix for this, so just try to avoid it.   \n";
				$noteText += "   \n";
				$noteText += "   Comments etc. can be sent to mel@macaroniKazoo.com or dwalden74@hotmail.com. \n";
				text -label $noteText -align left;				text -label "" -h 10;
				setParent..;
			setParent..;
		string $closeButton = `button -label "Close Window" -c "deleteUI attrManHelpUI"`;
		setParent..;	formLayout -e
		-attachForm $scroll left 0
		-attachForm $scroll top 0
		-attachForm $scroll right 0
		-attachControl $scroll bottom 0 $closeButton		-attachForm $closeButton left 0
		-attachNone $closeButton top
		-attachForm $closeButton right 0
		-attachForm $closeButton bottom 0
		$form;showWindow attrManHelpUI;
}global proc attributeMan()
{
if (`window -ex dwAttrManWin`)
	deleteUI dwAttrManWin;window -t "AttributeMan" -menuBar true dwAttrManWin;
menu -label "Help" -tearOff true attributeMangerHelpMenu;
	menuItem -l "AttributeMan Help" -c "attrManHelp";string $masterForm = `formLayout dwAttrManFormMaster`;
string $sourceForm = `formLayout sourceObjForm`;	string $sourceText = `text -l "Source Object:"`;
	string $objText = `text -l "" -font boldLabelFont -align left dwAttrManObjTXT`;
		popupMenu -p $objText -b 3;
			menuItem -l "Select" -c "dwAttrMan_SelectSourceObject";	string $TSL = `textScrollList
			-ams 1
			-sc ("textField -e -tx (zooAttrManUtilsReturnElement(0,`textScrollList -q -si dwAttrManTSL`)) dwNewAttrName; \
				dwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;")
			dwAttrManTSL`;
		popupMenu -p $TSL -b 3 -postMenuCommand "{string $obj = `text -q -l dwAttrManObjTXT`; \
								if (`objExists $obj`) { \
									string $attr[] = `textScrollList -q -si dwAttrManTSL`; \
								if (`attributeExists $attr[0] $obj`) {\
									string $attrType; \
								if (`size $attr` > 1) \
									$attrType = \"\"; \
								else \
									{$attrType = `dwAttrManGetAttrTypeGeneral $obj $attr[0]`; \
									if (`dwAttrManIsMulti $obj $attr[0]`) \
									$attrType += \" (multi)\";} \
								string $newMenuLabel = (\"Attribute Type: \" + $attrType); \
								menuItem -e -l $newMenuLabel attrMan_AttrTypeMI;}}}";
			menuItem -l "Attribute Type: " attrMan_AttrTypeMI;
			menuItem -d 1;
			menuItem -l "Toggle keyable" -c "dwAttrMan_SetKeyable";
			menuItem -l "Delete attribute" -c "dwAttrMan_DeleteAttributes `text -q -l dwAttrManObjTXT` `textScrollList -q -si dwAttrManTSL`";	string $moveUpBTN = `button -l "Move Up" -c ( "zooDoReorder up" )`;
	string $moveDownBTN = `button -l "Move Down" -c ( "zooDoReorder down" )`;
	string $collapseButton = `button -l ">" -width 13 -c( "doHideConXnList" ) dwAttrManButtonCollapseConXn`;
setParent ..;
string $conXnform = `formLayout -vis 0 dwAttrManConXnForm`;
	string $connectionsTXT = `text
					-l "Show Connections:"
					-align left`;
	string $conXnRBG = `radioButtonGrp
				-nrb 2
				-cw 1 70
				-la2 "Inputs" "Outputs"
				-on1 "dwAttrMan_ShowConnections 1"
				-on2 "dwAttrMan_ShowConnections 2"
				attrManConnectionsRBG`;
		radioButtonGrp -e -sl 1 attrManConnectionsRBG;
	string $conXnTSL = `textScrollList
			-en 1
			-ams 0
			-dcc "dwAttrMan_SelectConnectionObject"
			-sc ""
			dwAttrManConXnTSL`;
		popupMenu -p $conXnTSL -b 3;
			menuItem -l "Select object" -c "dwAttrMan_SelectConnectionObject";
setParent ..;
string $bottomForm = `formLayout dwAttrManBottomForm`;
	string $renameTF = `textField -cc( "zooAttrManDoRename" ) dwNewAttrName`;
	string $keyableCheck = `checkBox
					-l "List keyable only"
					-v 1
					-ofc "dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 0;"
					-onc "dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 1;"
					dwAttrManListKeyableCheck`;
	string $separator = `separator`;
	string $spacerTXT = `text -l "" -h 5`;
	string $transferOptionsTXT = `text -l "Transfer Attribute Options:" -font boldLabelFont`;
	string $deleteOriginalsCheck = `checkBox
						-l "Delete source attributes"
						-v 1
						-ofc "checkBox -e -en 1 dwAttrManConnectionsCheck;"
						-onc "checkBox -e -en 0 dwAttrManConnectionsCheck; checkBox -e -v 1 dwAttrManConnectionsCheck;"
						dwAttrManDeleteSourceAttrsCheck`;
	string $transferConnectionsCheck = `checkBox
						-l "Transfer connections"
						-v 1
						-en 0
						dwAttrManConnectionsCheck`;	string $loadButton = `button -l "Load Obj" -c "{string $sel[] = `ls -sl -o`; \
							dwAttrMan_LoadAttributes $sel[0] `checkBox -q -v dwAttrManListKeyableCheck`; \
							textField -e -tx \"\" dwNewAttrName; \
							textScrollList -e -ra dwAttrManConXnTSL;}"`;
	string $transferButton = `button -l "Transfer Attrs" -c "dwAttrMan_TransferAttributes \
									`text -q -l dwAttrManObjTXT` \
									`textScrollList -q -si dwAttrManTSL` \
									\"\" \
									`checkBox -q -v dwAttrManConnectionsCheck` \
									`checkBox -q -v dwAttrManDeleteSourceAttrsCheck`;"`;
setParent ..;
formLayout -e
	-af $sourceText left 0
	-af $sourceText top 0
	-an $sourceText right
	-an $sourceText bottom	-ac $objText left 5 $sourceText
	-af $objText top 0
	-af $objText right 0
	-an $objText bottom	-af $TSL left 0
	-ac $TSL top 0 $sourceText
	-ac $TSL right 5 $collapseButton
	-ac $TSL bottom 5 $moveUpBTN	-af $moveUpBTN left 5
	-an $moveUpBTN top
	-ap $moveUpBTN right 5 50
	-af $moveUpBTN bottom 0	-ac $moveDownBTN left 5 $moveUpBTN
	-an $moveDownBTN top
	-ac $moveDownBTN right 10 $collapseButton
	-af $moveDownBTN bottom 0
	-an $collapseButton left
	-ac $collapseButton top 0 $sourceText
	-af $collapseButton right 0
	-af $collapseButton bottom 0
	$sourceForm;formLayout -e
	-af $connectionsTXT left 3
	-af $connectionsTXT top 0
	-af $connectionsTXT right 0
	-an $connectionsTXT bottom	-af $conXnRBG left 3
	-ac $conXnRBG top 0 $connectionsTXT
	-af $conXnRBG right 0
	-an $conXnRBG bottom	-af $conXnTSL left 3
	-ac $conXnTSL top 5 $conXnRBG
	-af $conXnTSL right 0
	-af $conXnTSL bottom 0
	$conXnform;formLayout -e
	-af $renameTF left 0
	-an $renameTF top
	-af $renameTF right 0
	-ac $renameTF bottom 0 $keyableCheck	-af $keyableCheck left 0
	-an $keyableCheck top
	-af $keyableCheck right 0
	-ac $keyableCheck bottom 0 $separator	-af $separator left 0
	-an $separator top
	-af $separator right 0
	-ac $separator bottom 0 $spacerTXT	-af $spacerTXT left 0
	-an $spacerTXT top
	-af $spacerTXT right 0
	-ac $spacerTXT bottom 0 $transferOptionsTXT	-af $transferOptionsTXT left 0
	-an $transferOptionsTXT top
	-af $transferOptionsTXT right 0
	-ac $transferOptionsTXT bottom 0 $deleteOriginalsCheck	-af $deleteOriginalsCheck left 0
	-an $deleteOriginalsCheck top
	-af $deleteOriginalsCheck right 0
	-ac $deleteOriginalsCheck bottom 0 $transferConnectionsCheck	-af $transferConnectionsCheck left 0
	-an $transferConnectionsCheck top
	-af $transferConnectionsCheck right 0
	-ac $transferConnectionsCheck bottom 0 $loadButton	-af $loadButton left 0
	-an $loadButton top
	-ap $loadButton right 0 50
	-af $loadButton bottom 0	-ac $transferButton left 0 $loadButton
	-an $transferButton top
	-af $transferButton right 0
	-af $transferButton bottom 0
	$bottomForm;
int $spacer = 3;
formLayout -e
	-af $sourceForm left $spacer
	-af $sourceForm top $spacer
	-ac $sourceForm right $spacer $conXnform
	-ac $sourceForm bottom $spacer $bottomForm	-ap $conXnform left -2 100
	-af $conXnform top $spacer
	-af $conXnform right $spacer
	-ac $conXnform bottom $spacer $bottomForm
	-af $bottomForm left $spacer
	-an $bottomForm top
	-af $bottomForm right $spacer
	-af $bottomForm bottom $spacer
	$masterForm;
showWindow dwAttrManWin;
}