global proc shelf_Global () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 24
        -enable 1
        -width 24
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit the references for the current scene" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Reference Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "reference.svg" 
        -image1 "reference.svg" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ReferenceEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 28
        -enable 1
        -width 28
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "ECode" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "ECode" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ECode" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "out_envSphere.png" 
        -image1 "out_envSphere.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import sys\nsys.path.append('/spin/share/Projects/CFX_share/Sid/CodeDirectory/Eternal_Code_Directory/')\nimport EUI\nimport Procs\nreload(EUI)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 28
        -enable 1
        -width 28
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Increment the current file name by one, save the file with this new name and keep it open. The original file will be unchanged." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Increment and Save" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "IaS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconFile.png" 
        -image1 "menuIconFile.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "IncrementAndSave" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select the skin and unused joints and influences will be disconnected to improve performance." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Remove Unused Influences" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RUI" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "RemoveUnusedInfluences" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 28
        -enable 1
        -width 28
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Weight hammer: fix vertices that have bad weights (select them and use the hammer)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hammer Skin Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "HSW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "weightHammerVerts" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "EP Curve Tool" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "EP Curve Tool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "curveEP.png" 
        -image1 "curveEP.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "EPCurveTool" 
        -sourceType "mel" 
        -doubleClickCommand "EPCurveToolOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 28
        -enable 1
        -width 28
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "NURBS Circle" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "NURBS Circle" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "circle.png" 
        -image1 "circle.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateNURBSCircle" 
        -sourceType "mel" 
        -doubleClickCommand "CreateNURBSCircleOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 28
        -enable 1
        -width 28
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "sel = pm.ls(sl=1)\n\nhis = pm.listHistory(sel)\na = pm.ls(his,type = 'skinCluster')[0]\ninfJnts=pm.skinCluster(a,q=True,wi=True)\npm.select(infJnts,r=1)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "JntInf" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JntInf" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nsel = pm.ls(sl=1)\n\nhis = pm.listHistory(sel)\na = pm.ls(his,type = 'skinCluster')[0]\ninfJnts=pm.skinCluster(a,q=True,wi=True)\npm.select(infJnts,r=1)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 28
        -enable 1
        -width 28
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Freeze Transformations" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FT" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "FreezeTransformations" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 2
        -flexibleWidthValue 28
        -enable 1
        -width 28
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select an object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Center Pivot" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CP" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconModify.png" 
        -image1 "menuIconModify.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CenterPivot" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit various component values for the selected object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Component Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CpEd" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ComponentEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Load or automatically load plug-ins" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Plug-in Manager" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PM" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "PluginManager" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Edit deformer set membership" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Deformer Sets" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeformerSetEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Namespace Editor" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Namespace Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "NamespaceEditor" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete construction history on the selected object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "History" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Hist" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeleteHistory" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Delete constraints on the selected object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Constraints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Cons" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DeleteConstraints" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Make a set containing the selected object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Set" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Set" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconEdit.png" 
        -image1 "menuIconEdit.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateSet" 
        -sourceType "mel" 
        -doubleClickCommand "CreateSetOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select hierarchy" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Hierarchy" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Hier" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSelect.png" 
        -image1 "menuIconSelect.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SelectHierarchy" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select all joints" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Joints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Join" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSelect.png" 
        -image1 "menuIconSelect.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SelectAllJoints" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\n\ndef tx1():\n    \n    for i in pm.ls(sl=1):\n        pm.textScrollList('tx1',e=1,a=(str(i)))\n    \ndef tx2():\n    \n    for i in pm.ls(sl=1):\n        pm.textScrollList('tx2',e=1,a=(str(i)))\n        \nif pm.window('checkW',ex=True):\n    pm.deleteUI('checkW')\n\nif pm.windowPref('checkW', exists=True ):\n    pm.windowPref( 'checkW', r=1 )\n\npm.window('checkW',s=1,t = 'Compare Hierarchy')\npm.formLayout('clmn',p = 'checkW')\n\npm.textScrollList('tx1',p = 'clmn',w = 250,h = 500)\npm.textScrollList('tx2',p = 'clmn',w = 250,h = 500)\n\npm.button('txb1',l = 'Add Selected Items',c = 'tx1()',w =250,bgc = [.2,.5,.2])\npm.button('txb2',l = 'Add Selected Items',c = 'tx2()',w =250,bgc = [.2,.5,.2])\n\npm.button('txb1c',l = 'Clear All',c = \"pm.textScrollList('tx1',e=1,ra =1)\",w =250,bgc = [.5,.2,.2])\npm.button('txb2c',l = 'Clear All',c = \"pm.textScrollList('tx2',e=1,ra =1)\",w =250,bgc = [.5,.2,.2])\n\npm.formLayout('clmn',e=1,af = \n[\n('tx1','top',1),\n('tx2','left',255),\n('txb1','top',501),\n('txb2','top',501),\n('txb2','left',255),\n('txb1c','top',525),\n('txb2c','top',525),\n('txb2c','left',255),\n\n])\n\n\npm.showWindow('checkW')\n\n\n\n\n\n\n\n\n\n\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "ComHi" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ComHi" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\ndef tx1():\n    \n    for i in pm.ls(sl=1):\n        pm.textScrollList('tx1',e=1,a=(str(i)))\n    \ndef tx2():\n    \n    for i in pm.ls(sl=1):\n        pm.textScrollList('tx2',e=1,a=(str(i)))\n\ndef selec1():\n    obj = pm.textScrollList('tx1',q=1,si=1)    \n    pm.select(obj,r=1)\ndef selec2():\n    obj = pm.textScrollList('tx2',q=1,si=1)    \n    pm.select(obj,r=1)\n           \n    \nif pm.window('checkW',ex=True):\n    pm.deleteUI('checkW')\n\nif pm.windowPref('checkW', exists=True ):\n    pm.windowPref( 'checkW', r=1 )\n\npm.window('checkW',s=1,t = 'Compare Hierarchy')\npm.formLayout('clmn',p = 'checkW')\n\npm.textScrollList('tx1',p = 'clmn',w = 250,h = 500,dcc = 'selec1()',ams=1)\npm.textScrollList('tx2',p = 'clmn',w = 250,h = 500,dcc = 'selec2()',ams=1)\n\npm.button('txb1',l = 'Add Selected Items',c = 'tx1()',w =250,bgc = [.2,.5,.2])\npm.button('txb2',l = 'Add Selected Items',c = 'tx2()',w =250,bgc = [.2,.5,.2])\n\npm.button('txb1c',l = 'Clear All',c = \"pm.textScrollList('tx1',e=1,ra =1)\",w =250,bgc = [.5,.2,.2])\npm.button('txb2c',l = 'Clear All',c = \"pm.textScrollList('tx2',e=1,ra =1)\",w =250,bgc = [.5,.2,.2])\n\npm.formLayout('clmn',e=1,af = \n[\n('tx1','top',0),\n('tx2','left',255),\n('txb1','top',501),\n('txb2','top',501),\n('txb2','left',255),\n('txb1c','top',525),\n('txb2c','top',525),\n('txb2c','left',255),\n\n])\n\n\npm.showWindow('checkW')\n\n\n\n\n\n\n\n\n\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\nsl = pm.ls(sl=1)\npm.delete(pm.parentConstraint(sl[0],sl[1]))" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Del" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Del" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nsl = pm.ls(sl=1)\npm.delete(pm.parentConstraint(sl[0],sl[1]))" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "Point" ( "import pymel.core as pm\nsl = pm.ls(sl=1)\npm.delete(pm.pointConstraint(sl[0],sl[1]))" )
        -mip 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "#select oposite\nobjs = []\nfor i in pm.ls(sl=1):\n    try:\n       ..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "#select oposite\nobjs = []\nfor i in pm.ls(sl=1):\n    try:\n       ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "opo" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "#select oposite\nobjs = []\nfor i in pm.ls(sl=1):\n    try:\n        obj = pm.PyNode(i.replace('lf','rt'))\n        objs.append(obj)\n    except: pass\n    \npm.select(cl=1)\npm.select(objs)" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set Driven Key" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Set Driven Key" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "setDrivenKeyframe.png" 
        -image1 "setDrivenKeyframe.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SetDrivenKey" 
        -sourceType "mel" 
        -doubleClickCommand "SetDrivenKey" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Click to place joint, click on existing joint to add to skeleton, click/drag to position joint" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Create Joints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "kinJoint.png" 
        -image1 "kinJoint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "JointTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Blend shape options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "blendShapeDialogItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "blendShape.png" 
        -image1 "blendShape.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateBlendShapeOptions" 
        -sourceType "mel" 
        -doubleClickCommand "import pymel.core as pm\n\ndef add_bs(src = [],tgt='',name = '_bs'):\n    for i in src:\n        hs = pm.listHistory(tgt)\n        try:\n            bs = pm.ls(hs, type = 'blendShape')[0]\n            if bs:\n                aliasName = pm.aliasAttr(bs, query=True)\n                indx = len(aliasName)/2+1\n                pm.blendShape(bs, e=1, t =(tgt,indx,i,1),w=(indx,1))\n            \n        except:\n            pm.blendShape(i,tgt,foc=1,n = name)\n            \n            \nsl = pm.ls(sl=1)\nadd_bs([sl[0]],tgt = sl[1])" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a cluster for the selected object(s)" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Cluster" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "cluster.png" 
        -image1 "cluster.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateCluster" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Smooth bind skin options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "skinClusterDialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "smoothSkin.png" 
        -image1 "smoothSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SmoothBindSkinOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Detach skin" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Unbind Skin" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "detachSkin.png" 
        -image1 "detachSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "DetachSkin" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paint weights on smooth bound skins" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Paint Skin Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "paintSkinWeights.png" 
        -image1 "paintSkinWeights.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ArtPaintSkinWeightsTool" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Create a locator object on the grid" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Locator" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "locator.png" 
        -image1 "locator.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CreateLocator" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Parent constraint options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "parentConstraintOptionItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "parentConstraint.png" 
        -image1 "parentConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ParentConstraintOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Point constraint options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "pointConstraintOptionItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "posConstraint.png" 
        -image1 "posConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "PointConstraintOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 33
        -enable 1
        -width 36
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Orient constraint options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "orientConstraintOptionItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "orientConstraint.png" 
        -image1 "orientConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "OrientConstraintOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Scale constraint options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "scaleConstraintOptionItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "scaleConstraint.png" 
        -image1 "scaleConstraint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ScaleConstraintOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "IK handle tool options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "handleDialogItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "kinHandle.png" 
        -image1 "kinHandle.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "IKHandleToolOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Copy skin weights options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "copySkinWeightsDialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "copySkinWeight.png" 
        -image1 "copySkinWeight.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CopySkinWeightsOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Mirror skin weights options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "mirrorSkinWeightsDialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "mirrorSkinWeight.png" 
        -image1 "mirrorSkinWeight.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "MirrorSkinWeightsOptions" 
        -sourceType "mel" 
        -doubleClickCommand "import pymel.core as pm\nimport maya.mel as mel\n\nfor i in pm.ls(sl=1):\n    obj = str(i)\n    if 'lf'in obj:\n        rtObj = obj.replace('lf','rt')\n        pm.select(obj,rtObj,r=1)\n    elif 'rt'in obj:\n        lfObj = obj.replace('rt','lf')\n        pm.select(obj,lfObj,r=1)\n    \n    mel.eval('doMirrorSkinWeightsArgList( 2, { \" -mirrorMode YZ -surfaceAssociation closestPoint -influenceAssociation label -influenceAssociation oneToOne\" } );')\n    pm.select(cl=1)\n                \n        \n        \n    \n    \n    \n    " 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Go to bind pose" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Go to Bind Pose" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "goToBindPose.png" 
        -image1 "goToBindPose.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "GoToBindPose" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Mirror joint options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "mirrorJointOptionItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "kinMirrorJoint_S.png" 
        -image1 "kinMirrorJoint_S.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "for i in pm.ls(sl=1):\n    pm.select(i,r=1)\n    mel.eval('mirrorJoint -mirrorYZ -mirrorBehavior -searchReplace \"lf\" \"rt\";')\n" 
        -sourceType "python" 
        -doubleClickCommand "MirrorJointOptions" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Add influence options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "addInfluenceDialog" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "addWrapInfluence.png" 
        -image1 "addWrapInfluence.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "AddInfluenceOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Orient joint options" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "orientJointOptionItem" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "orientJoint.png" 
        -image1 "orientJoint.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "OrientJointOptions" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Customize the joint scale" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Joint Size..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JS" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "jdsWin" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Toggle local rotation axis visibility" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Local Rotation Axes" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "LRA" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconDisplay.png" 
        -image1 "menuIconDisplay.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ToggleLocalRotationAxes" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Callsheet..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Callsheet..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Call" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import spin3d.maya.ui.callsheet; spin3d.maya.ui.callsheet.launch()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "from ngSkinTools.ui.mainwindow import MainWindow; MainWindow.ope..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "from ngSkinTools.ui.mainwindow import MainWindow; MainWindow.ope..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NG" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "from ngSkinTools.ui.mainwindow import MainWindow; MainWindow.open()\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Deformation Exporter..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Deformation Exporter..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import tools.defex.ui; tools.defex.ui.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Import Rig Build..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Import Rig Build..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "IRB" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import spin3d.ui.rig_build_folder; spin3d.ui.rig_build_folder.launch()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rig Build..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Rig Build..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RB" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import tools.builder.ui; tools.builder.ui.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rigorous..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Rigorous..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Rigo" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import tools.rigorous.ui; tools.rigorous.ui.show()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Publish Rig..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Publish Rig..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PR" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import spin3d.maya.ui.rig; spin3d.maya.ui.rig.launch()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "#skintransfer\n\n\n\n\nimport maya.cmds as cmds\nimport pymel.core as pm\nimport maya.mel as mel\ndef sknTransferUI():\n            \n    if pm.window('SkinTransfer', exists=True ):\n        pm.deleteUI( 'SkinTransfer', window=True )\n    if pm.windowPref('SkinTransfer', exists=True ):\n        pm.windowPref( 'SkinTransfer', r=True )\n    \n    pm.window('SkinTransfer', title='Skin Transfer', iconName='Short Name', widthHeight=(336,150),s=0 )\n    \n    form = pm.formLayout(numberOfDivisions=100,bgc =[(.294),(.294),(.294)])\n    source = pm.textField('sourcetxf',w=150,h=40)\n    \n    destination = pm.textScrollList('asd',h=40,w=150)\n    \n    sourceButton = pm.button(l='Source',w=150,bgc =[(.394),(.394),(.394)],c='sourceobjs()')\n    destinationButton = pm.button(l='Destination',w=150,bgc =[(.394),(.394),(.394)],c='destinationObjs()')\n    transfer = pm.button(l='Transfer',w=310,bgc =[(.2),(.5),(.4)],h=25,c='Transfer()')\n    author = pm.symbolButton(i='UV_Freeze_Tool.png',c='author()')\n    \n    \n    pm.formLayout(form,edit=True,attachForm=[\n    (source,'top',10),\n    (destination,'top',11),\n    (sourceButton,'top',60),\n    (destinationButton,'top',60),\n    (transfer,'top',91),\n    (author,'top',120),\n    \n    \n    \n    (source,'left',12),\n    (destination,'left',12),\n    (sourceButton,'left',12),\n    (destinationButton,'left',12),\n    (transfer,'left',12),\n    (author,'left',302),\n    \n            \n            \n            \n            \t\n    \n    \n    \n    \n    \n    \n    ],\n    attachControl=[\n    \n    (destination, 'left', 10, source), \n    (sourceButton, 'bottom', 20, source), \n    (destinationButton, 'left', 10, sourceButton), \n    \n    \n    \n    \n        \t\n        \t\n    \n    ]\n    \n    \n    \n    \n    \n    \n    \n    )\n            \n            \n            \n            \n    pm.showWindow('SkinTransfer')\n        \n        \nobjlst=[]    \nsourceobjctlst=[]\ndef sourceobjs():\n    print 'f'\n    sel = pm.ls(sl=True)\n    pm.textField('sourcetxf',e=True,tx=str(sel[0]),ed=0)\n    sourceobjctlst.append(sel[0])\n    \n    \ndef destinationObjs():\n    pm.textScrollList('asd',e=True,ra=True)\n    \n    destsel = pm.ls(sl=True)\n    for i in destsel:\n        pm.textScrollList('asd',e=True,a=i)\n        objlst.append(i)\n        \n    \n    \n\n    \ndef Transfer():\n    pm.select(cl=True)\n    sel = str(sourceobjctlst[0])\n    \n    his = pm.listHistory(sel)\n    a = pm.ls(his,type = 'skinCluster')[0]\n    infJnts=pm.skinCluster(a,q=True,wi=True)\n    pm.select(infJnts,r=True)\n    for i in objlst:\n        try:\n            pm.skinCluster(i,e=True,ub=True)\n        except:\n            \n            pass\n            \n        b = pm.skinCluster(infJnts,i,mi=5)\n        pm.select(sel,i)\n        mel.eval(\"copySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation closestJoint -normalize;\")\n        pm.select(cl=True)\n        sknTransferUI()\n        \n    \n\ndef author():\n    pm.launch(web='https://www.facebook.com/sidmehraajm/') \n    \n    \n    \nsknTransferUI()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Skin" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Skin" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\nimport maya.mel as mel\nsel = cmds.ls(sl = True)\nsknMsh = sel[0]\ntgtMsh = sel[1:]\nskn = mel.eval('findRelatedSkinCluster ' + sknMsh)\njnts = cmds.skinCluster (skn, q = True, inf = True)\ncmds.select(cl = True)\nfor each in tgtMsh:\n    cmds.select(cl = True)\n    check = mel.eval('findRelatedSkinCluster ' + each)\n    if len(check) != 0:\n        cmds.delete(check)\n    newSkn = cmds.skinCluster(jnts, each, sm =0, bm = 0, omi = False, dr =5, tsb = True)\n    cmds.refresh()\n    cmds.select(sknMsh, each)\n    cmds.copySkinWeights(ss = skn, ds = newSkn[0], sa = \"closestPoint\", ia = \"closestJoint\", nm = True, nr = True)" 
        -sourceType "python" 
        -doubleClickCommand "#skintransfer\n\n\n\n\nimport maya.cmds as cmds\nimport pymel.core as pm\nimport maya.mel as mel\ndef sknTransferUI():\n            \n    if pm.window('SkinTransfer', exists=True ):\n        pm.deleteUI( 'SkinTransfer', window=True )\n    if pm.windowPref('SkinTransfer', exists=True ):\n        pm.windowPref( 'SkinTransfer', r=True )\n    \n    pm.window('SkinTransfer', title='Skin Transfer', iconName='Short Name', widthHeight=(336,220),s=0)\n    \n    form = pm.formLayout(numberOfDivisions=100,bgc =[(.294),(.294),(.294)])\n    source = pm.textField('sourcetxf',w=150,h=100)\n    \n    destination = pm.textScrollList('asd',h=100,w=150)\n    \n    sourceButton = pm.button(l='Source',w=150,bgc =[(.394),(.394),(.394)],c='sourceobjs()')\n    destinationButton = pm.button(l='Destination',w=150,bgc =[(.394),(.394),(.394)],c='destinationObjs()')\n    transfer = pm.button(l='Transfer',w=310,bgc =[(.2),(.5),(.4)],h=25,c='Transfer()')\n    author = pm.symbolButton(i='UV_Freeze_Tool.png',c='author()')\n    \n    \n    pm.formLayout(form,edit=True,attachForm=[\n    (source,'top',10),\n    (destination,'top',11),\n    (sourceButton,'top',120),\n    (destinationButton,'top',120),\n    (transfer,'top',150),\n    (author,'top',180),\n    \n    \n    \n    (source,'left',12),\n    (destination,'left',12),\n    (sourceButton,'left',12),\n    (destinationButton,'left',12),\n    (transfer,'left',12),\n    (author,'left',302),\n    \n            \n            \n            \n            \t\n    \n    \n    \n    \n    \n    \n    ],\n    attachControl=[\n    \n    (destination, 'left', 10, source), \n    (sourceButton, 'bottom', 20, source), \n    (destinationButton, 'left', 10, sourceButton), \n    \n    \n    \n    \n        \t\n        \t\n    \n    ]\n    \n    \n    \n    \n    \n    \n    \n    )\n            \n            \n            \n            \n    pm.showWindow('SkinTransfer')\n        \n        \nobjlst=[]    \nsourceobjctlst=[]\ndef sourceobjs():\n    print 'f'\n    sel = pm.ls(sl=True)\n    pm.textField('sourcetxf',e=True,tx=str(sel[0]),ed=0)\n    sourceobjctlst.append(sel[0])\n    \n    \ndef destinationObjs():\n    pm.textScrollList('asd',e=True,ra=True)\n    \n    destsel = pm.ls(sl=True)\n    for i in destsel:\n        pm.textScrollList('asd',e=True,a=i)\n        objlst.append(i)\n        \n    \n    \n\n    \ndef Transfer():\n    pm.select(cl=True)\n    sel = str(sourceobjctlst[0])\n    \n    his = pm.listHistory(sel)\n    a = pm.ls(his,type = 'skinCluster')[0]\n    infJnts=pm.skinCluster(a,q=True,wi=True)\n    pm.select(infJnts,r=True)\n    for i in objlst:\n        try:\n            pm.skinCluster(i,e=True,ub=True)\n        except:\n            \n            pass\n            \n        b = pm.skinCluster(infJnts,i,tsb=1)\n        pm.select(sel,i)\n        mel.eval(\"copySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation label -influenceAssociation oneToOne -influenceAssociation closestJoint;\")\n        pm.select(cl=True)\n    pm.textScrollList('asd',e=True,ra=True)\n    pm.textField('sourcetxf',e=True,tx='')\n    sourceobjctlst=[]\n    \n\n        \n    \n\ndef author():\n    print ('Siddarth Mehra')\n    \n    \n    \nsknTransferUI()" 
        -commandRepeatable 1
        -flat 1
        -mi "skn" ( "import maya.cmds as cmds\nimport maya.mel as mel\nsel = cmds.ls(sl = True)\nsknMsh = sel[0]\ntgtMsh = sel[1:]\nskn = mel.eval('findRelatedSkinCluster ' + sknMsh)\njnts = cmds.skinCluster (skn, q = True, inf = True)\ncmds.select(cl = True)\nfor each in tgtMsh:\n    cmds.select(cl = True)\n    check = mel.eval('findRelatedSkinCluster ' + each)\n    if len(check) != 0:\n        cmds.delete(check)\n    newSkn = cmds.skinCluster(jnts, each, sm =0, bm = 0, omi = False, dr =5, tsb = True)\n    cmds.refresh()\n    cmds.select(sknMsh, each)\n    cmds.copySkinWeights(ss = skn, ds = newSkn[0], sa = \"closestPoint\", ia = \"closestJoint\", nm = True, nr = True)" )
        -mip 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "\nRGctrl 1;\n\nglobal proc RGctrl(int $YN)\n{\n\n    if($YN == 1)\n    ..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "\nRGctrl 1;\n\nglobal proc RGctrl(int $YN)\n{\n\n    if($YN == 1)\n    ..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "RG" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "\nRGctrl 1;\n\nglobal proc RGctrl(int $YN)\n{\n\n    if($YN == 1)\n    {\n        if(`dockControl -ex rgdock `){deleteUI rgdock; } \n        if(`window -ex RGctrl`){deleteUI RGctrl;};\n         \n        RGctrlWIN;\n\n\n    }\n    else \n    {\n        if(`dockControl -ex rgdock `){deleteUI rgdock; } \n        if(`window -ex RGctrl`){deleteUI RGctrl;};\n        RGctrlWIN;\n    }\n\n}\n\n\n//////////////////////////// RGctrIWIN ///////////////////////////\n/////////////////////////////////////////////////////////////////\nstring $csel[] = `ls -sl`; \nselect -cl;\n\nglobal proc RGctrlWIN()\n{ \n    if(` window -ex RGctrl`){deleteUI RGctrl;}; \n    window -title \"RG Controller v5.1\" -s 5 RGctrl; \n    formLayout topLayout;\n        //////////// Zone 3\n        columnLayout -p topLayout -bgc 0.4 0.4 0.4 -adj 1 ColClm; \n            text -al left -bgc 0 0.1 0.2 -l \" Color \" cntTxt;\n            button -l \" N \" -c \"overrideColor(0)\";\n            button -l \"\" -bgc .8 0 0.2 -c \"overrideColor(4)\"; \n            button -l \"\" -bgc 0 0 .4 -c \"overrideColor(5)\"; \n            button -l \"\" -bgc 0 0 1 -c \"overrideColor(6)\"; \n            button -l \"\" -bgc 0 .3 0 -c \"overrideColor(7)\";\n            button -l \"\" -bgc .159 .030 0.356 -c \"overrideColor(8)\"; \n            button -l \"\" -bgc .8 0 .8 -c \"overrideColor(9)\";\n            button -l \"\" -bgc 0.6 0.3 0.2 -c \"overrideColor(10)\"; \n            button -l \"\" -bgc 0.25 0.13 0.13 -c \"overrideColor(11)\"; \n            button -l \"\" -bgc 0.7 .2 0 -c \"overrideColor(12)\"; \n            button -l \"\" -bgc 1 0 0 -c \"overrideColor(13)\";\n            button -l \"\" -bgc 0 1 0 -c \"overrideColor(14)\";\n            button -l \"\" -bgc 0 0.3 0.6 -c\"overrideColor(15)\"; \n            button -l \"\" -bgc 1 1 0 -c \"overrideColor(17)\"; \n            button -l \"\" -bgc 0 1 1 -c \"overrideColor(18)\";\n            button -l \"\" -bgc 0 1 .8 -c \"overrideColor(19)\"; \n            button -l \"\" -bgc 1 .7 .7 -c \"overrideColor(20)\"; \n            button -l \"\" -bgc 0.9 .7 .5 -c \"overrideColor(21)\"; \n            button -l \"\" -bgc 0 0.7 .4 -c \"overrideColor(23)\";\n            button -l \"\" -bgc .6 .4 .2 -c \"overrideColor(24)\";\n            button -l \"\" -bgc .63 .63 .17 -c \"overrideColor(25)\"; \n            button -l \"\" -bgc 0.2 0 0.3 -c \"overrideColor(30)\";\n\n\n        //////////// Zone 2\n        columnLayout -p topLayout -bgc 0.4 0.4 0.4 -adj 1 wireCnt;\n            text -al left -bgc 0 0.1 0.2 -l \" ---:CONTROLLER: ---  \" cntTxt; \n            button -bgc 0.2 0.2 0.3 -l \"Triangle\" -c \"cntWireNw Triangle\";\n            button -bgc 0.2 0.2 0.3 -l \"Circle\" -c \"cntWireNw Circle\"; \n            button -bgc 0.2 0.2 0.3 -l \"Square\" -c \"cntWireNw Square\";\n            button -bgc 0.2 0.2 0.3 -l \"Fat Cross\" -c \"cntWireNw FatCross\"; \n            button -bgc 0.2 0.2 0.3 -l \"Pyramid\" -c \"cntWireNw Pyramid\"; \n            button -bgc 0.2 0.2 0.3 -l \"Cube\" -c \"cntWireNw Cube\";\n            button -bgc 0.2 0.2 0.3 -l \"Sphere\" -c \"cntWireNw Sphere\"; \n            button -bgc 0.2 0.2 0.3 -l \"Cone\" -c \"cntWireNw Cone\"; \n            button -bgc 0.2 0.2 0.3 -l \"Rombus\" -c \"cntWireNw Rombus\";\n            button -bgc 0.2 0.2 0.3 -l \"Single Normal\" -c \"cntWireNw SingleNormal\"; \n            button -bgc 0.2 0.2 0.3 -l \"Four Normal\" -c \"cntWireNw FourNormal\"; \n            button -bgc 0.2 0.2 0.3 -l \"Dumbell\" -c \"cntWireNw Dumbell\";\n            button -bgc 0.2 0.2 0.3 -l \"Arrow On Ball\" -c \"cntWireNw ArrowOnBall\"; \n            button -bgc 0.2 0.2 0.3 -l \"Pin\" -c \"cntWireNw Pin\";\n\n\n            text -al left -bgc 0 0.1 0.2 -l \" Axis : \" axsTxt;\n            checkBox -v 1 -l \"Orient Child\" orntCB;\n            button -l \"Y UP\" -bgc 0 0.5 0.5 -c \"orientint YUP\" yUpBtt ;\n            button -l \"Y DN\" -bgc 0 0.5 0.5 -c \"orientJnt YDN\" yDnBtt ;\n            button -l \"Z UP\" -bgc 0 0.5 0.5 -c \"orientJnt ZUP\" zUpBtt ;\n            button -l \"Z DN\" -bgc 0 0.5 0.5 -c \"orientJnt ZDN\" zDnBtt ;\n            button -l \"None\" -bgc 0 0.5 0.5 -c \"orientJnt NONE\" nonBtt ; \n            button -l \"Mirror Ctrl\" -bgc 0 0.5 0.5 -c \"mirrorCtrl\" smB;\n            button -l \"ADDPolyColor\" -bgc 0 0.5 0.5 -c \"addPolyVertexColor()\" smC;\n    //////////////// Zone 1\n    formLayout -p topLayout mainLayout;\n        text -p mainLayout -al left -bgc 0 0.1 0.2 -l \"\\t -- RG TOOL v1.2--\" ownTxt; \n        text -p mainLayout -al left -bgc 0 0.1 0.2 -l \" -- RG TOOL v5.1-- : \" jntTxt;\n\n        formLayout -p mainLayout -bgc 0.4 0.4 0.4 jntgrid;\n            checkBox -v 1 -l \"Uv Axis\" uvAxisCB;\n            button -l \"Jnt @ Center\" -bgc 0 0.5 0.5 -c RGjntAtCntr FKCB; \n            button -l \"Component\" -bgc 0 0.5 0.5 -c cmpntlntCreator Cmpnt ; \n            button -l \"Volume\" -bgc 0 0.5 0.5 -c jntAtCntr Vim ;\n\n            text -p mainLayout -al left -bgc 0 0.1 0.2 -l \" Constaints :\" lbTxt;\n            gridLayout -p mainLayout -bgc 0.4 0.4 0.4 -cr 1 -numberOfColumns 5 -cellWidthHeight 55 20 radiogrid; \n                radioCollection cnst;\n                radioButton -label \"Point\" pnt;\n                radioButton -label \"Orient\" ort;\n                radioButton -sl -label \"Parent\" prnt;\n                text -l \"\";\n                checkBox  -v 0 -l \"Scale\" sclCB;\n\n            text -p mainLayout -al left -bgc 0 0.1 0.2 -l \" ATTRIBUTES:\" jntTxts; \n            formLayout -p mainLayout -bgc 0.4 0.4 0.4 jntgrids;\n            textField -text \"TYPE_ATTRIBUTES_NAME\" -bgc 0.2 0.2 0.3 -w 275 attrTF;\n\n            gridLayout -p mainLayout -bgc 0.4 0.4 0.4 -cr 1 -numberOfColumns 5 -cellWidthHeight 55 20 radiogrids; \n                button -label \"On / Off\" -bgc 0 0.1 0.2 -w 90 -h 24 -c \"dkAddAttr enum\" enumB;\n                button -label \"0 - 1\" -bgc 0 0.1 0.2 -w 90 -h 24 -c \"dkAddAttr floatA\" floatAB;\n                button -label \"0 - 10\" -bgc 0 0.1 0.2 -w 90-h 24 -c \"dkAddAttr floatB\" floatBB;\n                button -label \"10 - 10\" -bgc 0 0.1 0.2 -w 90-h 24 -c \"dkAddAttr floatC\" floatBC;\n                button -label \"Float\" -bgc 0 0.1 0.2 -w 90-h 24 -c \"dkAddAttr floatD\" floatCD;\n            \n            text -p mainLayout -al left -bgc 0 0.1 0.2 -l \" Constaints Axis :\" lbTxt2;\n            gridLayout -bgc 0.4 0.4 0.4 -p mainLayout -cr 1 -numberOfColumns 5 -cellWidthHeight 55 20 axisGrid;\n                radioCollection ax;\n                radioButton -label \"X\" x; \n                //text -l \"\";\n                radioButton -sl -label \"Y\" y; \n                //text -l \"\";\n                radioButton -label \"Z\" z;\n                \n                \n                // Translate Checkboxes\n                //text -l \"\";\n                checkBox -v 0 -l \"Proxy\" -cc RGprxCB pxCB;\n                //text -l \"\";\n                checkBox -en 0 -v 0 -l \"Neg Trans\" negCB;\n                //text -l \"\";\n                \n        text -p mainLayout -al left -bgc 0 0.1 0.2 -l \" MackConstaints :\" Mack;\n        gridLayout -p mainLayout -bgc 0.4 0.4 0.4 -cr 1 -numberOfColumns 2 -cellWidthHeight 55 23 Mack1; \n            button -p mainLayout -l \"Float\" -bgc 0 0.5 0.5 -c (\"doIt 0\") cnt ;\n            button -p mainLayout -l \"FK\" -bgc 0 0.5 0.5 -c  (\"doIt 1\") prxcnt ;\n\n        gridLayout -p mainLayout -bgc 0.4 0.4 0.4 -cr 1 -numberOfColumns 5 -cellWidthHeight 55 25 FKbatton;\n\n            checkBox -label \"Tra - X\" -cc \"unCheck(\\\"trans\\\")\" transX; \n            checkBox -label \"Tra - Y\" -cc \"unCheck(rtrans\\\")\" transY; \n            checkBox -label \"Tra - Z\" -cc \"unCheck(\\\"trans\\\")\" transZ; \n            text -l \"\";\n            checkBox -label \"All Tra\" -cc \"SelectAllTrans()\" allTrans;\n\n            // Rotate Checkboxes\n\n            checkBox -label \"Rot - X\" -cc \"unCheck(Vrotr)\" rotX; \n            checkBox -label \"Rot - Y\" -cc \"unCheck(Vrot\\\")\" rotY; \n            checkBox -label \"Rot - Z\" -cc \"unCheck(Vrot\\\")\" rotZ;\n            text -l \"\";\n            checkBox -label \"All Rot\" -cc \"SelectAllRots()\" allRots;\n\n\n            // Scale Checkboxes\n\n            checkBox -label \"Sca - X\" -cc \"unCheck(\\\"sc\\\")\" scX; \n            checkBox -label \"Sca - Y\" -cc \"unCheck(\\\"sc\\\")\" scY; \n            checkBox -label \"Sca - Z\" -cc \"unCheck(\\\"sc\\\")\" scZ; \n            text -l \"\";\n            checkBox -label \"All Scale\" -cc \"SelectAllScs()\" allScs;\n\n            // Visibility Checkbox\n\n            checkBox -label \"Vis\" -cc \"unCheck(\\\"vis\\\")\" vis;\n            // Select All / DeSelect All Checkbox\n            text -l \"\"; \n            text -l \"\"; \n            text -l \"\";\n            checkBox -label \"Se/DeSeAll\" -cc \"SelectDeselectAll()\" SelectDeselect;\n            button -label \"Lock\" -bgc 0 0.3 0.5 -c \"lockAttributes(0, 1, 0, 0)\"; \n            button -label \"Unlock\" -bgc 0 0.3 0.5 -c \"lockAttributes(0, 0, 0, 1)\"; \n            button -label \"UnlockAll\" -bgc 0 0.3 0.5 -c \"lockAttributes(1, 0, 0, 1)\"; \n            button -label \"Hide\" -bgc 0 0.3 0.5 -c \"HideAttributes(0, 0)\";\n            button -label \"UnHide\" -bgc 0 0.3 0.5 -c \"HideAttributes(0, 1)\";\n\n    // Extra Layout\n\n    formLayout -p topLayout -bgc 0.4 0.4 0.4 -numberOfDivisions 100 xtraLay; \n    string $columnLX = `columnLayout -p xtraLay -adjustableColumn true` ; \n    button -l \"Fk Parnt\" -bgc 0 0.4 0.5 -c prntFk;\n    button -l \"Folicle\" -bgc 0 0.4 0.5 -c RGuvFlc;\n    button -label \"Select Joints\" -bgc 0 0.4 0.5 -c \"jointsShow(\\\"selectAllJoint\\\")\";\n    \n    button -label \"Lock `n Hide\" -bgc 0 0.4 0.5 -c \"lockAttributes(0, 1, 1, 0)\"; \n    button -bgc 0 0.2 0.5 -l \"Shape Replacer\" -c \"shpRplc\";\n    string $columnRX = `columnLayout -p xtraLay -adjustableColumn true` ; \n    button -l \"Zero Out\" -bgc 0 0.5 0.5 -c RGzeroOut;\n    button -l \"Re-Skin\" -bgc 0 0.5 0.5 -c RGreSkin;\n    button -label \"Show Joints\" -bgc 0 0.5 0.5 -c \"jointsShow(\\\"showAllJoint\\\")\"; \n    button -label \"Hide Joints\" -bgc 0 0.5 0.5 -c \"jointsShow(\\\"hideAllJoint\\\")\"; \n    button -label \"Unused Nodes\" -bgc 0 0.2 0.5 -c \"deleteUnusedNodes\";\n\n\n    formLayout -edit\n        -attachForm     $columnLX    \"top\" 2 \n        -attachForm     $columnLX    \"left\" 2 \n        -attachForm     $columnLX    \"bottom\" 1 \n        -attachPosition $columnLX    \"right\" 1 50\n    \n        -attachForm     $columnRX    \"top\" 2 \n        -attachPosition $columnRX    \"left\" 1 50 \n        -attachForm     $columnRX    \"bottom\" 1 \n        -attachForm     $columnRX    \"right\" 2\n    \n    \n    xtraLay;\n\n\n    // Dynamic Layout\n    text -p mainLayout -al left -bgc 0 0.1 0.2 -l \" Dynamics :\" dnyTxt; \n    formLayout -p mainLayout -bgc 0.4 0.4 0.4 -numberOfDivisions 100 shp; \n    string $columnL = `columnLayout -p shp -adjustableColumn true` ; \n    button -l \"Add Dynamic\" -bgc 0 0.5 0.5 -c dynaSetup;\n    button -l \"Add Dyna\" -bgc 0 0.5 0.5 -c addDyna;\n    checkBox -v 1 -l \"With Nucleus\" -h 23 -bgc 0 0.5 0.5 Ncb;\n    //separator -height 1 -st none;\n    button -label \"AttributeMan\" -bgc 0 0.5 0.5 -c \"attributeMan\";\n    button -label \"SkinWrap\" -bgc 0 0.5 0.5 -c \"dkSkinWrap\";\n    button -label \"NameDuplicateNodes\" -bgc 0 0.5 0.5 -c \"NameDuplicateNodes()\"; \n    button -label \"UV Driver\" -bgc 0 0.4 0.5 -c \"uvDriver()\";\n    button -label \"AnimSet\" -bgc 0 0.4 0.5 -c aset;\n    button -label \"RenderSet\" -bgc 0 0.4 0.5 -c rset;\n    button -label \"CacheSet\" -bgc 0 0.4 0.5 -c cset;\n\n    //separator -height 6 -st none;\n    string $columnR = `columnLayout -p shp -adjustableColumn true` ; \n    button -l \"Remove Dynamic\" -bgc 0 0.5 0.5 -c rmDynaSetup; \n    button -l \"Add PropA\" -bgc 0 0.5 0.5 -c addPropA;\n    button -l \"Conned nucleus\" -bgc 0 0.5 0.5 -c CN;\n    string $close = ` button -p shp -bgc 0.2 0.2 0.3 -l \"Transfer Attribute\" -c transAtt` ; \n    separator -height 1 -st none;\n    button -label \"SkinXfer\" -bgc 0 0.5 0.5 -c \"skinXfer\";\n    button -label \"Transfer BS Connections\" -bgc 0 0.5 0.5 -c \"tBsConnections()\"; \n    button -label \"Rivet\" -bgc 0 0.5 0.5 -c \"rivet ( )\";\n    button -label \"PropControl\" -bgc 0 0.4 0.5 -c \"PropControl()\"; \n    button -label \"Add To AnimSet\" -bgc 0 0.4 0.5 -c aaset; \n    button -label \"Add To RenderSet\" -bgc 0 0.4 0.5 -c bset; \n    button -label \"Add To CacheSet\" -bgc 0 0.4 0.5 -c ccset;\n\n    formLayout -edit\n        -attachForm    $columnL    \"top\" 2\n        -attachForm    $columnL    \"left\" 2 \n        -attachControl $columnL    \"bottom\" 2 $close \n        -attachPosition$columnL    \"right\" 2 50\n        \n        -attachForm    $columnR    \"top\" 2\n        -attachPosition $columnR   \"left\" 0 50\n        -attachControl $columnR    \"bottom\" 2 $close\n        -attachForm    $columnR    \"right\" 2\n        \n        -attachNone   $close    \"top\"\n        -attachForm   $close    \"left\" 2\n        -attachForm   $close    \"bottom\" 2\n        -attachForm   $close    \"right\" 2\n\n    shp;\n\n\n    formLayout -edit\n\n        -attachForm    ownTxt     \"top\" 2\n        -attachForm    ownTxt     \"left\" 2 \n        -attachControl ownTxt    \"bottom\" 4 jntgrid \n        -attachForm    ownTxt     \"right\" 2\n        \n        -attachNone    jntTxt    \"top\"\n        -attachForm    jntTxt    \"left\" 2\n        -attachControl jntTxt    \"bottom\" 4 jntgrid \n        -attachForm    jntTxt    \"right\" 2\n        \n        -attachNone    jntgrid   \"top\"\n        -attachForm    jntgrid   \"left\" 2\n        -attachControl jntgrid   \"bottom\" 4 lbTxt \n        -attachForm    jntgrid   \"right\" 2\n        \n        -attachNone    lbTxt    \"top\"\n        -attachForm    lbTxt    \"left\" 2\n        -attachControl lbTxt    \"bottom\" 2 radiogrid\n        -attachForm    lbTxt    \"right\" 2\n        \n        -attachNone    radiogrid   \"top\"\n        -attachForm    radiogrid   \"left\" 2\n        -attachControl radiogrid   \"bottom\" 2 lbTxt2\n        -attachForm    radiogrid   \"right\" 2\n          \n        -attachNone    lbTxt2   \"top\"\n        -attachForm    lbTxt2   \"left\" 2\n        -attachControl lbTxt2   \"bottom\" 2 axisGrid \n        -attachForm    lbTxt2   \"right\" 2\n        \n        -attachNone    axisGrid   \"top\"\n        -attachForm    axisGrid   \"left\" 2\n        -attachControl axisGrid  \"bottom\" 2 Mack \n        -attachForm    axisGrid   \"right\" 2\n        \n        -attachNone    Mack     \"top\"\n        -attachForm    Mack     \"left\" 2\n        -attachControl Mack     \"bottom\" 2 Mack1\n        -attachForm    Mack     \"right\" 2\n        \n        -attachNone    Mack1     \"top\"\n        -attachForm    Mack1     \"left\" 2\n        -attachControl Mack1    \"bottom\" 2 FKbatton \n        -attachForm    Mack1     \"right\" 2\n        \n        -attachNone     cnt      \"top\"\n        -attachForm     cnt      \"left\" 2\n        -attachControl  cnt      \"bottom\" 2 FKbatton\n        -attachPosition cnt    \"right\" 2 50\n        \n        -attachNone    prxcnt   \"top\"\n        -attachControl prxcnt   \"left\" 2 cnt\n        -attachControl prxcnt   \"bottom\" 2 FKbatton\n        -attachForm    prxcnt   \"right\" 2\n\n        -attachNone    FKbatton   \"top\"\n        -attachForm    FKbatton   \"left\" 2\n        -attachControl FKbatton     \"bottom\" 2 jntTxts \n        -attachForm    FKbatton     \"right\" 2\n\n        -attachNone    jntTxts    \"top\"\n        -attachForm    jntTxts    \"left\" 2\n        -attachControl jntTxts    \"bottom\" 2 jntgrids \n        -attachForm    jntTxts    \"right\" 2\n        \n        -attachNone    jntgrids   \"top\"\n        -attachForm    jntgrids   \"left\" 2\n        -attachControl jntgrids   \"bottom\" 2 radiogrids \n        -attachForm    jntgrids   \"right\" 2\n        \n        -attachNone    radiogrids \"top\"\n        -attachForm    radiogrids \"left\" 2\n        -attachControl radiogrids \"bottom\" 2 dnyTxt \n        -attachForm    radiogrids \"right\" 2\n        \n        -attachNone    dnyTxt     \"top\"\n        -attachForm    dnyTxt     \"left\" 2\n        -attachControl dnyTxt   \"bottom\" 2 shp \n        -attachForm    dnyTxt     \"right\" 2\n        \n        -attachNone    shp      \"top\"\n        -attachForm    shp      \"left\" 2\n        -attachForm    shp      \"bottom\" 2\n        -attachForm    shp      \"right\" 2\n\n    mainLayout;\n\n    formLayout -edit\n\n        -attachForm    uvAxisCB     \"top\" 2\n        -attachForm    uvAxisCB    \"left\" 2 \n        -attachNone    uvAxisCB    \"bottom\" \n        -attachForm    uvAxisCB    \"right\" 2\n        \n        -attachForm     FKCB        \"top\" 2 \n        -attachPosition FKCB      \"left\" 2 50 \n        -attachNone     FKCB        \"bottom\"\n        -attachForm     FKCB        \"right\" 2\n        \n        -attachControl Cmpnt       \"top\" 8 uvAxisCB \n        -attachForm    Cmpnt       \"left\" 2\n        -attachForm    Cmpnt       \"bottom\" 2\n        -attachControl Cmpnt       \"right\" 2 Vim\n        \n        -attachControl  Vim       \"top\" 2 FKCB\n        -attachPosition Vim       \"left\" 2 50 \n        -attachForm     Vim       \"bottom\" 2 \n        -attachForm     Vim       \"right\" 2\n\n\n    jntgrid;\n\n\n    formLayout -edit\n\n        -attachForm    mainLayout  \"top\" 2 \n        -attachForm    mainLayout  \"left\" 2 \n        -attachNone    mainLayout  \"bottom\" \n        -attachNone    mainLayout  \"right\"\n        \n        -attachForm    wireCnt   \"top\" 0\n        -attachControl wireCnt   \"left\" 0 mainLayout\n        -attachNone    wireCnt   \"bottom\"\n        -attachControl wireCnt   \"right\" 0 ColClm\n        \n        -attachForm    ColClm    \"top\" 2 \n        -attachNone    ColClm    \"left\"\n        -attachNone    ColClm    \"bottom\" \n        -attachForm    ColClm    \"right\" 2\n        \n        -attachControl xtraLay   \"top\" 2 ColClm \n        -attachControl xtraLay   \"left\" 2 mainLayout \n        -attachForm    xtraLay  \"bottom\" 2\n        -attachForm    xtraLay  \"right\" 2\n\n    topLayout;\n\nshowWindow RGctrl;\n\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////RGprxCB///////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc RGprxCB()\n{\n    int $val =`checkBox  -q -v pxCB`; \n    if($val == 1)\n    {\n        checkBox  -e -en 1 -v 1 negCB;  \n    }\n    else\n    {\n        checkBox  -e -en 0 -v 0 negCB;          \n    }  \n}\n\n\nglobal proc RGjntAtCntr()\n{\n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {\n        for ($each in $sel)\n        {\n           \n            float $center[]={};\n            float $bbox[] = `exactWorldBoundingBox $each`;\n            $center[0] = ( $bbox[0] + $bbox[3] )/2;\n            $center[1] = ( $bbox[1] + $bbox[4] )/2;\n            $center[2] = ( $bbox[2] + $bbox[5] )/2;   \n            select -cl  ;\n            joint -p $center[0] $center[1] $center[2] -n ($each + \"_Jnt\");\n        }     \n    }\n    else\n    {\n        error \"Nakari ki nakari hi rahegi Select multiple Objects\";\n    }\n}\n\n\n\nglobal proc RGzeroOut()\n{\n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {\n        for ($each in $sel)\n        {\n          string $grp = `group -em -n ($each + \"_grp\")`;  \n          float $pos[] =`xform -q -ws -rp $each`;\n          float $rot[] =`xform -q -ws -ro $each`;\n          xform -ws -t $pos[0] $pos[1] $pos[2] $grp;\n          xform -ws -ro $rot[0] $rot[1] $rot[2] $grp;\n          string $prnt[] =`listRelatives -p $each`;\n          \n          if(`size($prnt)` != 0)\n          {\n              parent $grp $prnt[0];\n              parent $each $grp;\n          }\n          else\n          {\n              parent $each $grp;              \n          }\n          \n        }\n    }\n    else\n    {\n        error \"school nahi gaye kya pata nahi Zero Out kya hai\";\n    }\n}        \n\n//////////////////////////////////////////////////////////////////////\n//////////////////////////  Re-Skin Object  /////////////////////////\n/////////////////////////////////////////////////////////////////////\n\n\nglobal proc RGreSkin ()\n{\nstring $sel[]=`ls -sl`;\n    \n    if(`size $sel` != 0)\n    {\n\n        for($i = 0; $i<`size($sel)`; $i++)\n        {\n            \n            string $skinclst  = `findRelatedSkinCluster($sel[$i])`;\n            \n            if($skinclst != \"\")\n            {\n                string $shp[] =`ls -dag -s $sel[$i]`;\n                string $jnts[] =`skinCluster -q -inf $skinclst`;\n                skinCluster -e  -ubk $shp[0];\n                catchQuiet(`delete \"*bindPose*\"`);\n                skinCluster $jnts $shp[0];\n            }\n            else\n            {\n                error \"dub mar jake select skin object\";\n            }\n \n        }\n    }\n    else\n    {\n        error \"dub mar jake select skin object\";\n    }\n}    \n    \n//////////////////////////////////////////////////////////////////////\n////////////////////////////  Display LRA  ///////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nglobal proc RGLRA ()\n{\nstring $sel[]=`ls -sl`;\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        if(`objectType -isType \"joint\" $sel[$i]`)\n        {\n            float $val= `getAttr ($sel[$i] + \".displayLocalAxis\")`;\n            if($val == 0)\n                setAttr ($sel[$i] + \".displayLocalAxis\") 1;\n            else\n                setAttr ($sel[$i] + \".displayLocalAxis\") 0;\n\n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n///////////////////////////  orient Joint  //////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nglobal proc orientJnt (string $TYPE)\n{\nstring $sel[]=`ls -sl`;\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        if(`objectType -isType \"joint\" $sel[$i]`)\n        {\n            string $cld[] =`listRelatives -c $sel[$i]`;\n            if(`size($cld)` != 0)\n            {\n                 int $val=`checkBox -q -v orntCB`;\n\n                if($val == 0)\n                {\n                    switch ($TYPE)\n                    {\n                        case \"YUP\" :\n                            joint -e  -oj xyz -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"YDN\" :\n                            joint -e  -oj xyz -secondaryAxisOrient ydown $sel[$i];\n                        break ; \n                        \n                        case \"ZUP\" :\n                            joint -e  -oj xzy -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"ZDN\" :\n                            joint -e  -oj xzy -secondaryAxisOrient ydown $sel[$i];\n                        break ;  \n                        \n                        case \"NONE\" :\n                            joint -e  -oj none $sel[$i];\n                        break ;  \n                    } \n                }\n                else\n                {\n                    switch ($TYPE)\n                    {\n                        case \"YUP\" :\n                            joint -e -ch -oj xyz -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"YDN\" :\n                            joint -e -ch  -oj xyz -secondaryAxisOrient ydown $sel[$i];\n                        break ; \n                        \n                        case \"ZUP\" :\n                            joint -e -ch  -oj xzy -secondaryAxisOrient yup $sel[$i];\n                        break ; \n                        \n                        case \"ZDN\" :\n                            joint -e -ch  -oj xzy -secondaryAxisOrient ydown $sel[$i];\n                        break ;  \n                        \n                        case \"NONE\" :\n                            joint -e -ch  -oj none $sel[$i];\n                        break ;  \n                    } \n                }              \n               \n            }\n            else\n            {\n                 switch ($TYPE)\n                {\n                    case \"NONE\" :\n                        joint -e  -oj none $sel[$i];\n                    break ;  \n                } \n            }         \n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////////  override Color  /////////////////////////\n/////////////////////////////////////////////////////////////////////\n\nglobal proc overrideColor(int $Index) {\n    string $selected[]=`ls -sl`;\n    int $amount=`size($selected)`;\n    for ($n=0; $n<$amount; $n++) {\n        setAttr ($selected[$n] + \".overrideEnabled\") 1;\n    };\n\n    for ($n=0; $n<$amount; $n++) {\n        setAttr ($selected[$n] + \".overrideColor\") $Index;\n    };\n}\n\n//////////////////////////////////////////////////////////////////////\n////////////////////////  Parent FK Hierarchy  ///////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc prntFk()\n{\n    string $sel[] =`ls -os`;\n    \n    if(`size($sel)` != 1)\n    {\n        for($i = (size($sel)-1); $i>0; $i--)\n        {\n            parent $sel[$i] $sel[$i-1];\n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////  Component Joint Creator  /////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc cmpntJntCreator()\n{\n    string $sel[] =`ls -fl -os`;\n    int $uvChk = `checkBox -q -v uvAxisCB`;\n    \n    if(`size($sel)` == 0)\n    {\n         error \"sharam kar abhi tak etana bhi nahi path select component\";\n    }\n    else\n    {\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        \n            if($uvChk == 1)\n            {\n                string $converted[] =`polyListComponentConversion -fv -fe -ff -fvf -fuv -tuv $sel[$i]`;\n                    if(`gmatch $sel[$i] \"*.vtx*\"` || `gmatch $sel[$i] \"*.map*\"`){\n                        float $uv[] =`polyEditUV -q $converted[0]`;\n                        uvJnt $converted[0] $uv[0] $uv[1];\n                    }\n                    \n                    if(`gmatch $sel[$i] \"*.e*\"`){\n                        string $flatCom[] =`ls -fl $converted`;\n                        float $uv[] =`polyEditUV -q $flatCom[0]`;\n                        uvJnt $flatCom[0] $uv[0] $uv[1];\n                        \n                        if($i == size($sel)-1)\n                        {\n                            float $uv[] =`polyEditUV -q $flatCom[1]`;\n                            uvJnt $flatCom[1] $uv[0] $uv[1];\n                        }\n                    } \n                          \n                    if(`gmatch $sel[$i] \"*.f*\"`){\n                        string $flatCom[] =`componentFlatOut $converted`;\n                        float $u= 0;\n                        float $v= 0;\n                        for($r = 0; $r <`size($flatCom)`; $r++)\n                        {\n                            float $uv[] =`polyEditUV -q $flatCom[$r]`;\n                            $u+=$uv[0];\n                            $v+=$uv[1];\n                        }\n                       uvJnt $converted[0] ($u/size($flatCom)) ($v/size($flatCom));\n                    }\n            }\n            else\n            {\n                string $converted[] =`polyListComponentConversion -fv -fe -ff -fvf -fuv -tv $sel[$i]`;\n                string $flatCom[] =`componentFlatOut $converted`;\n        \n                    if(`gmatch $sel[$i] \"*.vtx*\"` || `gmatch $sel[$i] \"*.map*\"`){\n                    \n                    float $pos[] =`xform -q -ws -t $flatCom[0]`;\n                    select -cl  ;\n                    string $jnt=`joint -p $pos[0] $pos[1] $pos[2] `;\n                    select -cl  ;\n        \n                    }\n        \n                    if(`gmatch $sel[$i] \"*.e*\"`){\n                        \n                            float $pos[] =`xform -q -ws -t $flatCom[0]`;\n                            select -cl  ;\n                            string $jnt=`joint -p $pos[0] $pos[1] $pos[2] `;\n                            select -cl  ;\n                        if($i == size($sel)-1)\n                        {\n                            float $pos[] =`xform -q -ws -t $flatCom[1]`;\n                            select -cl  ;\n                            string $jnt=`joint -p $pos[0] $pos[1] $pos[2] `;\n                            select -cl  ;\n                        }\n                    } \n        \n                    if(`gmatch $sel[$i] \"*.f*\"`){\n                        float $x= 0;\n                        float $y= 0;\n                        float $z= 0;\n        \n                        for($r = 0; $r <`size($flatCom)`; $r++)\n                        {\n                            float $pos[] =`xform -q -ws -t $flatCom[$r]`;\n                            $x+=$pos[0];\n                            $y+=$pos[1];\n                            $z+=$pos[2];\n        \n                        }\n                            select -cl  ;\n                            string $jnt=`joint -p ($x/size($flatCom)) ($y/size($flatCom)) ($z/size($flatCom)) `;\n                            select -cl  ;\n                    }\n            }\n        \n        }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n///////////////////////  Joint At Controller  ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc jntAtCntr()\n{\n    string $sel[] =`ls -fl -os`;\n    \n    if(`size($sel)` != 0)\n    { \n    \n        float $pos[]=`BBcenter $sel`;\n        select -cl  ;\n        joint -p $pos[0] $pos[1] $pos[2];\n        select -r $sel;\n    \n    }\n    else\n    {\n        error \"Bimad estamal kiya karo error ke bharose mat raho\";\n    }\n\n}\n\n//////////////////////////////////////////////////////////////////////\n////////////////////////  Component Flat Out  ///////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc string[] componentFlatOut(string $cmpnt[])\n{\n\nstring $return[] = {};\nint $incr = 0;\n    for($i = 0; $i < `size($cmpnt)`; $i++)\n    {\n\n        if(`gmatch $cmpnt[$i] \"*:*\"`){\n            \n        string $buffer[] ={};\n        $numTokens = `tokenize $cmpnt[$i] \"[\" $buffer`;\n        string $objNm = $buffer[0];\n        $numTokens = `tokenize $buffer[1] \"]\" $buffer`;\n        $numTokens = `tokenize $buffer[0] \":\" $buffer`;\n        int $start = $buffer[0];\n        int $end = $buffer[1];\n        \n            for($r = $start; $r <= $end; $r++)\n            {\n              $return[$incr]= ($objNm + \"[\" + $r + \"]\" ); \n              $incr++;\n            }\n        \n        }\n        else\n        {\n              $return[$incr]=  $cmpnt[$i]; \n              $incr++;            \n        }\n    }\n    return $return; \n}\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////  UV Folicle Button  ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\n\nglobal proc RGuvFlc()\n{\nstring $sel[] =`filterExpand -ex 1 -sm 31 -sm 35`;\nstring $folicle = \"\";\nif(`size($sel)` == 0)\n{\n     error \"riger ka naam kharab kar rahe ho select UV or Vertex\";\n}\nelse\n{\n    for($i = 0; $i<`size($sel)`; $i++)\n    {\n        \n        string $shp[]=`listRelatives -p -s $sel[$i]`;\n        string $converted[] =`polyListComponentConversion -fv -fe -ff -fvf -fuv -tuv $sel[$i]`;\n        if(`gmatch $converted[0] \"*.map*\"`){\n            float $uv[] =`polyEditUV -q $converted[0]`;\n            $folicle =`uvFolicle $shp[0] $uv[0] $uv[1]`; \n        }\n    }\n}\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////////////  UV Joint  ////////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc uvJnt(string $objNm,float $u, float $v)\n{\n    string $shp[]=`listRelatives -p -s $objNm`;\n    string $folicle =`uvFolicle $shp[0] $u $v`; \n    select -cl  ;\n    string $jnt=`joint`;\n    parent $jnt $folicle;\n    xform -os -t 0 0 0 $jnt;\n    xform -os -ro 0 0 0 $jnt;\n    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -jointOrient $jnt;\n    parent  -w $jnt;\n    delete $folicle;\n    select -cl  ;\n}\n\n//////////////////////////////////////////////////////////////////////\n///////////////////////  BoundingBox Center  ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc float[]  BBcenter(string $objs[])\n{\n\n    float $center[]={};\n    float $bbox[] = `exactWorldBoundingBox $objs`;\n    $center[0] = ( $bbox[0] + $bbox[3] )/2;\n    $center[1] = ( $bbox[1] + $bbox[4] )/2;\n    $center[2] = ( $bbox[2] + $bbox[5] )/2;   \n    \n    return $center;\n\n}\n\n\n//////////////////////////////////////////////////////////////////////\n////////////////////////////  UV Folicle  ////////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc string uvFolicle(string $shp, float $uVal, float $vVal)\n{\n    string $hsys = `createNode hairSystem`;\n    int $ind[0] ;\n    $ind[0] = 0;\n    int $i;\n    float $v = 0;\n    float $u = $i/10.0;\n    string $newHair = createHairCurveNode( $hsys, $shp, $uVal,$vVal,2, \n    false, false, false, false, \"\", 1.0, $ind, \"\",\"\",1);\n    delete `listRelatives -p $hsys`;\n    return $newHair;\n}\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////    LOCK AND HIDE    ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc int  LNH (string $obj,int $tx,int $ty,int $tz,int $rx,int $ry,int $rz,int $sx,int $sy,int $sz,int $v)\n{\nint $attrVal[];\n$attrVal[0] =$tx;$attrVal[1] =$ty;$attrVal[2] =$tz;\n$attrVal[3] =$rx;$attrVal[4] =$ry;$attrVal[5] =$rz;\n$attrVal[6] =$sx;$attrVal[7] =$sy;$attrVal[8] =$sz;\n$attrVal[9] =$v;\nint $keyVal;\nstring $attrs[] ={\"tx\",\"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"};\n\n    for ($i=0;$i<(size($attrs));$i++)\n    {            \n        if ($attrVal[$i] == 1){\n            $keyVal = 0;\n            setAttr -lock $attrVal[$i] -keyable $keyVal -channelBox $keyVal ($obj +  \".\" + $attrs[$i]);\n    \n    }\n    }\n\n    return 1;\n}\n\n//////////////////////////////////////////////////////////////////////\n//////////////////////// CONTROL PROXY OR NOT ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc doIt(int $Fk)\n{\n\nint $prx = `checkBox  -q -v pxCB`;  \n\n    if($prx == 1)\n    {\n    prxCnt $Fk;\n    }\n    \n    if($prx == 0)\n    {\n    cnt $Fk;\n    }\n}\n\n\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////      CONTROLER      ////////////////////////\n//////////////////////////////////////////////////////////////////////\n\nglobal proc cnt(int $Fk)\n{\nstring $sel[]= `ls -sl`;\n\nif ((size($sel)) == 0){\nerror \"Select Object for controller\";\n}\nelse{\n    //find UI info \n    string $axis =`radioCollection -q -sl ax`;\n    int $Nrax[] ={0, 0, 0};\n    if($axis==\"x\"){$Nrax ={1, 0, 0};};\n    if($axis==\"y\"){$Nrax ={0, 1, 0};};\n    if($axis==\"z\"){$Nrax ={0, 0, 1};};\n    string $cnst =`radioCollection -q -sl cnst`;\n    int $sclCst =`checkBox -q -v sclCB`;\n    \n    //create parent group\n    string $mnGrp = `group -em -n ($sel[0] + \"_CtrlGrp\")`;\n    if(`objExists \"Extra_MotionSystem\"`)\n        {parent $mnGrp \"Extra_MotionSystem\";}\n    for ($each in $sel){\n        string $chld[] = {};\n        if ($Fk == 1)\n        {\n         $chld =`ls -dag $each `;\n        }\n        else\n        {\n        $chld[0] = $each;\n        }\n        \n        for ($i=0;$i<(size($chld));$i++)\n        {\n            string $typ =`nodeType $chld[$i]`;\n            if ($typ == \"transform\" || $typ == \"joint\")\n                {        \n                //create contrller shape \n                string $cntName[] =`circle \n                    -c 0 0 0 \n                    -nr $Nrax[0] $Nrax[1] $Nrax[2] \n                    -sw 360 -r 1 -d 3 -ut 0 \n                    -tol 0.01 -s 8 -ch 0\n                    -n ($chld[$i] + \"_Ctrl\")`;\n                    \n                string $grp = `group -em -n ($chld[$i] + \"_OffsetGrp\")`;\n                string $grp1 =`group -em -n ($chld[$i] + \"_PosGrp\")`;\n                \n                parent $cntName[0] $grp;\n                parent $grp $grp1;\n                \n                // position controller\n                float $pos[]=`xform -q -ws -rp$chld[$i]`;\n                float $rot[]=`xform -q -ws -ro $chld[$i]`;\n                \n                xform -ws -t $pos[0] $pos[1] $pos[2] $grp1;\n                xform -ws -ro $rot[0] $rot[1] $rot[2] $grp1;\n                \n                //Constraint \n                if($cnst==\"pnt\"){\n                pointConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 0 0 0 1 1 1 0 0 0 1;\n                LNH $grp 0 0 0 1 1 1 0 0 0 1;\n                }\n                \n                if($cnst==\"ort\"){\n                orientConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 1 1 1 0 0 0 0 0 0 1;\n                LNH $grp 1 1 1 0 0 0 0 0 0 1;\n                }\n                \n                if($cnst==\"prnt\"){\n                parentConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n                LNH $grp 0 0 0 0 0 0 0 0 0 1;\n                }\n                \n                if($sclCst== 1){\n                scaleConstraint -mo $cntName[0] $chld[$i];\n                LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n                LNH $grp 0 0 0 0 0 0 0 0 0 1;\n                }else{\n                LNH $cntName[0] 0 0 0 0 0 0 1 1 1 1;\n                LNH $grp 0 0 0 0 0 0 1 1 1 1;\n                }\n                \n                //give parent \n                string $prnt[] =`listRelatives -p $chld[$i]`;\n\n                if(`objExists  ($prnt[0] + \"_Ctrl\")`)\n                {\n                parent $grp1  ($prnt[0] + \"_Ctrl\");\n                }\n                else\n                {\n                parent $grp1 $mnGrp;\n                }\n               \n                \n                }\n            }\n        }\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////   PROXY CONTROLER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc prxCnt(int $Fk)\n{\nstring $sel[]= `ls -sl`;\n\nif ((size($sel)) == 0){\nerror \"Select Object for controller\";\n}\n    else{\n    \n    int $mdVal =`checkBox -q -v negCB`;\n    \n    //find UI info \n    string $axis =`radioCollection -q -sl ax`;\n    int $Nrax[] ={0, 0, 0};\n    if($axis==\"x\"){$Nrax ={1, 0, 0};};\n    if($axis==\"y\"){$Nrax ={0, 1, 0};};\n    if($axis==\"z\"){$Nrax ={0, 0, 1};};\n    string $cnst =`radioCollection -q -sl cnst`;\n    int $sclCst =`checkBox -q -v sclCB`;\n    \n    //create parent group\n    string $mnGrp = `group -em -n ($sel[0] + \"_CtrlGrp\")`;\n    \n        if(`objExists \"Extra_MotionSystem\"`)\n            {parent $mnGrp \"Extra_MotionSystem\";}\n        \n    string $prxMnGrp = `group -em -n (\"Proxy_\" + $sel[0] + \"_CtrlGrp\")`;\n    setAttr ($prxMnGrp + \".visibility\") 0;\n    setAttr -lock true ($prxMnGrp + \".visibility\");\n    \n   \n    for ($each in $sel){\n    \n        string $chld[] = {};\n        if ($Fk == 1)\n        {\n         $chld =`ls -dag $each `;\n        }\n        else\n        {\n        $chld[0] = $each;\n        }\n        \n        \n        for ($i=0;$i<(size($chld));$i++)\n        {\n        \n            string $typ =`nodeType $chld[$i]`;\n            if ($typ == \"transform\" || $typ == \"joint\"){\n            //create contrller shape \n            string $cntName[] =`circle \n                -c 0 0 0 \n                -nr $Nrax[0] $Nrax[1] $Nrax[2] \n                -sw 360 -r 1 -d 3 -ut 0 \n                -tol 0.01 -s 8 -ch 0\n                -n ($chld[$i] + \"_Ctrl\")`;\n                \n            string $grp = `group -em -n ($chld[$i] + \"_OffsetGrp\")`;\n            string $grp1 =`group -em -n ($chld[$i] + \"_PosGrp\")`;\n            \n            parent $cntName[0] $grp;\n            parent $grp $grp1;\n            \n            //proxy setup\n            string $pxCnt[] =`circle \n                -c 0 0 0 \n                -nr $Nrax[0] $Nrax[1] $Nrax[2] \n                -sw 360 -r 1 -d 3 -ut 0 \n                -tol 0.01 -s 8 -ch 0\n                -n (\"Proxy_\" + $chld[$i] + \"_Ctrl\")`;\n                \n            string $pxGrp = `group -em -n (\"Proxy_\" + $chld[$i] + \"_OffsetGrp\")`;\n            string $pxGrp1 =`group -em -n (\"Proxy_\" + $chld[$i] + \"_PosGrp\")`;\n            \n            parent $pxCnt[0] $pxGrp;\n            parent $pxGrp $pxGrp1;\n            \n            //Make Connections\n            connectAttr -f ($cntName[0] + \".translate\") ($pxCnt[0] + \".translate\");\n            connectAttr -f ($cntName[0] + \".rotate\") ($pxCnt[0] + \".rotate\");\n            connectAttr -f ($cntName[0] + \".scale\") ($pxCnt[0] + \".scale\");\n\n            if($mdVal == 0)\n            {\n                connectAttr -f ($grp + \".translate\") ($pxGrp + \".translate\");\n\n            }\n            else\n            {\n                string $revMD =`createNode multiplyDivide -n ($cntName[0] + \"revMD\")`;\n                connectAttr -f ($cntName[0] + \".translate\") ($revMD + \".input1\");\n                setAttr ($revMD + \".input2\") -type \"float3\" -1.0 -1.0 -1.0;\n                connectAttr -f  ($revMD + \".output\") ($grp + \".translate\");\n\n            }\n\n            \n            connectAttr -f ($grp + \".rotate\") ($pxGrp + \".rotate\");\n            connectAttr -f ($grp + \".scale\") ($pxGrp + \".scale\");\n            \n            \n            // position controller\n            float $pos[]=`xform -q -ws -rp$chld[$i]`;\n            float $rot[]=`xform -q -ws -ro $chld[$i]`;\n            \n            xform -ws -t $pos[0] $pos[1] $pos[2] $grp1;\n            xform -ws -ro $rot[0] $rot[1] $rot[2] $grp1;\n            \n            xform -ws -t $pos[0] $pos[1] $pos[2] $pxGrp1;\n            xform -ws -ro $rot[0] $rot[1] $rot[2] $pxGrp1;\n            \n            \n            \n            //Constraint \n            if($cnst==\"pnt\"){\n            pointConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 0 0 0 1 1 1 0 0 0 1;\n            LNH $grp 0 0 0 1 1 1 0 0 0 1;\n            }\n            \n            if($cnst==\"ort\"){\n            orientConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 1 1 1 0 0 0 0 0 0 1;\n            LNH $grp 1 1 1 0 0 0 0 0 0 1;\n            }\n            \n            if($cnst==\"prnt\"){\n            parentConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n            LNH $grp 0 0 0 0 0 0 0 0 0 1;\n            }\n            \n            if($sclCst== 1){\n            scaleConstraint -mo $pxCnt[0] $chld[$i];\n            LNH $cntName[0] 0 0 0 0 0 0 0 0 0 1;\n            LNH $grp 0 0 0 0 0 0 0 0 0 1;\n            }else{\n            LNH $cntName[0] 0 0 0 0 0 0 1 1 1 1;\n            LNH $grp 0 0 0 0 0 0 1 1 1 1;\n            }\n            \n                \n                //give parent \n                string $prnt[] =`listRelatives -p $chld[$i]`;\n\n                if(`objExists  ($prnt[0] + \"_Ctrl\")`)\n                {\n                parent $grp1  ($prnt[0] + \"_Ctrl\");\n                }\n                else\n                {\n                parent $grp1 $mnGrp;\n                }\n                \n                \n                if(`objExists  (\"Proxy_\" + $prnt[0] + \"_Ctrl\")`)\n                {\n                parent $pxGrp1  (\"Proxy_\" + $prnt[0] + \"_Ctrl\");\n                }\n                else\n                {\n                parent $pxGrp1 $prxMnGrp;\n                }\n                \n            }\n\n        }\n        \n  \n    }\n    }\n}\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////    SHAPE REPLACER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc shpRplc ()\n{\n    string $sel[]= `ls -sl`;\n    if ((size($sel)) == 0){\n    error \"Select Target objects & then source object\";\n    }\n    else{\n        int $sz = size($sel)-1;\n        string $grp = `group -em -n (\"TempGrp\" + $sel[$sz])`;\n        string $prntShp[] =`listRelatives -ad -s $sel[$sz] `;\n        parent -add -s $prntShp[0] $grp;\n        \n        for ($i=0;$i<$sz;$i++)\n            {\n            string $dupl[] =`duplicate -renameChildren $grp`;\n            string $nwShp[] =`listRelatives -ad -s$dupl[0] `;\n            \n            string $chld[] =`listRelatives -ad -s $sel[$i] `;\n            parent -add -s $nwShp[0] $sel[$i];\n            \n            for ($each in $chld){if(`objExists $each`){delete $each;}}\n            rename $nwShp[0] ($sel[$i] + \"Shape\");\n            delete $dupl;\n            }\n       delete $grp;\n    }\n}\n\n\n\n//////////////////////////////////////////////////////////////////////\n/////////////////////////   WIRE CONTROLLER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc string cntWire (string $TYPE)\n  {\n  \nstring $return[] ={};\n  switch ($TYPE)\n    {\n    case \"Triangle\" :\n      $return[0] =`curve -d 1 -p -1.03923 0 0.6 -p 1.03923 0 0.6 -p 0 0 -1.2 -p -1.03923 0 0.6 -k 0 -k 1 -k 2 -k 3 -n \"Triangle\" `;\n\tbreak ;\n\t\n    case \"Circle\" :\n      $return =`circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n \"Circle\" `;\n      break ;\t\n\t\n    case \"Square\" :\n      $return[0] =`curve -d 1 -p 1 0 -1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -n \"Square\"` ;\n      break ;\n      \n    case \"FatCross\" :\n      $return[0] =`curve -d 1 -p 2 0 1 -p 2 0 -1 -p 1 0 -1 -p 1 0 -2 -p -1 0 -2 -p -1 0 -1 -p -2 0 -1 -p -2 0 1 -p -1 0 1 -p -1 0 2 -p 1 0 2 -p 1 0 1 -p 2 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -n \"FatCross\" `;\n      break ;      \n      \n    case \"Pyramid\" :\n      $return[0] =`curve -d 1 -p 0 2 0 -p 1 0 -1 -p -1 0 -1 -p 0 2 0 -p -1 0 1 -p 1 0 1 -p 0 2 0 -p 1 0 -1 -p 1 0 1 -p -1 0 1 -p -1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -n \"Pyramid\" `;\n      break ;\n      \n    case \"Cube\" :\n      $return[0] =`curve -d 1 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -n \"Cube\" `;\n      break ; \n           \n    case \"Sphere\" :\n      $return[0] =`curve -d 1 -p 0 0 1 -p 0 0.5 0.866025 -p 0 0.866025 0.5 -p 0 1 0 -p 0 0.866025 -0.5 -p 0 0.5 -0.866025 -p 0 0 -1 -p 0 -0.5 -0.866025 -p 0 -0.866025 -0.5 -p 0 -1 0 -p 0 -0.866025 0.5 -p 0 -0.5 0.866025 -p 0 0 1 -p 0.707107 0 0.707107 -p 1 0 0 -p 0.707107 0 -0.707107 -p 0 0 -1 -p -0.707107 0 -0.707107 -p -1 0 0 -p -0.866025 0.5 0 -p -0.5 0.866025 0 -p 0 1 0 -p 0.5 0.866025 0 -p 0.866025 0.5 0 -p 1 0 0 -p 0.866025 -0.5 0 -p 0.5 -0.866025 0 -p 0 -1 0 -p -0.5 -0.866025 0 -p -0.866025 -0.5 0 -p -1 0 0 -p -0.707107 0 0.707107 -p 0 0 1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n \"Sphere\" `;\n      break ;    \n              \t\n    case \"Cone\":\n\t\t$return[0] =`curve -d 1 -p 0.5 -1 0.866025 -p -0.5 -1 0.866025 -p 0 1 0 -p 0.5 -1 0.866025 -p 1 -1 0 -p 0 1 0 -p 0.5 -1 -0.866025 -p 1 -1 0 -p 0 1 0 -p -0.5 -1 -0.866026 -p 0.5 -1 -0.866025 -p 0 1 0 -p -1 -1 -1.5885e-007 -p -0.5 -1 -0.866026 -p 0 1 0 -p -0.5 -1 0.866025 -p -1 -1 -1.5885e-007 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -n \"Cone\"`;\n\tbreak;\n\n    case \"Rombus\" :\n      $return[0] =`curve -d 1 -p 0 1 0 -p 1 0 0 -p 0 0 1 -p -1 0 0 -p 0 0 -1 -p 0 1 0 -p 0 0 1 -p 0 -1 0 -p 0 0 -1 -p 1 0 0 -p 0 1 0 -p -1 0 0 -p 0 -1 0 -p 1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -n \"Rombus\" `;\n      break ;\n\n    case \"SingleNormal\" :\n      $return[0] =`curve -d 1 -p 0 0 -1.32 -p -0.99 0 0 -p -0.33 0 0 -p -0.33 0 0.99 -p 0.33 0 0.99 -p 0.33 0 0 -p 0.99 0 0 -p 0 0 -1.32 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -n \"SingleNormal\" `;\n      break ;\n\n    case \"FourNormal\" :\n      $return[0] =`curve -d 1 -p 0 0 -1.98 -p -0.495 0 -1.32 -p -0.165 0 -1.32 -p -0.165 0 -0.165 -p -1.32 0 -0.165 -p -1.32 0 -0.495 -p -1.98 0 0 -p -1.32 0 0.495 -p -1.32 0 0.165 -p -0.165 0 0.165 -p -0.165 0 1.32 -p -0.495 0 1.32 -p 0 0 1.98 -p 0.495 0 1.32 -p 0.165 0 1.32 -p 0.165 0 0.165 -p 1.32 0 0.165 -p 1.32 0 0.495 -p 1.98 0 0 -p 1.32 0 -0.495 -p 1.32 0 -0.165 -p 0.165 0 -0.165 -p 0.165 0 -1.32 -p 0.495 0 -1.32 -p 0 0 -1.98 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -n \"FourNormal\" `;\n      break ;\n\n    case \"Dumbell\":\n\t\t$return[0] =`curve -d 1 -p -1.207536 0 0.0254483 -p -1.123549 -0.202763 0.0254483 -p -0.920786 -0.28675 0.0254483 -p -0.718023 -0.202763 0.0254483 -p -0.63504 -0.00242492 0.0254483 -p 0.634091 0 0.0254483 -p 0.718023 -0.202763 0.0254483 -p 0.920786 -0.28675 0.0254483 -p 1.123549 -0.202763 0.0254483 -p 1.207536 0 0.0254483 -p 1.123549 0.202763 0.0254483 -p 0.920786 0.28675 0.0254483 -p 0.718023 0.202763 0.0254483 -p 0.634091 0 0.0254483 -p -0.63504 -0.00242492 0.0254483 -p -0.718023 0.202763 0.0254483 -p -0.920786 0.28675 0.0254483 -p -1.123549 0.202763 0.0254483 -p -1.207536 0 0.0254483 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -n \"Dumbell\"`;\n\tbreak;\n\t\n    case \"ArrowOnBall\" :\n      $return[0] =`curve -d 1 -p 0 0.35 -1.001567 -p -0.336638 0.677886 -0.751175 -p -0.0959835 0.677886 -0.751175 -p -0.0959835 0.850458 -0.500783 -p -0.0959835 0.954001 -0.0987656 -p -0.500783 0.850458 -0.0987656 -p -0.751175 0.677886 -0.0987656 -p -0.751175 0.677886 -0.336638 -p -1.001567 0.35 0 -p -0.751175 0.677886 0.336638 -p -0.751175 0.677886 0.0987656 -p -0.500783 0.850458 0.0987656 -p -0.0959835 0.954001 0.0987656 -p -0.0959835 0.850458 0.500783 -p -0.0959835 0.677886 0.751175 -p -0.336638 0.677886 0.751175 -p 0 0.35 1.001567 -p 0.336638 0.677886 0.751175 -p 0.0959835 0.677886 0.751175 -p 0.0959835 0.850458 0.500783 -p 0.0959835 0.954001 0.0987656 -p 0.500783 0.850458 0.0987656 -p 0.751175 0.677886 0.0987656 -p 0.751175 0.677886 0.336638 -p 1.001567 0.35 0 -p 0.751175 0.677886 -0.336638 -p 0.751175 0.677886 -0.0987656 -p 0.500783 0.850458 -0.0987656 -p 0.0959835 0.954001 -0.0987656 -p 0.0959835 0.850458 -0.500783 -p 0.0959835 0.677886 -0.751175 -p 0.336638 0.677886 -0.751175 -p 0 0.35 -1.001567 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -n \"ArrowOnBall\" `;\n      break ;\n      \n    case \"Pin\" :\n      $return[0] =`curve -d 1 -p 0 0 0 -p 0 1.503334 0 -p -0.079367 1.511676 0 -p -0.155265 1.536337 0 -p -0.224378 1.576239 0 -p -0.283684 1.629638 0 -p -0.330592 1.694201 0 -p -0.363051 1.767106 0 -p -0.379643 1.845166 0 -p -0.379643 1.924971 0 -p -0.363051 2.003031 0 -p -0.330592 2.075936 0 -p -0.283684 2.140499 0 -p -0.224378 2.193898 0 -p -0.155265 2.2338 0 -p -0.079367 2.258461 0 -p 0 2.266803 0 -p 0.079367 2.258461 0 -p 0.155265 2.2338 0 -p 0.224378 2.193898 0 -p 0.283684 2.140499 0 -p 0.330592 2.075936 0 -p 0.363051 2.003031 0 -p 0.379643 1.924971 0 -p 0.379643 1.845166 0 -p 0.363051 1.767106 0 -p 0.330592 1.694201 0 -p 0.283684 1.629638 0 -p 0.224378 1.576239 0 -p 0.155265 1.536337 0 -p 0.079367 1.511676 0 -p 0 1.503334 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31  -n \"pin\" `;\n      break ;\n\t}\nstring $rtrn = $return[0];\n\n    return $rtrn;\n\t\n}\n//////////////////////////////////////////////////////////////////////\n/////////////////////////   WIRE CONTROLLER   ////////////////////////\n//////////////////////////////////////////////////////////////////////\nglobal proc cntWireNw (string $TYPE)\n{\nstring $sel[] = `ls -os -fl `;\n    if(`size $sel` != 0)\n    {\n        string $cnt =`cntWire $TYPE`;\n        select  $sel;\n        select -add $cnt;\n        shpRplc;\n        delete $cnt;\n        select  $sel;\n    }\n    else\n    {\n       cntWire $TYPE;\n       select -cl  ;\n\n    }\n}\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////   Dynamic Setuup   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Copyright (C) 2011-2011 Rahul Gawade, and/or its licensors.\n// All rights reserved.\n//\n// The coded instructions, statements, computer programs, and/or related\n// material (collectively the \"Data\") in these files contain unpublished\n// information proprietary to Rahul Gawade, and/or its licensors,\n// which is protected by Indian federal copyright law and by\n// international treaties.\n// Forr any quarries contact Rahul Gawade at rahulsg2901@gmail.com \n\n//\n//\n//  Creation Date:  06-04-2014\n//\n//  Description:\n//      Add IK/FK dynamic Setup\n//\n\n//  Procedure Name:\n//\t\tdynamicSetup\n//\n//  Lebals:\n//\t\t1. dyna + any string\n//      2. propA any where you wont IK controller & at end of joint\n//\n//  Description:\n//      Add IK/FK dynamic Setup.\n//\n//  Input Arguments:\n//      None.\n//\n//  Return Value:\n//      None.\n//\n\nglobal proc transAtt()\n{\nstring $sel[] =`ls -sl`;\n\n\nif(size($sel) == 2)\n{\nstring $text;\nstring $result = `promptDialog\n    -title \"Rename Object\"\n    -message \"Enter Name:\"\n    -button \"OK\" -button \"Cancel\"\n    -defaultButton \"OK\" -cancelButton \"Cancel\"\n    -dismissString \"Cancel\"`;\n\n\nif ($result == \"OK\") {\n    $text = `promptDialog -query -text`;\n    print $text;\n    if($text != \"\")\n    {\n    int $go = 0;\n    string $lstatt[] =`listAttr -ud $sel[1]`;\n    string $atts[] ={\"Setup\", \"Before\", \"After\", \"Dynamic\", \"Stiffness\", \n    \"Damp\", \"Friction\", \"Gravity\", \"Attract\",\"Flow\", \"Iterations\"}; \n    \n    for ($e in $lstatt)\n    {\n        for($item in $atts)\n        {\n            if($e == $item)\n            {\n            $go +=1;\n            }\n        }\n    }\n    \n    if( size($atts) == $go)\n    {\n    //Add Attr\n    if ((`attrExt $sel[0] $text`) == 0){\n        addAttr -ln $text  -at \"enum\" -en \"Off:On:\"  $sel[0];\n        setAttr -e -lock true -keyable false -cb true ($sel[0] + \".\" + $text);}\n     $text = ($text + \"_\");\n        \n    if ((`attrExt $sel[0] ($text + \"Setup\")`) == 0){\n        addAttr -ln ($text + \"Setup\")  -at \"enum\" -en \"Off:On:\"  $sel[0];\n        setAttr -e -keyable false ($sel[0] + \".\" + $text + \"Setup\");}\n    \n    if ((`attrExt $sel[0] ($text + \"Before\")`) == 0){\n        addAttr -ln ($text + \"Before\")  -at \"enum\" -en \"Off:FK:IK:\"  $sel[0];\n        setAttr -e-keyable false -cb true ($sel[0] + \".\" + $text + \"Before\");}\n    \n    if ((`attrExt $sel[0] ($text + \"After\")`) == 0){\n        addAttr -ln ($text + \"After\")  -at \"enum\" -en \"Off:On:\"  $sel[0];\n        setAttr -e-keyable false -cb true ($sel[0] +  \".\" + $text + \"After\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Dynamic\")`) == 0){\n        addAttr -ln ($text + \"Dynamic\")  -at \"enum\" -en \"Static:Dynamic:\"  $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Dynamic\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Stiffness\")`) == 0){\n        addAttr -ln ($text + \"Stiffness\")  -min 0 -max 1  -at \"double\" -dv 0.15 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Stiffness\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Damp\")`) == 0){\n        addAttr -ln ($text + \"Damp\") -min 0 -max 1  -at \"double\" $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Damp\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Friction\")`) == 0){\n        addAttr -ln ($text + \"Friction\")  -min 0 -max 1  -at \"double\" -dv 0.5 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Friction\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Gravity\")`) == 0){\n        addAttr -ln ($text + \"Gravity\")  -at \"double\" -dv 0.98 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Gravity\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Attract\")`) == 0){\n        addAttr -ln ($text + \"Attract\")  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Attract\");}\n        \n    if ((`attrExt $sel[0] ($text + \"Flow\")`) == 0){\n        addAttr -ln ($text + \"Flow\")  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Flow\");}  \n    \n    if ((`attrExt $sel[0] ($text + \"Iterations\")`) == 0){\n        addAttr -ln ($text + \"Iterations\")  -at \"long\" -min 1 -max 50 -dv 4 $sel[0];\n        setAttr -e-keyable true ($sel[0] + \".\" + $text + \"Iterations\");} \n              \n            \n        for ($e in $atts)\n        {\n        connectAttr -f ($sel[0] + \".\" + $text + $e) ($sel[1] + \".\" + $e);\n        }\n        \n            \n        }\n        else\n        {\n        error \"Attribute not exists\";\n        }\n    }\n    else\n    {\n        error \"Tuz.... naav tak\";    \n    }\n    }\n\n}\nelse\n{\nerror \"select Controller then Parent joint\";\n}\n}\n\nglobal proc addPropA()\n{\n    \n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {\n        for ($each in $sel)\n        {\n        \n            if(`objectType $each` == \"joint\")\n            {\n                if(`getAttr ($each + \".drawLabel\")` != 1)\n                {\n                    setAttr ($each + \".type\") 15;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"\");\n                    setAttr ($each + \".drawLabel\") 1;\n                }\n                else\n                {\n                    setAttr ($each + \".type\") 0;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"\");\n                    setAttr ($each + \".drawLabel\") 0; \n                }\n            }\n        }\n    }\n    else\n    {\n        error \"Tuzse yahi umid thi select Joint first\";\n    }\n}\n\n\n\n\nglobal proc addDyna()\n{\n    \n    string $sel[] =`ls -sl`;\n    if(`size $sel` != 0)\n    {    \n        for ($each in $sel)\n        {\n            if(`objectType $each` == \"joint\")\n            {\n                if(`getAttr ($each + \".drawLabel\")` != 1)\n                {\n                    setAttr ($each + \".type\") 18;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"dyna\" + $each);\n                    setAttr ($each + \".drawLabel\") 1;\n                }\n                else\n                {\n                    setAttr ($each + \".type\") 0;\n                    setAttr -type \"string\" ($each + \".otherType\") (\"\");\n                    setAttr ($each + \".drawLabel\") 0; \n                }\n            }\n        }\n    }\n    else\n    {\n        error \"Tuzse yahi umid thi select Joint first\";\n    }\n}\n\n\n\nglobal proc bakeDyna()\n{\nstring $sets[] =`ls -set \"*HairBakedSet*\"`;\nstring $setObj[] =`sets -q $sets[0]`;\nfloat $start  = `playbackOptions -q -ast`;\nfloat $end  = `playbackOptions -q -aet`;\n\nbakeResults \n    -simulation true \n    -t ($start + \":\" +  $end)\n    -sampleBy 1 \n    -disableImplicitControl true \n    -preserveOutsideKeys true \n    -sparseAnimCurveBake false \n    -removeBakedAttributeFromLayer false \n    -bakeOnOverrideLayer false \n    -controlPoints false \n    -shape true \n    $setObj;\n    \nprint \"Bake successfully\\n\";\n}\n\nglobal proc unbakeDyna()\n{\n    string $sets[] =`ls -set \"*HairBakedSet*\"`;\n    string $setObj[] =`sets -q $sets[0]`;\n    cutKey -time \"-9000:9000\" $setObj; \n\n    for ($obj in $setObj)\n    {\n        string $s1 = `substitute \"aftdyna_\"  $obj \"@#$%^&*!\"`;\n        string $buffer[] = {};\n        $numTokens = `tokenize  $s1 \"@#$%^&*!\"  $buffer`;\n        string $s2 = `substitute \"_grp\"  $buffer[size($buffer)-1] \"\"`;\n        string $conJnt[] =`ls (\"*Dyna_\" + $s2)`;\n        \n        connectAttr -f  ($conJnt[0] + \".rotateX\") ($obj + \".rotateX\");\n        connectAttr -f  ($conJnt[0] + \".rotateY\") ($obj + \".rotateY\");\n        connectAttr -f  ($conJnt[0] + \".rotateZ\") ($obj + \".rotateZ\");\n        connectAttr -f  ($conJnt[0] + \".scaleX\") ($obj + \".scaleX\");\n        \n        \n        string $attr[]=`listAttr -ud $obj`;\n            if($attr[0] == \"transCon\")\n            {\n            connectAttr -f  ($conJnt[0] + \".translateX\") ($obj + \".translateX\");\n            connectAttr -f  ($conJnt[0] + \".translateY\") ($obj + \".translateY\");\n            connectAttr -f  ($conJnt[0] + \".translateZ\") ($obj + \".translateZ\");\n            }\n    }\n    print \"Unbake successfully\\n\";\n}\n\n\n\nglobal proc dynaSetup()\n{\n\nstring $sel[] =`ls -sl`;\nstring $nucl[] ={};\n \nif ((size($sel)) == 0){\n     warning \"select the parent joint.....\";}\nelse{\n//find all dyan lables\nstring $child[] =`listRelatives -ad -c $sel[0]`;\nstring $Dyna[] = {};\nint $no= 0;\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            string $lable =`getAttr ($each + \".otherType\")`;\n            int $types =`getAttr ($each + \".type\")`;\n            int $drawlb =`getAttr ($each + \".drawLabel\")`;\n            \n                    if ((startsWith ($lable, \"dyna\")) == 1 && $types == 18 && $drawlb == 1)\n                    {\n                        setAttr ($each + \".drawLabel\") 0;\n                        $Dyna[$no]=$each;\n                        $no+= 1;\n                    }\n                    \n\n        }\n    }\n    \n\nif ((size($Dyna)) == 0){\n     warning \"No dyna Exist....\";}\nelse{\n\n//Add Attr\nif ((`attrExt $sel[0] \"Setup\"`) == 0){\n    addAttr -ln \"Setup\"  -at \"enum\" -en \"Off:On:\"  $sel[0];\n    setAttr -e -keyable 0 ($sel[0] + \".Setup\");}\n\nif ((`attrExt $sel[0] \"Before\"`) == 0){\n    addAttr -ln \"Before\"  -at \"enum\" -en \"Off:FK:IK:\"  $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Before\");}\n\nif ((`attrExt $sel[0] \"After\"`) == 0){\n    addAttr -ln \"After\"  -at \"enum\" -en \"Off:On:\"  $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".After\");}\n    \nif ((`attrExt $sel[0] \"Dynamic\"`) == 0){\n    addAttr -ln \"Dynamic\"  -at \"enum\" -en \"Static:Dynamic:\"  $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Dynamic\");}\n    \nif ((`attrExt $sel[0] \"Stiffness\"`) == 0){\n    addAttr -ln \"Stiffness\"  -min 0 -max 1  -at \"double\" -dv 0.15 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Stiffness\");}\n    \nif ((`attrExt $sel[0] \"Damp\"`) == 0){\n    addAttr -ln \"Damp\" -min 0 -max 1  -at \"double\" $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Damp\");}\n    \nif ((`attrExt $sel[0] \"Friction\"`) == 0){\n    addAttr -ln \"Friction\"  -min 0 -max 1  -at \"double\" -dv 0.5 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Friction\");}\n    \nif ((`attrExt $sel[0] \"Gravity\"`) == 0){\n    addAttr -ln \"Gravity\"  -at \"double\" -dv 0.98 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Gravity\");}\n    \nif ((`attrExt $sel[0] \"Attract\"`) == 0){\n    addAttr -ln \"Attract\"  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Attract\");}\n    \nif ((`attrExt $sel[0] \"Flow\"`) == 0){\n    addAttr -ln \"Flow\"  -at \"double\" -min 0 -max 1 -dv 0.2 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Flow\");}    \n    \nif ((`attrExt $sel[0] \"Iterations\"`) == 0){\n    addAttr -ln \"Iterations\"  -at \"long\" -min 1 -max 50 -dv 4 $sel[0];\n    setAttr -e-keyable true ($sel[0] + \".Iterations\");}   \n\n\n\n//Veribles\nstring $fkJnts[] = {};\nstring $fkcnt[] = {};\nstring $ikJnts[] = {};\nstring $ikcnt[] = {};\nstring $dynaJnts[] = {};\nstring $dynacnt[] = {};\nstring $bfrJnts[] = {};\nstring $dynaParent[] ={};\n\nfor ($i=0;$i<(size($Dyna));$i++)\n{\nstring $prt[] =`listRelatives -p $Dyna[$i]`;\nparent -w $Dyna[$i];\n$dynaParent[$i] = $prt[0];\n}\n\n//int $j=0;\n\nfor ($j=0;$j<(size($Dyna));$j++)\n{\n\n//create Joints\n$fkJnts = `dupPrifix $Dyna[$j] FK`;\n$ikJnts = `dupPrifix $Dyna[$j] IK`;\n$dynaJnts = `dupPrifix $Dyna[$j] Dyna`;\n$bfrJnts = `dupPrifix $Dyna[$j] Before`;\n\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n    //Fk setup \n    $fkcnt =`fkCtrls $fkJnts[0]`;\n      \n          for ($each in $fkcnt){\n              string $shp[]=`listRelatives -s $each`;\n              setAttr ($shp[0] + \".overrideEnabled\") 1;\n              setAttr ($shp[0] + \".overrideColor\") 6;}\n          \n    string $s1 = `substitute  \"fk_\"  $fkcnt[0] \"\"`;\n    string $s2 = `substitute  \"_Ctrl\" $s1 \"\"`;\n    \n    string $cnd1 = `createNode condition -n ($Dyna[$j] + \"IkCnd\")`;\n    string $cnd2 = `createNode condition -n ($Dyna[$j] + \"FkCnd\")`;\n\n    connectAttr -f ($sel[0] + \".Before\") ($cnd1 + \".firstTerm\");\n    setAttr ($cnd1 + \".secondTerm\") 2;\n    setAttr ($cnd1 + \".colorIfTrueR\") 1;\n    setAttr ($cnd1 + \".colorIfFalseR\") 0;\n\n    connectAttr -f ($sel[0] + \".Before\") ($cnd2 + \".firstTerm\");\n    setAttr ($cnd2 + \".secondTerm\") 1;\n    setAttr ($cnd2 + \".colorIfTrueR\") 1;\n    setAttr ($cnd2 + \".colorIfFalseR\") 0;\n\n    connectAttr -f ($cnd2 + \".outColor.outColorR\") ($s2 + \"_fkCtrls_grp.v\"); \n\n  \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n  \n\n//IK setup    \n\nstring $child[] =`listRelatives -ad -c $ikJnts[0]`;\nstring $ikLbl[] = {};\nint $no= 0;\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            int $types =`getAttr ($each + \".type\")`;\n            int $drawlb =`getAttr ($each + \".drawLabel\")`;\n            \n                    if ($types == 15 && $drawlb == 1)\n                    {      \n                        string $s1 = `substitute \"IK_\" $each \"\"`;  \n                        setAttr ($s1 + \".drawLabel\") 0;               \n                        $ikLbl[$no]=$each;\n                        $no+= 1;\n                    }\n        }\n        \n    \n    }\n\n    //revers array \n    string $ikLblJnt[]= {};\n    int $no = 1;\n    $ikLblJnt[0] =$ikJnts[0];\n\n        for ($i=((size($ikLbl))-1);$i>=0;$i--)\n        {\n        $ikLblJnt[$no] =$ikLbl[$i];\n        $no += 1;\n        }\n    int $sizeIkjnt = size ($ikJnts); \n        \n        if ((`size($ikLblJnt)`) <= 1)\n        {\n           \n               $ikLblJnt[0] =$ikJnts[0];\n               \n               //center of joint \n               int $center = ($sizeIkjnt * 0.5);\n               $ikLblJnt[1] =$ikJnts[$center];\n               \n               \n               $ikLblJnt[2] =$ikJnts[($sizeIkjnt - 1)]; \n               \n        }\n\n\n\n    //create IK curve\n    float $pos[] =`xform -q -ws -rp $ikLblJnt[0]`;\n    string $crv =`curve  -d 2 -p $pos[0] $pos[1] $pos[2] -n ($Dyna[$j] + \"_IK_Curve\")`;\n     \n              for ($i=1;$i<(size($ikLblJnt));$i++)\n              {\n                 float $pos[] =`xform -q -ws -rp $ikLblJnt[$i]`;\n                 curve  -a -d 2 -p $pos[0] $pos[1] $pos[2] $crv;\n              }\n              \n\n    //Create Controllers\n    string $parentGrp =`group -em -n ($Dyna[$j] + \"_IkCtlrs_grp\")`; \n    string $clstrList[] = {};\n              \n              for ($i=0;$i<(size($ikLblJnt));$i++)\n              {\n                  string $Box =`curve \n                                    -d 1 -p -0.5 0.5 -0.5 \n                                    -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 \n                                    -p 0.5 0.5 -0.5 -p 0.5 -0.5 -0.5 \n                                    -p -0.5 -0.5 -0.5 -p -0.5 0.5 -0.5 \n                                    -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 \n                                    -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 \n                                    -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 \n                                    -p 0.5 -0.5 0.5 -p 0.5 0.5 0.5 \n                                    -p -0.5 0.5 0.5 -p -0.5 -0.5 0.5 \n                                    -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 \n                                    -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 \n                                    -k 12 -k 13 -k 14 -k 15 -k 16\n                                    -n ($Dyna[$j] + \"_IK_\" + $i + \"_Ctrl\")`;\n                                    \n                \n                string $grp =`group -em -n ($Box + \"_grp\")`; \n            \n                parent $Box $grp;\n                                    \n                string $clst[] =`cluster  -n ($Dyna[$j] + \"_IK_Cluster\" + $i)  ($Dyna[$j] + \"_IK_Curve.cv[\" + $i + \"]\")`;\n                \n                float $pos[] =`xform -q -ws -rp $clst[1]`;\n                float $rot[] =`xform -q -ws -ro $clst[1]`;\n                \n                xform -ws -t  $pos[0] $pos[1] $pos[2] $grp;\n                xform -ws -ro $rot[0] $rot[1] $rot[2] $grp;\n\n\n                parentConstraint $Box $clst[1];\n                LNH $Box 0 0 0 1 1 1 1 1 1 1;\n                parent $grp $parentGrp;\n                \n                $ikcnt[$i] = $Box;\n                $clstrList[$i] = $clst[0];\n              }\n              \n              connectAttr -f ($cnd1 + \".outColor.outColorR\") ($parentGrp + \".v\"); \n              string $ikGrp =`group -em -n ($Dyna[$j] + \"_IkExtra_grp\")`; \n\n\n                     \n        int $sz = size($ikLblJnt);\n        string $ikHd[]=` ikHandle \n        -sol ikSplineSolver \n        -ccv false \n        -pcv false \n        -sj $ikLblJnt[0] \n        -ee $ikLblJnt[($sz - 1)] \n        -c $crv\n        -n ($Dyna[$j] + \"_BefoerIK_\" + $i)`;\n \n            for ($each in $clstrList)\n                parent ($each + \"Handle\") $ikGrp;\n            \n            parent  $crv $ikGrp;\n            parent  $ikHd[0] $ikGrp;\n \n           for ($each in $ikcnt){\n              string $shp[]=`listRelatives -s $each`;\n              setAttr ($shp[0] + \".overrideEnabled\") 1;\n              setAttr ($shp[0] + \".overrideColor\") 17;}\n \n //Make Stretch\n          stretchSpine $ikJnts $ikHd[0] $crv $sel[0] $ikcnt[0]; \n\n \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n       \n    //before setup\n    \n       string $cnd3 = `createNode condition -n ($Dyna[$j] + \"_cnstCnd\")`;\n    setAttr ($cnd3 + \".secondTerm\") 2;\n    setAttr ($cnd3 + \".operation\") 0;\n    setAttr ($cnd3 + \".colorIfTrueR\") 0;\n    setAttr ($cnd3 + \".colorIfFalseR\") 1;\n    \n    connectAttr -f ($sel[0] + \".Before\") ($cnd3 + \".firstTerm\") ;\n    \n        for ($i=0;$i<(size($bfrJnts));$i++)\n        {\n            \n            string $cnst[] =`parentConstraint $fkJnts[$i] $ikJnts[$i] $bfrJnts[$i] `;\n\n            connectAttr -f ($cnd1 + \".outColor.outColorR\") ($cnst[0] + \".\" + $ikJnts[$i] + \"W1\");\n            connectAttr -f ($cnd3 + \".outColor.outColorR\") ($cnst[0] + \".\" + $fkJnts[$i] + \"W0\");\n\n       }\n \n \n \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\n    //after setup\n    $dynacnt=`aftCtrls $Dyna[$j]`;\n    string $aftgrp =`group -em -n (\"after_\" + $Dyna[$j] + \"_Ctrl_grp\")`; \n    connectAttr ($sel[0] + \".After\") ($aftgrp + \".v\");\n\n        for ($each in $dynacnt)\n        {\n            \n            string $s1 = `substitute  \"aft_\" $each \"\"`;\n            string $s2 = `substitute  \"_Ctrl\" $s1 \"\"`;\n\n            parent (\"aftparent_\" + $s2 + \"_grp\")  $aftgrp;\n        }\n        \n             for ($each in $dynacnt){\n              string $shp[]=`listRelatives -s $each`;\n              setAttr ($shp[0] + \".overrideEnabled\") 1;\n              setAttr ($shp[0] + \".overrideColor\") 13;}\n       \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\n    //Dynamic setup\n    //List all chind joints\n    string $child[] =`listRelatives -ad -c $dynaJnts[0]`;\n    $child[((size($child)))] = $dynaJnts[0];\n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n\n\n    //create base curve\n    float $pos[] =`xform -q -ws -rp $list[0]`;\n    string $crv =`curve  -d 3 -p $pos[0] $pos[1] $pos[2] -n ($Dyna[$j] + \"_Base_Curve\")`;\n                 for ($i=1;$i<(size($list));$i++)\n              {\n                 float $pos[] =`xform -q -ws -rp $list[$i]`;\n                 curve  -a -d 3 -p $pos[0] $pos[1] $pos[2] $crv;\n              }\n              \n     //Make base curve Dynamic\n     select -cl  ;\n     select  $crv ;\n     //makeCurvesDynamicHairs 1 0 1;\n     makeCurvesDynamic 2 { \"1\", \"0\", \"1\", \"1\", \"0\"};\n     select -cl  ;\n     \n     \n     \n     //Find connected Hair System\n     string $shape[] =`listRelatives -ad -s $crv`;\n     string $folicle[] =`listConnections   $shape[0]`;\n     string $folicleShp[] =`listRelatives -ad -s $folicle[1]`;\n     string $hairSysShp[] =`listConnections -sh 1 $folicleShp[0]`;\n     string $hairSys[] =`listRelatives -ad -p $hairSysShp[2]`;\n     string $dynaCrv[] =`listRelatives -ad -p $hairSysShp[4]`;\n     setAttr ($hairSysShp[2] + \".active\") 0;\n\n\n     $nucl =`listConnections ($hairSysShp[2] + \".startState\")`;\n\n\n\n     string $hairSysGrp =`group -em -n ($Dyna[$j] + \"_HairSystem_grp\")`; \n     \n    parent $hairSys[0] $folicle[1] $crv $dynaCrv[0] $hairSysGrp;\n    rename $dynaCrv[0] ($Dyna[$j] + \"_Dynamic_crv\");\n    \n    delete ($hairSys[0] + \"Follicles\");\n    delete ($hairSys[0] + \"OutputCurves\");\n    \n    setAttr ($folicleShp[0] + \".pointLock\") 1;\n\n     \n    int $size =size( $dynaJnts );\n    \n    string $ikHlds[]=` ikHandle \n        -sol ikSplineSolver \n        -ccv false \n        -pcv false \n        -sj $dynaJnts[0] \n        -ee $dynaJnts[($size - 1)] \n        -c ($Dyna[$j] + \"_Dynamic_crv\")`;\n\n         \n            parent  $crv $ikGrp;\n            parent  $ikHlds[0] $ikGrp;\n\n    //Make stretchy\n\n     stretchSpine $dynaJnts $ikHlds[0] $crv $sel[0] $ikcnt[0];\n\n    for ($i=0;$i<($size - 1);$i++)\n    {\n    \n    string $s1 = `substitute  \"Dyna_\" $list[$i] \"\"`;\n    if(`objExists (\"FK_\" + $s1 + \"_Ctrl\")`)\n    {\n    connectAttr -f (\"FK_\" + $s1 + \"_Ctrl.rotateX\") (\"aftdyna_\" + $s1 + \"_grp.rotateX\");\n    }\n    //connectAttr -f ($dynaJnts[$i] + \".rotateX\") (\"aftdyna_\" + $s1 + \"_grp.rotateX\");\n    connectAttr -f ($dynaJnts[$i] + \".rotateY\") (\"aftdyna_\" + $s1 + \"_grp.rotateY\");\n    connectAttr -f ($dynaJnts[$i] + \".rotateZ\") (\"aftdyna_\" + $s1 + \"_grp.rotateZ\");\n    connectAttr -f ($dynaJnts[$i] + \".scaleX\") (\"aftdyna_\" + $s1 + \"_grp.scaleX\");\n   \n    }\n    \n    connectAttr -f ($dynaJnts[0] + \".translateX\") (\"aftdyna_\" + $Dyna[$j] + \"_grp.translateX\");\n    connectAttr -f ($dynaJnts[0] + \".translateY\") (\"aftdyna_\" + $Dyna[$j] + \"_grp.translateY\");\n    connectAttr -f ($dynaJnts[0] + \".translateZ\") (\"aftdyna_\" + $Dyna[$j] + \"_grp.translateZ\");\n \n\n    string $hrShp[] =`listRelatives -s $hairSys[0]`;\n    connectAttr -f ($sel[0] + \".Stiffness\") ($hrShp[0] + \".stiffness\");\n    connectAttr -f ($sel[0] + \".Damp\") ($hrShp[0] + \".damp\");\n    connectAttr -f ($sel[0] + \".Friction\") ($hrShp[0] + \".friction\");\n    connectAttr -f ($sel[0] + \".Gravity\") ($hrShp[0] + \".gravity\");\n    connectAttr -f ($sel[0] + \".Attract\") ($hrShp[0] + \".startCurveAttract\");\n    connectAttr -f ($sel[0] + \".Flow\") ($hrShp[0] + \".attractionScale[1].attractionScale_FloatValue\");\n    connectAttr -f ($sel[0] + \".Iterations\") ($hrShp[0] + \".iterations\");\n    \n \n    setDrivenKeyframe -cd ($sel[0] + \".Dynamic\") -dv 0 -v 1 ($hrShp[0] + \".simulationMethod\");\n    setDrivenKeyframe -cd ($sel[0] + \".Dynamic\") -dv 1 -v 3 ($hrShp[0] + \".simulationMethod\");\n    setAttr -l 1 ($hrShp[0] + \".simulationMethod\");\n    \n    customPrifix $hairSys[0] $Dyna[$j];\n    customPrifix $folicle[1] $Dyna[$j];\n    customPrifix $ikHlds[0] $Dyna[$j];\n    customPrifix $ikHlds[1] $Dyna[$j];    \n        \n\nstring $sknClst[] =`skinCluster -dr 4.0 -tsb  $bfrJnts[0] ($Dyna[$j] + \"_Base_Curve\")`;\n\n    for ($s=1;$s<(size($bfrJnts));$s++)\n    {      \n    skinCluster -e -ai $bfrJnts[$s] $sknClst[0];        \n    }\n       \n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++// \nstring $ctrlGrp =`group -em -n ($Dyna[$j] + \"_Controllers_grp\")`; \nstring $stupGrp =`group -em -n ($Dyna[$j] + \"_Setup_grp\")`; \nstring $sclGrp =`group -em -n ($Dyna[$j] + \"_scale_grp\")`; \n\n\nfloat $dynaPos[] =`xform -q -ws -t $dynaJnts[0]`;\nfloat $dynaRot[] =`xform -q -ws -ro $dynaJnts[0]`;\n\nstring $RGJnt =`joint -p $dynaPos[0] $dynaPos[1] $dynaPos[2] -n (\"Extra\" + $dynaJnts[0])`;\nxform -ws -ro $dynaRot[0] $dynaRot[1] $dynaRot[2] $RGJnt;\nmakeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $RGJnt;\nparent $dynaJnts[0] $RGJnt;\nparentConstraint -mo $dynaParent[$j] $RGJnt;\n\nparent (\"after_\" + $Dyna[$j] + \"_Ctrl_grp\") ($Dyna[$j] + \"_IkCtlrs_grp\") (\"FK_\" + $Dyna[$j] + \"_fkCtrls_grp\") $ctrlGrp;\nparentConstraint -mo $dynaParent[$j] $ctrlGrp;\n\nparent  $hairSysGrp $ikGrp $stupGrp;\nparent $fkJnts[0] $ikJnts[0] $bfrJnts[0]  $sclGrp;\n\nconnectAttr  -f ($sel[0] + \".Setup\") ($stupGrp + \".v\");\n\nif (!`objExists \"HairBakedSet\"`){\n    string $set =`sets -em -name \"HairBakedSet\"`;\n            for ($each in $dynacnt){\n            \n            string $prnt[]= `listRelatives -p $each`;\n            string $grndprnt[]= `listRelatives -p $prnt[0]`;\n            sets -e  -add $set $grndprnt;\n            \n            }\n        }\n    else{\n            for ($each in $dynacnt){\n            \n                string $prnt[]= `listRelatives -p $each`;\n                string $grndprnt[]= `listRelatives -p $prnt[0]`;\n                sets -e  -in \"HairBakedSet\" $grndprnt;\n                \n            }\n    }\n\n\n\n\n\n// For scale\nparent $sclGrp $stupGrp;\nscaleConstraint -mo $sel[0] $ctrlGrp;\nscaleConstraint -mo $sel[0] $sclGrp;\n}\n\nstring $mnStupGrp;    \nstring $mnCtrlGrp;\n\n\nif (!`objExists \"DynaControllers_grp\"`){\n    $mnCtrlGrp =`group -em -n \"DynaControllers_grp\"`; }\n\nif (!`objExists \"DynaSetup_grp\"`){\n    $mnStupGrp =`group -em -n \"DynaSetup_grp\"`; }\n\nfor ($i=0;$i<(size($Dyna));$i++)\n{\nparent $Dyna[$i] $dynaParent[$i];\nparent ($Dyna[$i] + \"_Controllers_grp\") DynaControllers_grp;\nparent ($Dyna[$i] + \"_Setup_grp\") DynaSetup_grp;\n \n\nselect -cl;\nprint \"// Result 1\";\n\n\n//For Scale\n\nstring $allJnt[] =`ls -dag -type \"joint\" $sel[0]`;\n\nfor ($j=0;$j<(size($allJnt));$j++)\n{\n\nstring $cons =`connectionInfo -sfd ($allJnt[$j] + \".inverseScale\")`;\n\n    if($cons != \"\")\n    {\n    disconnectAttr $cons ($allJnt[$j] + \".inverseScale\");\n    }\n    \n}\n\n\n}\n}\n}\nint $cb=`checkBox -q -v Ncb`;\nif ($cb!=1)\n{\n    delete $nucl;\n}\n\n};\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n//\n//                       Extra procedures\n//\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] dupPrifix (string $joint, string $prefix )\n{  \n    //get child joints\n    string $child[] =`listRelatives -ad -c $joint`;\n    $child[((size($child)))] = $joint;\n    string $newjnt[] = {};\n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n    \n \n    //duplicate joint with prefix\n       string $dup[] =` duplicate  -rc $joint`;\n\n       int $count = 0;\n            for ($i=0;$i<(size($dup));$i++)\n            {\n                rename $dup[$i] ($prefix + \"_\" + $list[$i]);\n                $newjnt[$count] = ($prefix + \"_\" + $list[$i]);\n                $count += 1;\n                \n            }  \n            \n     return $newjnt;\n};\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] customPrifix (string $joint,string $prefix )\n{  \n    //get child joints\n    string $child[] =`listRelatives -ad -c $joint`;\n    $child[((size($child)))] = $joint;\n    string $newjnt[] = {};\n\n        int $count = 0;\n            for ($i=0;$i<(size($child));$i++)\n            {\n                rename $child[$i] ($prefix + \"_\" + $child[$i]);\n                $newjnt[$count] = ($prefix + \"_\" + $child[$i]);\n                $count += 1;\n                \n            }  \n            \n     return $newjnt;\n};\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] fkCtrls (string $joint)\n{\nstring $ctrls[] = {};\nint $count = 0;\nstring $child[] =`listRelatives -ad -c $joint`;\n$child[((size($child)))] = $joint;\nstring $newjnt[] = {};\n    \n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n    \n        string $fkGrp =`group -em -n ($joint + \"_fkCtrls_grp\")`; \n\n        //constriant jont with new controler\n        for ($i=0;$i<((size($list)-1 ));$i++)\n        {\n           string $fkctrl[]= `circle \n               -c 0 0 0 -nr 1 0 0 \n               -sw 360 -r 1 -d 3 \n               -ut 0 -tol 0.01 \n               -s 8 -ch 0 \n               -n ($list[$i] + \"_Ctrl\")`;\n           string $grp1 =`group -em -n (\"fkExtra_\" + $list[$i] + \"_grp\")`; \n           string $grp2 =`group -em -n (\"fkparent_\" + $list[$i] + \"_grp\")`; \n        \n           parent $fkctrl[0] $grp1;\n           parent $grp1 $grp2;\n           \n           float $pos[] =`xform -q -ws -rp $list[$i]`;\n           float $rot[] =`xform -q -ws -ro $list[$i]`;\n           \n           xform -ws -t $pos[0] $pos[1] $pos[2] $grp2;\n           xform -ws -ro $rot[0] $rot[1] $rot[2] $grp2;\n        \n           parentConstraint -mo $fkctrl[0] $list[$i];\n           \n           LNH $fkctrl[0] 0 0 0 0 0 0 1 1 1 1;\n           LNH $grp1   0 0 0 0 0 0 1 1 1 1;\n           \n           parent $grp2 $fkGrp;\n           \n           $ctrls[$count] = $fkctrl[0];\n           $count += 1;\n        }\n\n\n        // make fk hierachy\n        for ($i=1;$i<((size($ctrls)));$i++)\n        {            \n            parentConstraint -mo $ctrls[($i - 1)] (\"fkparent_\" + $list[$i] + \"_grp\") ;\n        }\n        \n  return $ctrls;\n\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc string[] aftCtrls (string $joint)\n{ \n\nstring $ctrls[] = {};\nint $count = 0;\nstring $child[] =`listRelatives -ad -c $joint`;\n$child[((size($child)))] = $joint;\nstring $newjnt[] = {};\n    \n    //revers array \n    string $list[]= {};\n    int $no = 0;\n        for ($i=((size($child))-1);$i>=0;$i--)\n        {\n        $list[$no] =$child[$i];\n        $no += 1;\n        }\n    \n    \n        //constriant jont with new controler\n        for ($i=0;$i<((size($list)-1 ));$i++)\n        {\n\n           string $aftctrl[]= `circle \n               -c 0 0 0 -nr 1 0 0 \n               -sw 360 -r 1 -d 1 \n               -ut 0 -tol 0.01 \n               -s 4 -ch 0 \n               -n (\"aft_\" + $list[$i] + \"_Ctrl\")`;\n               \n           xform -ws -ro -45 0 0 $aftctrl[0];\n           makeIdentity -apply 1 -r 1 $aftctrl[0];\n\n           string $grp1 =`group -em -n (\"aftExtra_\" + $list[$i] + \"_grp\")`; \n           string $grp2 =`group -em -n (\"aftparent_\" + $list[$i] + \"_grp\")`; \n           string $grp3 =`group -em -n (\"aftdyna_\" + $list[$i] + \"_grp\")`; \n\n\n           if($i == 0)\n           {\n            addAttr -ln \"transCon\"  -at bool  $grp3;\n            setAttr -e -keyable false -lock true ($grp3 + \".transCon\");\n           }\n           \n        \n           parent $aftctrl[0] $grp1;\n           parent $grp1 $grp3;\n           parent $grp3 $grp2;\n           \n           float $pos[] =`xform -q -ws -rp $list[$i]`;\n           float $rot[] =`xform -q -ws -ro $list[$i]`;\n           \n           xform -ws -t $pos[0] $pos[1] $pos[2] $grp2;\n           xform -ws -ro $rot[0] $rot[1] $rot[2] $grp2;\n        \n           parentConstraint -mo $aftctrl[0] $list[$i];\n           \n           \n          LNH $aftctrl[0] 0 0 0 0 0 0 1 1 1 1;\n          LNH $grp1 0 0 0 0 0 0 1 1 1 1;\n\n            \n           $ctrls[$count] = $aftctrl[0];\n           $count += 1;\n        }\n\n\n        // make fk hierachy\n        for ($i=1;$i<(size($ctrls));$i++)\n        {\n            parentConstraint -mo (\"aft_\" + $list[($i-1)] + \"_Ctrl\") (\"aftparent_\" + $list[$i] + \"_grp\");\n            \n        }\n        \n   \n    \n  return $ctrls;\n\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc stretchSpine (string $jnt[],string $ikHandle, string $crv,string $glCrv, string $attrCrv )\n{\nint $attExt = 1;\nstring $Attr[] = `listAttr -k $attrCrv`;\n    for ($arbt in $Attr)\n    {\n        if ($arbt == \"Stretchy\" || $arbt == \"stretchy\" )\n        {\n        $attExt = 0;\n        }\n        \n    }\n    \n    if ($attExt == 1)\n    {\n        addAttr -ln \"Stretchy\"  -at \"enum\" -en \"Off:On:\" $attrCrv ;\n        setAttr -e-keyable true ($attrCrv  + \".Stretchy\");\n    }\n\n\n\nstring $cvrInfo =`arclen -ch 1 $crv`;\n\nstring $cnd =`createNode condition -n ($jnt[0] + \"_Schy\")`;\n\nconnectAttr -f ($attrCrv + \".Stretchy\") ($cnd + \".firstTerm\");\nsetAttr ($cnd + \".secondTerm\") 1;\nsetAttr ($cnd + \".operation\") 0;\nconnectAttr -f ($cvrInfo + \".arcLength\") ($cnd + \".colorIfTrueR\");\nfloat $arc = `getAttr ($cvrInfo + \".arcLength\")`;\n\n\nstring $glMd =`createNode multiplyDivide -n ($jnt[0] + \"_glMD\")`;\n\n    if(!`objExists \"SRT\"`)\n    {\n        connectAttr -f ($glCrv  + \".scaleX\") ($glMd + \".input1X\");\n    }\n    else\n    {\n        connectAttr -f (\"SRT.scaleX\") ($glMd + \".input1X\");\n    }\nsetAttr ($glMd + \".operation\") 1;\nsetAttr ($glMd + \".input2X\") $arc;\nconnectAttr -f ($glMd  + \".outputX\") ($cnd + \".colorIfFalseR\");\n\nstring $md =`createNode multiplyDivide -n ($jnt[0] + \"_MD\")`;\nsetAttr ($md+ \".operation\") 2;\n\nconnectAttr -f ($cnd + \".outColorR\") ($md + \".input1X\");\nconnectAttr -f ($glMd + \".outputX\") ($md + \".input2X\");\n\n\n        for ($each in $jnt)\n            connectAttr -f ($md + \".outputX\") ($each  + \".scaleX\");\n\n\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc int attrExt (string $obj, string $attr)\n{\nstring $allAttr[] =`listAttr -ud $obj`;\nint $go = 0;\nfor ($each in $allAttr)\n\nif ($each == $attr)\n    {\n        $go = 1;\n    }\n    \n    \n    return $go;\n}\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc int  LNH (string $obj,int $tx,int $ty,int $tz,int $rx,int $ry,int $rz,int $sx,int $sy,int $sz,int $v)\n{\nint $attrVal[];\n$attrVal[0] =$tx;$attrVal[1] =$ty;$attrVal[2] =$tz;\n$attrVal[3] =$rx;$attrVal[4] =$ry;$attrVal[5] =$rz;\n$attrVal[6] =$sx;$attrVal[7] =$sy;$attrVal[8] =$sz;\n$attrVal[9] =$v;\nint $keyVal;\nstring $attrs[] ={\"tx\",\"ty\",\"tz\",\"rx\",\"ry\",\"rz\",\"sx\",\"sy\",\"sz\",\"v\"};\n\n    for ($i=0;$i<(size($attrs));$i++)\n    {\n        if ($attrVal[$i] == 0)\n            $keyVal = 1;\n            \n        if ($attrVal[$i] == 1)\n            $keyVal = 0;\n            \n            \n    setAttr -lock $attrVal[$i] -keyable $keyVal ($obj +  \".\" + $attrs[$i]);\n    }\n\n    return 1;\n}\n\n\n//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//\n\nglobal proc rmDynaSetup ()\n{\nstring $sel[] =`ls -sl`; \nif ((size($sel)) == 0){\n     warning \"select the parent joint.....\";}\nelse{\n//find all dyan lables\nstring $child[] =`listRelatives -ad -c $sel[0]`;\nstring $Dyna[] = {};\nstring $ikLbl[] = {};\nint $no= 0;\n\n    //List Dyna joints\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            string $lable =`getAttr ($each + \".otherType\")`;\n            int $types =`getAttr ($each + \".type\")`;\n            \n                    if ((startsWith ($lable, \"dyna\")) == 1 && $types == 18)\n                    {\n                        setAttr ($each + \".drawLabel\") 0;\n                        $Dyna[$no]=$each;\n                        $no+= 1;\n                    }\n                    \n\n        }\n    }\n$no= 0;\n\n    //List PropA joints\n    for ($each in $child)\n    {\n     \n       if ((`objectType $each`) == \"joint\")\n        {\n            int $types =`getAttr ($each + \".type\")`;\n            \n                    if ($types == 15)\n                    {      \n                        string $s1 = `substitute \"IK_\" $each \"\"`;  \n                        setAttr ($s1 + \".drawLabel\") 0;               \n                        $ikLbl[$no]=$each;\n                        $no+= 1;\n                    }\n        }\n        \n    \n    }\n\n\n\nif ((size($Dyna)) == 0){\n    \n         string $lable =`getAttr ($sel[0] + \".otherType\")`;\n         int $types =`getAttr ($sel[0] + \".type\")`;\n         \n                    if ((startsWith ($lable, \"dyna\")) == 1 && $types == 18){\n                        $Dyna[0]=$sel[0]; }\n                    }\n\nif ((size($Dyna)) == 0){\n    warning \"There is no Dyna.....\";}\nelse{\n//Delete Setup\nfor ($each in $Dyna)\n{    \n    setAttr ($each + \".drawLabel\") 1;\n    delete -cn $each;\n    \n    if (`objExists ($each + \"_Controllers_grp\")`)\n        delete ($each + \"_Controllers_grp\");\n\n    if (`objExists ($each + \"_Setup_grp\")`)\n        delete ($each + \"_Setup_grp\");\n \n}\n    \n//Restore lable\nfor ($e in  $ikLbl)\n    setAttr ($e + \".drawLabel\") 1;\n    \nstring $child[] =`listRelatives -c \"DynaControllers_grp\"`;\nif ((size($child)) == 0)\n    delete \"DynaControllers_grp\";\n    \n    \nstring $child[] =`listRelatives -c \"DynaSetup_grp\"`;\nif ((size($child)) == 0)\n    delete \"DynaSetup_grp\";\n    \n    }        \n    }\n};\nglobal proc CN()\n{\n    string $ctl[]=`ls -sl`;\n    addAttr -ln \"StartFrame\" -k 1 -at \"long\" -dv 1 $ctl[0];\n    connectAttr -f ($ctl[0] + \".StartFrame\") \"nucleus1.startFrame\";\n} \n\n\n////////////////////\n// About\n// \n//////////////////////////////////////////\nproc gLocknHideAbout()\n{\nstring $win = \"gLocknHideAbout\";\nif (`window -exists $win`) deleteUI -window $win;\nwindow -title \"About gLock 'n Hide\" -minimizeButton false -maximizeButton false -rtf true -wh 200 10 $win;\n\ncolumnLayout -adjustableColumn true -columnAttach \"both\" 5;\n\tseparator -height 10 -st none;\n\ttext -label \"About\" -fn \"boldLabelFont\" -align \"center\";\n\tseparator -height 10 -w 100;\n\ttext -label \"gLock 'n Hide Version 2.1\" -align \"center\";\n\tseparator -height 5 -st none;\n\ttext -label \"Javier \\\"Goosh\\\" Solsona\" -align \"center\";\n    \ttext -label \"jsolsona@digital-dreams.net\" -align \"center\";\n\ttext -label \"Copyright ? 2003\" -align \"center\";\n\ttext -label \"All Rights Reserved\" -align \"center\";\n\tseparator -height 15 -st none;\n\tbutton -label \"Ok\" -w 50 -c (\"deleteUI \" + $win);\nshowWindow $win;\n}\n\n////////////////////\n// How to Use\n// \n//////////////////////////////////////////\nproc gLocknHideHowtoUse()\n{\nstring $win = \"gLocknHideHow\";\nif (`window -exists $win`) deleteUI -window $win;\nwindow -title \"How to Use gLock 'n Hide\" -minimizeButton false -maximizeButton false -rtf true -wh 200 10 $win;\ncolumnLayout -adjustableColumn true -columnAttach \"both\" 5;\n\tseparator -height 10 -st none;\n    \ttext -label \"How to use\" -fn \"boldLabelFont\" -align \"center\";\n\tseparator -height 10 -w 100;\n\ttext -label \"Select object(s).\"  -align \"center\";\n\ttext -label \"Select the checkboxes for the attributes that you want to modify.\" -align \"center\";\n\ttext -label \"Press one of the buttons to Lock, Hide, UnHide, etc\";\n\tseparator -height 15 -st none;\n\tbutton -label \"Ok\" -w 50 -c (\"deleteUI \" + $win);\nshowWindow $win;\n}\n\n////////////////////\n// Select All Translations\n// Turns the Select All Translations checkbox on or off\n//////////////////////////////////////////\n\nglobal proc SelectAllTrans()\n{\nstring $selectAllTrans = `checkBox -q -value allTrans`;\nstring $selectAllRots = `checkBox -q -value allRots`;\nstring $selectAllScs = `checkBox -q -value allScs`;\nstring $vis = `checkBox -q -value vis`;\n\nif ($selectAllTrans)\n{\n\tcheckBox -e -v true transX;\n\tcheckBox -e -v true transY;\n\tcheckBox -e -v true transZ;\n}\nif ($selectAllTrans == 0)\n{\n\tcheckBox -e -v false transX;\n\tcheckBox -e -v false transY;\n\tcheckBox -e -v false transZ;\n\tcheckBox -e -v false SelectDeselect;\n}\n\n// If everything is on, turn the SelectAll Checkbox on\nif (($selectAllTrans) && ($selectAllRots) && ($selectAllScs) && ($vis))\n\tcheckBox -e -v true SelectDeselect;\n}\n\n\n////////////////////\n// Select All Rotations\n// Turns the Select All Rotations checkbox on or off\n///////////////////////////\n\nglobal proc SelectAllRots()\n{\nstring $selectAllTrans = `checkBox -q -value allTrans`;\nstring $selectAllRots = `checkBox -q -value allRots`;\nstring $selectAllScs = `checkBox -q -value allScs`;\nstring $vis = `checkBox -q -value vis`;\n\nif ($selectAllRots)\n{\n\tcheckBox -e -v true rotX;\n\tcheckBox -e -v true rotY;\n\tcheckBox -e -v true rotZ;\n}\nelse\n{\n\tcheckBox -e -v false rotX;\n\tcheckBox -e -v false rotY;\n\tcheckBox -e -v false rotZ;\n\tcheckBox -e -v false SelectDeselect;\n}\n\n// If everything is on, turn the SelectAll Checkbox on\nif (($selectAllTrans) && ($selectAllRots) && ($selectAllScs) && ($vis))\n\tcheckBox -e -v true SelectDeselect;\n}\n\n\n///////////////////\n// Select All Scales\n// Turns the Select All Scales checkbox on or off\n/////////////////////////////////////\n\nglobal proc SelectAllScs()\n{\nstring $selectAllTrans = `checkBox -q -value allTrans`;\nstring $selectAllRots = `checkBox -q -value allRots`;\nstring $selectAllScs = `checkBox -q -value allScs`;\nstring $vis = `checkBox -q -value vis`;\n\nif ($selectAllScs)\n{\n\tcheckBox -e -v true scX;\n\tcheckBox -e -v true scY;\n\tcheckBox -e -v true scZ;\n}\nelse\n{\n\tcheckBox -e -v false scX;\n\tcheckBox -e -v false scY;\n\tcheckBox -e -v false scZ;\n\tcheckBox -e -v false SelectDeselect;\n}\n\n// If everything is on, turn the SelectAll Checkbox on\nif (($selectAllTrans) && ($selectAllRots) && ($selectAllScs) && ($vis))\n\tcheckBox -e -v true SelectDeselect;\n}\n\n\n////////////////////////\n// Select Deselect All\n// Turns all the checkboxes on or off\n//////////////////////////////////////////\n\nglobal proc SelectDeselectAll()\n{\nstring $SelectDeselect = `checkBox -q -value SelectDeselect`;\n\nif ($SelectDeselect)\n{\n\tcheckBox -e -v true transX;\n\tcheckBox -e -v true transY;\n\tcheckBox -e -v true transZ;\n\tcheckBox -e -v true allTrans;\n\tcheckBox -e -v true rotX;\n\tcheckBox -e -v true rotY;\n\tcheckBox -e -v true rotZ;\n\tcheckBox -e -v true allRots;\n\tcheckBox -e -v true scX;\n\tcheckBox -e -v true scY;\n\tcheckBox -e -v true scZ;\n\tcheckBox -e -v true allScs;\n\tcheckBox -e -v true vis;\n}\nelse\n{\n\tcheckBox -e -v false transX;\n\tcheckBox -e -v false transY;\n\tcheckBox -e -v false transZ;\n\tcheckBox -e -v false allTrans;\n\tcheckBox -e -v false rotX;\n\tcheckBox -e -v false rotY;\n\tcheckBox -e -v false rotZ;\n\tcheckBox -e -v false allRots;\n\tcheckBox -e -v false scX;\n\tcheckBox -e -v false scY;\n\tcheckBox -e -v false scZ;\n\tcheckBox -e -v false allScs;\n\tcheckBox -e -v false vis;\n}\n}\n\n\n///////////////////\n// UnLock Attributes\n// Locks or UnLocks Attributes depending on the status of the checkboxes\n//////////////////////////////\n\n// $all used for when the unlock all button is pressed\n// $trueFalse used for lock or unlock\n// $hideAttrs used to check if it's supposed to hide the attributes too. Used for Lock and Hide button\n// $unHide used so that it unhides the attributes when you unlock them.\nglobal proc lockAttributes(int $all, int $trueFalse, int $hideAttrs, int $unHide)\n{\nstring $selectedObjects[] = `ls -sl`;\nstring $transX = `checkBox -q -value transX`;\nstring $transY = `checkBox -q -value transY`;\nstring $transZ = `checkBox -q -value transZ`;\nstring $rotX = `checkBox -q -value rotX`;\nstring $rotY = `checkBox -q -value rotY`;\nstring $rotZ = `checkBox -q -value rotZ`;\nstring $scX = `checkBox -q -value scX`;\nstring $scY = `checkBox -q -value scY`;\nstring $scZ = `checkBox -q -value scZ`;\nstring $vis = `checkBox -q -value vis`;\nstring $attrs[]={\".tx\",\".ty\",\".tz\",\".rx\",\".ry\",\".rz\",\".sx\",\".sy\",\".sz\",\".v\"};\nstring $attrs2[]={$transX,$transY,$transZ,$rotX,$rotY,$rotZ,$scX,$scY,$scZ,$vis}; \n\nfor ($obj in $selectedObjects)\n{\n\tfor ($x=0;$x<size($attrs);$x++)\n\t{\n\t\tif (($attrs2[$x]) || ($all))\t\t\t\t// checks what attributes are selected or if the button for \"all\" has been pressed\n\t\t{\t\t\t\t\t\t\t\n\t\t\tsetAttr -lock $trueFalse ($obj+$attrs[$x]);\t// sets the attribute to lock or unlock depending on $trueFalse\n\t\t\tif ($unHide)\t\t\t\t\t// checks if it's supposed to unhide the attribute too\n\t\t\t\tsetAttr -keyable true ($obj+$attrs[$x]);\n\t\t}\n\t\tif (($attrs2[$x]) && ($hideAttrs))\t\t\t// checks if it's supposed to hide the attributes too. from Lock 'n Hide button\n\t\t\tsetAttr -keyable false ($obj+$attrs[$x]);\n\t}\n}\n}\n\n\n////////////////////\n// Hide Selected\n// Hides the Attributes that are selected so that they cannot be keyed\n///////////////////////////////////////\n\n// $all used for when the unlock all button is pressed\n// $trueFalse used for lock or unlock\nglobal proc HideAttributes(int $all, int $trueFalse)\n{\nstring $selectedObjects[] = `ls -sl`;\nstring $transX = `checkBox -q -value transX`;\nstring $transY = `checkBox -q -value transY`;\nstring $transZ = `checkBox -q -value transZ`;\nstring $rotX = `checkBox -q -value rotX`;\nstring $rotY = `checkBox -q -value rotY`;\nstring $rotZ = `checkBox -q -value rotZ`;\nstring $scX = `checkBox -q -value scX`;\nstring $scY = `checkBox -q -value scY`;\nstring $scZ = `checkBox -q -value scZ`;\nstring $vis = `checkBox -q -value vis`;\nstring $attrs[]={\".tx\",\".ty\",\".tz\",\".rx\",\".ry\",\".rz\",\".sx\",\".sy\",\".sz\",\".v\"};\nstring $attrs2[]={$transX,$transY,$transZ,$rotX,$rotY,$rotZ,$scX,$scY,$scZ,$vis}; \n\nfor ($obj in $selectedObjects)\n{\n\tfor ($x=0;$x<size($attrs);$x++)\n\t{\n\t\tif (($attrs2[$x]) || ($all))\t\t\t\t// if the attribute is on or the all button was hit\n\t\t\tsetAttr -k $trueFalse ($obj+$attrs[$x]);\t// set the attribute to true of false depending on $trueFalse\n\t}\n}\n}\n\n\n//////////////////////\n// UnCheck \n// Turns the AllTranslations checkbox on or off\n///////////////////////////////////\n\nglobal proc unCheck(string $checkBoxes)\n{\nstring $transX = `checkBox -q -value transX`;\nstring $transY = `checkBox -q -value transY`;\nstring $transZ = `checkBox -q -value transZ`;\nstring $rotX = `checkBox -q -value rotX`;\nstring $rotY = `checkBox -q -value rotY`;\nstring $rotZ = `checkBox -q -value rotZ`;\nstring $scX = `checkBox -q -value scX`;\nstring $scY = `checkBox -q -value scY`;\nstring $scZ = `checkBox -q -value scZ`;\nstring $vis = `checkBox -q -value vis`;\n\nswitch ($checkBoxes)\n{\n\tcase \"trans\":\n\t\tif (($transX == 0) || ($transY == 0) || ($transZ == 0))\n\t\t{\n\t\t\tcheckBox -e -v false allTrans;\n\t\t\tcheckBox -e -v false SelectDeselect;\n\t\t}\n\t\tif ($transX && $transY && $transZ)\n\t\t\tcheckBox -e -v true allTrans;\n\t\tif ($transX && $transY && $transZ && $rotX && $rotY && $rotZ && $scX && $scY && $scZ && $vis)\n\t\t\tcheckBox -e -v true SelectDeselect;\n\tbreak;\n\n\tcase \"rot\":\n\t\tif (($rotX == 0) || ($rotY == 0) || ($rotZ == 0))\n\t\t{\n\t\t\tcheckBox -e -v false allRots;\n\t\t\tcheckBox -e -v false SelectDeselect;\n\t\t}\n\t\tif ($rotX && $rotY && $rotZ)\n\t\t\tcheckBox -e -v true allRots;\n\t\tif ($transX && $transY && $transZ && $rotX && $rotY && $rotZ && $scX && $scY && $scZ && $vis)\n\t\t\tcheckBox -e -v true SelectDeselect;\n\tbreak;\n\n\tcase \"sc\":\n\t\tif (($scX == 0) || ($scY == 0) || ($scZ == 0))\n\t\t{\n\t\t\tcheckBox -e -v false allScs;\n\t\t\tcheckBox -e -v false SelectDeselect;\n\t\t}\n\t\tif ($scX && $scY && $scZ)\n\t\t\tcheckBox -e -v true allScs;\n\t\tif ($transX && $transY && $transZ && $rotX && $rotY && $rotZ && $scX && $scY && $scZ && $vis)\n\t\t\tcheckBox -e -v true SelectDeselect;\n\n\tcase \"vis\":\n\tif ($vis == 0)\n\t{\n\t\tcheckBox -e -v false SelectDeselect;\n\t}\n\tif ($transX && $transY && $transZ && $rotX && $rotY && $rotZ && $scX && $scY && $scZ && $vis)\n\t\tcheckBox -e -v true SelectDeselect;\n\tbreak;\n}\n}\n/////////////////////////////////////////JOINT SHOW AND HIDE/////////////////////////////////////////////////////////\nglobal proc jointsShow(string $jntFun)\n{\n    \nif ($jntFun == \"selectAllJoint\")\n{\n \n\nSelectAllJoints;\nprint \"-------selectedAllJoint------------\";\n\n}\n\nif ($jntFun == \"showAllJoint\")\n\n{\nSelectAllJoints;\nstring $sel[] =`ls - sl`;\nstring $ech_jnt;\n\nfor ($ech_jnt in $sel){\n       setAttr($ech_jnt+\".drawStyle\") 0;\n       //turning on all joints\n}\nprint \"---------showedAllJoint-----------\";\n\n\n}\n\nif ($jntFun == \"hideAllJoint\")\n{\nSelectAllJoints;\nstring $selr[] =`ls - sl`;\nstring $ech_jnt;\n\nfor ($ech_jnt in $selr){\n       setAttr($ech_jnt+\".drawStyle\") 2;\n}\nprint \"--------hidenAllJoint-----------\";    \n\n}  \n    \n}\n\n//////////////////////////////////////Mirror Ctrl ///////////////////////////////////////////////////\nglobal proc mirrorCtrl()\n{\nstring $ctrls[];\nint $type;\n$type = 1;\n\nif($type == 1)\n{\n$ctrls = `ls-sl`;\n}\nif($type == 2)\n{\nselect -cl;\nselect -r \"LT_*_CtrI\";\n$ctrls = `ls-sl`;\n}\nif($type == 3)\n{\nselect -cl;\nselect -r \"RT_*_CtrI\";\n$ctrls =  `ls-s1`;\n}\n\nfor($ctrl in $ctrls){\n\nif($ctrl == \"\") continue;\nstring $shapes[] = `listRelatives -shapes $ctrl`;\nif ($shapes[0] == \"\") continue;\n$objType = `objectType $shapes[0]` ;\nif ($objType!=\"nurbsCurve\") continue;\n\n//finding whether the controller is left or right....\n\nstring $tmpArray[];\nstring $side;\nstring $mirrorSide;\ntokenize $ctrl \"_\" $tmpArray;\nif(($tmpArray[0]!= \"LT\")&&($tmpArray[0] != \"RT\"))\n{\nprint \"Please Select Left or Right Controllers\";\ncontinue;\n}\nif($tmpArray[0] == \"LT\") {$side = \"LT_\"; $mirrorSide = \"RT_\";}\nif($tmpArray[0] == \"RT\") {$side = \"RT_\"; $mirrorSide = \"LT_\";}\n\n//find out the opposit controller...\n\n$mirrorCtrl = `substitute $side $ctrl $mirrorSide`; \nif(!`objExists $mirrorCtrl`) continue;\n$mirrorShapes = ` listRelatives -shapes $mirrorCtrl`; \nif(!`objExists $mirrorShapes[0]`) continue;\nfor($i=0; $i<`size($shapes)` ; $i++)\n{\n$form=`getAttr ($shapes[$i]+\".form\")`;\n$spans=`getAttr ($shapes[$i]+\".spans\")`; \n$degrees=`getAttr ($shapes[$i]+\".degree\")`; \nif ($form==2)\n$numCv=$spans;\nelse\n$numCv=$spans+$degrees;\nfor ($y=0;$y<$numCv+1;$y++)\n{\n$pos=`xform -q -ws -t ($shapes[$i]+\".cv[\"+$y+\"]\")`;\nif ($y==0) $z=2; \nif ($y==1) $z=3; \nif ($y==2) $z=0; \nif ($y==3) $z=1; \nif ($y==4) $z=2; \nif(!`objExists $mirrorShapes[$i]`) continue;\nxform -ws -t (-1*$pos[0]) $pos[1] $pos[2] ($mirrorShapes[$i]+\".cv[\"+$y+\"]\"); \n}\n}\n}\nselect -cl;\n}\n\n//_\n\n////////////////////////////////////////// dkSkinWrap ///////////////////////////////////////////////////////\nglobal proc dkSkinWrap()\n{\n    string $sel[] = `ls -sl`;\n    if (`size($sel)` == 2)\n    {\n        string $influence[] = `skinCluster -q -inf $sel[0]`; \n        string $skin = `findRelatedSkinCluster ($sel[1])`;\n\n        if ($skin == \"\")\n        {\n        select $influence $sel[1];\n        //newSkinCluster \"-toSelectedBones -bindMethod 0 -normalizeWeights 1 -weightDistribution 0 -mi 5 -dr 10 -rui false,multipleBindPose,1\"; \n        SmoothBindSkin;\n        string $tarInf[] = `skinCluster -q -inf $sel[1]`;\n        string $missing[] = stringArrayRemove($tarInf, $influence);\n            if ($missing[0] != \"\")\n            {\n            select $missing $sel[1];\n            skinClusterInfuluence 1 \" -dr 10 -lw true -wt 0\";\n            print \"Skin binded successfullly and missing influence added\";\n            } \n            else\n            {\n                print \"Skin binded successfullly\";\n            }\n        } \n        else\n        {\n            string $tarl[] = ` skinCluster -q -inf $sel[1]` ;\n            string $miss[] = stringArrayRemove($tarl, $influence); \n            if ($miss[0] != \"\")\n            {\n                select $miss $sel[1];\n                skinClusterInfluence 1 \" -dr 10 -lw true -wt 0\"; \n                print \"Missing influences added\";\n            } \n            else\n            {\n                print (\"All the influences of \" + $sel[0] + \" are present in \" + $sel[1]);\n            }\n        }\n    } \n    else\n    {\n        warning \"Please make a valid selection\";\n    }\n}\n\n////////////////////////////////// Set ////////////////////////////////////////////////////\nglobal proc aset()\n{\nif (`objExists (\"AnimSet\")`)\n        {\n            jtErr(\"Already AnimSet in the file\");\n        }\nelse {\n            $createSetResult = `sets -name AnimSet`;\n            select -cl;\n    }\n\n}\n\nglobal proc aaset()\n{\nstring $selection[]=`ls -selection` ;\nfor ($n=0; $n<size($selection);$n++)\n{\n    sets -edit -forceElement AnimSet $selection[$n] ;\n} \n}\n\nglobal proc rset() \n{\n\nif (` objExists (\"RenderSet\")` )\n        {\n                 jtErr(\"Already RenderSet in the file\");\n        }\nelse {\n/*\n        $createSetResult = `sets -name BodySet`; \n        $createSetResult = ` sets -name EyeSee ;\n        $createSetResult = ` sets -name TeethSet`;\n        select -r -ne BodySet EyeSet TeethSet ; \n*/\n        $createSetResult = `sets -name RenderSet` ;\n        select -cl;\n    }\n\n}\nglobal proc bset()\n{\nstring $selection[]=`ls -selection` ;\nfor ($n=0; $n<size($selection);$n++)\n{\nsets -edit -forceElement RenderSet $selection[$n] ;\n} \n}\n \nglobal proc cset()\n{\nif (`objExists (\"CacheSet\")`)\n        {\n            jtErr(\"Already CacheSet in the file\");\n        }\nelse {\n            $createSetResult = `sets -name CacheSet`;\n            select -cl;\n    }\n\n}\n        \nglobal proc ccset()\n{\nstring $selection[]=`ls -selection` ;\n for ($n=0; $n<size($selection);$n++)\n {\n   sets -edit -forceElement CacheSet $selection[$n] ;\n }\n}\n\n\n/////////////////////////// tBsConnections /////////////////////////////////\n\nglobal proc tBsConnections()\n\n{ \n  string $cReturn[];\n  int $count = 0;\n  string $selectBS[] = `ls -sl`;\n\n  // List All Weights of selected BS!!\n  string $bAttr[] = `listAttr -m ($selectBS[0] + \".w\")`;\n\n  for ($bs in $bAttr)\n  {\n     if (`connectionInfo -id ($selectBS[0]+\".\"+$bs)`) \n     {\n        string $connection = `connectionInfo -sfd ($selectBS[0]+\".\"+$bs)` ; \n        if(`objExists ($selectBS[1]+\".\"+$bs)`){\n          connectAttr -f $connection ($selectBS[1]+\".\"+$bs);\n          disconnectAttr $connection ($selectBS[0]+\".\"+$bs);\n        }\n        else\n        {\n            $cReturn[$count] = $bs; \n            $count++;\n        }\n        }\n     }\n  print (\"\\n\\n\\n ?      Can`t Transfer Those Attribute Connections!!  >> \\n\\n\");\n  if (`size($cReturn)`){\n     for($bs in $cReturn){ print ($bs+\"\\n\");}\n     }\n}\n//////////////////////////// tBsConnections  End /////////////////////////////////\n\n//////////////////////////////////////////////////// rivet ///////////////////////////////////////////\n\nglobal proc string rivet ( )\n{\n\nstring $nameObject;\nstring $namePOSI;\n\nstring $parts[];\nstring $list[] = `filterExpand -sm 32`;\nint $size = size($list);\nif ($size > 0)\n{\n\tif ($size != 2)\n\t{\terror(\"No two edges selected\");\n\t\treturn \"\";\n\t}\n\n\ttokenize($list[0],\".\",$parts);\n\t$nameObject = $parts[0];\n\ttokenize($list[0],\"[]\",$parts);\n\tfloat $e1 = $parts[1];\n\ttokenize($list[1],\"[]\",$parts);\n\tfloat $e2 = $parts[1];\n\n\tstring $nameCFME1 = `createNode curveFromMeshEdge -n \"rivetCurveFromMeshEdge1\"`;\n\t\tsetAttr \".ihi\" 1;\n\t\tsetAttr \".ei[0]\"  $e1;\n\tstring $nameCFME2 = `createNode curveFromMeshEdge -n \"rivetCurveFromMeshEdge2\"`;\n\t\tsetAttr \".ihi\" 1;\n\t\tsetAttr \".ei[0]\"  $e2;\n\tstring $nameLoft = `createNode loft -n \"rivetLoft1\"`;\n\t\tsetAttr -s 2 \".ic\";\n\t\tsetAttr \".u\" yes;\n\t\tsetAttr \".rsn\" yes;\n\n\t$namePOSI = `createNode pointOnSurfaceInfo -n \"rivetPointOnSurfaceInfo1\"`;\n\t\tsetAttr \".turnOnPercentage\" 1;\n\t\tsetAttr \".parameterU\" 0.5;\n\t\tsetAttr \".parameterV\" 0.5;\n\n\tconnectAttr -f ($nameLoft + \".os\") ($namePOSI + \".is\");\n\tconnectAttr ($nameCFME1 + \".oc\") ($nameLoft + \".ic[0]\");\n\tconnectAttr ($nameCFME2 + \".oc\") ($nameLoft + \".ic[1]\");\n\tconnectAttr ($nameObject + \".w\") ($nameCFME1 + \".im\");\n\tconnectAttr ($nameObject + \".w\") ($nameCFME2 + \".im\");\n}\nelse\n{\t$list = `filterExpand -sm 41`;\n\t$size = size($list);\n\n\tif ($size > 0)\n\t{\n\t\tif ($size != 1)\n\t\t{\terror(\"No one point selected\");\n\t\t\treturn \"\";\n\t\t}\n\t\ttokenize($list[0],\".\",$parts);\n\t\t$nameObject = $parts[0];\n\t\ttokenize($list[0],\"[]\",$parts);\n\t\tfloat $u = $parts[1];\n\t\tfloat $v = $parts[2];\n\t\t$namePOSI = `createNode pointOnSurfaceInfo -n \"rivetPointOnSurfaceInfo1\"`;\n\t\t\t\tsetAttr \".turnOnPercentage\" 0;\n\t\t\t\tsetAttr \".parameterU\" $u;\n\t\t\t\tsetAttr \".parameterV\" $v;\n\t\tconnectAttr -f ($nameObject + \".ws\") ($namePOSI + \".is\");\n\t}\n\telse\n\t{\terror(\"No edges or point selected\");\n\t\treturn \"\";\n\t}\n}\n\nstring $nameLocator = `createNode transform -n \"rivet1\"`;\ncreateNode locator -n ($nameLocator + \"Shape\") -p $nameLocator;\n\nstring $nameAC = `createNode aimConstraint -p $nameLocator -n ($nameLocator + \"_rivetAimConstraint1\")`;\n\tsetAttr \".tg[0].tw\" 1;\n\tsetAttr \".a\" -type \"double3\" 0 1 0;\n\tsetAttr \".u\" -type \"double3\" 0 0 1;\n\tsetAttr -k off \".v\";\n\tsetAttr -k off \".tx\";\n\tsetAttr -k off \".ty\";\n\tsetAttr -k off \".tz\";\n\tsetAttr -k off \".rx\";\n\tsetAttr -k off \".ry\";\n\tsetAttr -k off \".rz\";\n\tsetAttr -k off \".sx\";\n\tsetAttr -k off \".sy\";\n\tsetAttr -k off \".sz\";\n\nconnectAttr ($namePOSI + \".position\") ($nameLocator + \".translate\");\nconnectAttr ($namePOSI + \".n\") ($nameAC + \".tg[0].tt\");\nconnectAttr ($namePOSI + \".tv\") ($nameAC + \".wu\");\nconnectAttr ($nameAC + \".crx\") ($nameLocator + \".rx\");\nconnectAttr ($nameAC + \".cry\") ($nameLocator + \".ry\");\nconnectAttr ($nameAC + \".crz\") ($nameLocator + \".rz\");\n\nselect -r $nameLocator;\nreturn ($nameLocator);\n\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////Script Name: skinXfer.mel v1.5///////////////////////////////////////////////////\n\nglobal proc skinXfer ()\n{\n\t\t\n\tif(`window -ex skinXferWin`) deleteUI skinXferWin;\t\t\n\t\n\tstring $window = `window -title \"SkinWeight Xfer UI\"\n    \t-iconName \"Skin Xfer\"\n    \t-widthHeight 300 150 skinXferWin`;\n\t\n\tstring $form = `formLayout -numberOfDivisions 100`;\n\tbutton -label \"Source Object\" -command \"getObject (\\\"sourceField\\\")\" sourceBn;\n    textField -editable false sourceField;\n    \t\n    button -label \"Target Object\" -command \"getObject (\\\"targetField\\\")\" targetBn;\n    textField -editable false targetField;\n\t\t\n\tcheckBox  -label \"use Maya copySkinWeights\" -v 1 useMaya;\n\tcheckBox  -label \"interpolate weight\" -v 1 interpolateWeight;\n\t\t\n\tbutton -label \"Xfer Weight\" -h 30 -command \"skinXferCB\" xferBn;\n\t\n\tformLayout -edit\n\n   \t-af     sourceBn     \"top\"    15\n   \t-af     sourceBn    \"left\"   10\n   \t-ac     sourceBn    \"right\"   5 sourceField\n   \t\n   \t-af     sourceField     \"top\"    15\n   \t-af     sourceField    \"left\"   100\n   \t-af\t\tsourceField \t\"right\" 5\n   \t\n   \t-af     targetBn     \"top\"    40\n   \t-af     targetBn    \"left\"   10\n   \t-ac     targetBn    \"right\"   5 targetField\n   \t\n   \t-af     targetField     \"top\"    40\n   \t-af     targetField    \"left\"   100\n   \t-af\t\ttargetField \t\"right\" 5\n\t\n\t-af     useMaya     \"top\"    70\n   \t-af     useMaya    \"left\"   60\n\t\n\t-af     interpolateWeight     \"top\"    90\n   \t-af     interpolateWeight\t \"left\"   60\n   \t\n\t\n\t-af     xferBn     \"top\"    110\n   \t-af     xferBn    \"left\"   40\n   \t-af     xferBn    \"right\"   40\n    \t\n    \t$form;\n\t\t\n\tshowWindow $window;\t\n\t\t\n}\n\nglobal proc skinXferCB ()\n{\n\tstring $source = `textField -q -tx sourceField`;\t\n\tstring $target = `textField -q -tx targetField`;\t\n\tif ($source == $target) error \"Source object and target object are same!!!\";\n\tstring $historytarget[] = `listHistory $target`;\n\t\n\tskinXferCmd ($source, $target);\n\n//\tif(`window -ex skinXferWin`) deleteUI skinXferWin;\n\t\t\t\n}\n\nglobal proc getObject (string $field)\n{\n\tstring $sel[] = `ls -sl`;\n\tif (size($sel)>1) error \"Please select one source object\";\n\ttextField -e -tx $sel [0] $field;\t\n}\n\n\nglobal proc int skinXferCmd (string $source, string $target)\n{\n\tif(!`pluginInfo -query -loaded nearestPointOnMesh`)\n\teval(`loadPlugin -quiet nearestPointOnMesh`);\n     \t\t\n\t$CH = `constructionHistory -q -tgl`;\n\tif( $CH > 0) constructionHistory -tgl off;\n\n// Make sure unit is set to cm or closestPointOnMesh won't work\t\n\tchangeLinearUnit \"cm\";\n\n\tint $sourcevertcount[] = `polyEvaluate -v $source`;\n\tint $sourcefacecount[] = `polyEvaluate -f $source`;\n\tint $targetvertcount[] = `polyEvaluate -v $target`;\n\tstring $historysource[] = `listHistory $source`;\n\tstring $historytarget[] = `listHistory $target`;\n\tstring $sourceclusterList[]= `ls -type skinCluster $historysource`;\n\tstring $sourcejoint[] = `skinCluster -q -wi $sourceclusterList[0]`;\n\tstring $targetclusterList[]= `ls -type skinCluster $historytarget`;\n\tstring $targetjoint[] = `ls -type joint $historytarget`;\n\tfloat $dropOff = `getAttr ($sourceclusterList[0] + \".dropoffRate\")`;\n\t\n\tstring $tagetShape[] = `listRelatives -s $target`;\n\tstring $ans, $msg;\n\t\n\tif (size ($targetclusterList)>0)\n\t{\t\t\n\t\t $msg = (\"Target \" + $target + \" is already bound!!!\\n\");\n\t\t $msg += \"Detach skincluster from \" + $target + \"?\";\n\t\t \n\t\t $ans = `confirmDialog -title \"Confirm\" -message $msg\n    \t\t-button \"Yes\" -defaultButton \"Yes\" -button \"No\"\n    \t\t-cancelButton \"No\" -dismissString \"No\"`;   \t\t    \t\t\n\t}\n\tif ($ans == \"Yes\") skinCluster -e  -ub $tagetShape[0];\n\tif ($ans == \"No\") error \"Cancelled...\";\n\n\tint $test;\n\tstring $cluster;\n\tstring $pointSelect;\n\tfloat $delta[];\n\tfloat $store;\n\tvector $w[];\t\n\tfloat $targetweightA[];\n\tfloat $targetweightB[];\n\tfloat $targetweightC[];\n\tfloat $targetweightD[];\n\tfloat $finalweight[];\n\tfloat $sumdelta;\n\tint $flag;\n\tint $matchpointindex ;\n\tfloat $pointdist[];\n\tstring $tmpStrng;\n\n\t\n// \tmake new skincluster on target have same influence joint as source:\n\t\t\n\tint $maxinfluence = `skinCluster -q -mi $sourceclusterList[0]`;\n\n\tselect -r $sourcejoint;\n\tselect -add $target;\n\t\n\tstring $targetclusterList[]= `createSkinCluster (\"-toSelectedBones -mi \" + $maxinfluence + \" -dr \" +$dropOff)`;\n\tstring $historytarget[] = `listHistory $target`;\n\tstring $targetjoint[] = `ls -type joint $historytarget`;\n\t\n// use Maya method\n\tif (`checkBox -q -v useMaya`)\n\t{\n\t\tif (`checkBox -q -v interpolateWeight`) copySkinWeights -ss $sourceclusterList[0] -ds $targetclusterList[0] -nm -sm;\n\t\telse copySkinWeights -ss $sourceclusterList[0] -ds $targetclusterList[0] -nm;\n\t\treturn 1;\n\t}\n\n\t\twaitCursor -state 1;\n\n// progesss bar\t\t\n\t\tglobal string $gMainProgressBar;\n\t\t progressBar -edit\n\t    \t-beginProgress\n\t    \t-isInterruptable false\n\t    \t-status \"Transfering Weihgts...\"\n\t    \t-maxValue $targetvertcount[0]\n\t    \t$gMainProgressBar;\n    \t    \t\t\nfor ($i = 0;$i<$targetvertcount[0];$i++) \n\t\t{\n\t\tstring $targetPointSelect=$target + \".vtx[\" + $i +\"]\";\n\t\tfloat $v[] = `xform -q -ws -t $targetPointSelect`;\n\t\tvector $positionTarget = <<$v[0],$v[1],$v[2]>>;\n      \t\tfloat $result[] = eval(\"closestPointOnMesh -ip \" + ($positionTarget.x) + \" \"+ ($positionTarget.y) + \" \"+ ($positionTarget.z) + \"-q -p -f \" + $source);\n      \t\tvector $closepoint = <<$result[0], $result[1], $result[2]>>;    \t\t\n      \t\tstring $sourceface = $source + \".f[\" + $result[3] + \"]\";\n         \tselect -r $sourceface;\n     \t\t$temp = eval (\"polyListComponentConversion -tv \");\n\t\tselect -r $temp;\n\t\t$sourcepoint= eval (\"filterExpand -sm 31\");\n\n//\tcalculate max distance, take into accout of special case when target point = source point\n\n\t\tfloat $MaxDist=0;\t\n\t\t\tfor ($j = 0; $j < size ($sourcepoint); $j++)\n\t\t\t{\n\t\t\t\tfloat $u[] = `xform -q -ws -t $sourcepoint[$j]`;\n\t\t\t\t$w[$j]=<<$u[0],$u[1],$u[2]>>;\n\t\t\t\t$pointdist[$j] = mag($w[$j]-$closepoint);\n\t\t\t\t$flag = 1;\n\t\t\t\tif ($pointdist[$j] == 0 )\n\t\t\t\t{\n\t\t\t\t\t$flag = 0;\n\t\t\t\t\t$matchpointindex  =$j;\n\t\t\t\t\t$j = size ($sourcepoint);\n\t\t\t\t}\n\t\t\t\telse if ($MaxDist<$pointdist[$j])\n\t\t\t\t{\t\t\t\t\t\t\t\t\n\t\t\t\t\t$MaxDist=$pointdist[$j];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\n\n// \tcalculate delta and sumdelta\n\n\t\tif ($flag == 1)\n\t\t{\n\t\t\t$sumdelta=0;\t\n\t\t\t\n\t\t\tfor ($j = 0; $j < size($sourcepoint); $j++)\n\t\t\t{\n\n\t\t\t\t$delta[$j] = $MaxDist/$pointdist[$j];\n\t\t\t\t$sumdelta=$sumdelta+$delta[$j];\n\t\t\t}\n\t\t\t\n\t\t\n// \tinitialize target weight to 0\n\n\t\t\n\t\t\tfor ($j = 0; $j < size ($sourcepoint); $j++)\n\t\t\t{\n\t\t\t\t$delta[$j] = $delta[$j]/$sumdelta;\n\t\t\t}\n\t\t\t\t\n\t\t\tfor ($k = 0; $k < size ($sourcejoint); $k++)\n\t\t\t{\n\t\t\t\t$targetweightA[$k] = 0;\t\n\t\t\t\t$targetweightB[$k] = 0;\t\n\t\t\t\t$targetweightC[$k] = 0;\t\n\t\t\t\t$targetweightD[$k] = 0;\t\n\t\t\t}\n\n// loop thru the 3 or 4 vertices to get their contribution of weights on all joints\n\t\t\t\n\t\t\tfor ($k = 0; $k < size ($sourcejoint); $k++)\n\t\t\t{\n\t\t\t\tfloat $tempweight = `skinPercent -t $sourcejoint[$k] -q $sourceclusterList[0] $sourcepoint[0]`;\n\t\t\t\t$targetweightA[$k] = $targetweightA[$k]+ $delta[0]* $tempweight;\n\t\t\t}\n\t\t\t\t\n\t\t\tfor ($k = 0; $k < size ($sourcejoint); $k++)\n\t\t\t{\n\t\t\t\tfloat $tempweight = `skinPercent -t $sourcejoint[$k] -q $sourceclusterList[0] $sourcepoint[1]`;\n\t\t\t\t$targetweightB[$k] = $targetweightB[$k]+ $delta[1]* $tempweight;\n\t\t\t}\n\t\t\t\t\n\t\t\tfor ($k = 0; $k < size ($sourcejoint); $k++)\n\t\t\t{\n\t\t\t\tfloat $tempweight = `skinPercent -t $sourcejoint[$k] -q $sourceclusterList[0] $sourcepoint[2]`;\n\t\t\t\t$targetweightC[$k] = $targetweightC[$k]+ $delta[2]* $tempweight;\n\t\t\t}\n\t\t\t\t\n\t\t\tif (size ($sourcepoint) > 3)\n\t\t\t{\n\t\t\t\tfor ($k = 0; $k < size ($sourcejoint); $k++)\n\t\t\t\t{\n\t\t\t\t\tfloat $tempweight = `skinPercent -t $sourcejoint[$k] -q $sourceclusterList[0] $sourcepoint[3]`;\n\t\t\t\t\t$targetweightD[$k] = $targetweightD[$k]+ $delta[3]* $tempweight;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n// shove total weight contributions from all vertices into one skinPercent command\n\n\t\t\t$tmpStrng = \"\";\n\t\t\t\t\n\t\t\tfor ($k = 0; $k < size ($sourcejoint); $k++)\n\t\t\t{\n\t\t\t\t$finalweight[$k] = $targetweightA[$k] + $targetweightB[$k] + $targetweightC[$k];\n\t\t\t\tif (size ($sourcepoint) > 3)\n\t\t\t\t{\n\t\t\t\t\t$finalweight[$k] = $finalweight[$k] + $targetweightD[$k];\n\t\t\t\t}\n\t\t\t\t$tmpStrng = $tmpStrng + \" -tv \\\"\" + $sourcejoint[$k] + \"\\\" \" + $finalweight[$k];\n\t\t\t}\n\t\t\t\t\t\n\t\t\t\t$tmpStrng = \"skinPercent \" + $tmpStrng + \" \\\"\" + $targetclusterList[0] + \" \\\"\" + $targetPointSelect;\n\t\t\t\teval $tmpStrng ;\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\t$tmpStrng = \"\";\n\t\t\t\n\t\t\t\tfor ($k = 0; $k < size ($sourcejoint); $k++)\n\t\t\t\t{\n\n\t\t\t\t\t$targetweight[$k] = `skinPercent -t $sourcejoint[$k] -q $sourceclusterList[0] $sourcepoint[$matchpointindex]`;\n\t\t\t\t\t$tmpStrng = $tmpStrng + \" -tv \\\"\" + $sourcejoint[$k] + \"\\\" \" + $targetweight[$k];\t\t\t\t\t\n\n\t\t\t\t}\n\n\t\t\t\t$tmpStrng = \"skinPercent \" + $tmpStrng + \" \\\"\" + $targetclusterList[0] + \" \\\"\" + $targetPointSelect;\n\t\t\t\teval $tmpStrng ;\n//\t\t\t\tprint ( $i + \")... \" + $flag + \"\\t\" + $tmpStrng + \"\\n\");\n\t\t\t\t\n\t\t}\n\t\tprogressBar -edit -step 1 $gMainProgressBar;\n\t\t\n\t\tflushUndo;\t\n\t\t\n\t\t}\t\n\t\t\n\t\tprogressBar -edit -endProgress $gMainProgressBar;\n\t\tselect -cl;\t\t\n\t\twaitCursor -state 0;\n\n\t\tflushUndo;\n\t\tif( $CH > 0) constructionHistory -tgl on;\n\n\t\tprint \"Done transfering weights\";\n\t\treturn 1;\n }\n\n///////////////////////////////////////// skinXfer end ///////////////////////////////////////////////////////////////\n\n//////////////////////////////////////// attributeMan ////////////////////////////////////////////////////////////////\n\n\n\n//attributeMan.mel\n//a script by:\n// Hamish McKenzie- mel@macaroniKazoo.com - www.macaronikazoo.com\n// David Walden-  dwalden74@hotmail.com - www.davidwalden.com\n//\n//created May 5-18 2004\n//\n//this script manages attributes - it can rename without reordering, it can reorder attributes, it\n//can transfer attributes between objects\n//\n//type attributeManager to open the UI, press the load Obj button to see its attributes\n//see the help for more information\n//\n//?2004 David Walden\n//?2004 macaroniKazoo\n\n\n\n\n//------\n//this proc will return a reordered array.  it takes a list of elements to be shifted, and a direction to shift\n//them in.  up is shifting the elements towards zero, and down, the other way.  The entries array is zero based\n//\n//NOTE: this proc doesn't \"wrap\" array entries.  If you try to move entry zero up, it will simply return the\n//original array.\n//\n//example:\n//zooAttrManUtilsArrayReorder { \"a\", \"b\", \"c\", \"d\", \"e\" } { 2,3 } up\n//returns the array { \"a\", \"c\", \"d\", \"b\", \"e\" }\n//------\nglobal proc string[] zooAttrManUtilsArrayReorder( string $array[], int $entries[], string $dir ) {\n\tstring $newArray[] = $array;\n\tint $gaps[];\n\tint $be;\n\n\tif( !`size $entries` ) return $array;\n\t$entries = `sort $entries`;\n\t$gaps[0] = $entries[0];\n\tfor( $n = 0; $n < `size $entries`-1; $n++ ) if( $entries[$n]+1 != $entries[( $n+1 )] ) {\n\t\t$gaps[( `size $gaps` )] = $entries[$n];\n\t\t$gaps[( `size $gaps` )] = $entries[( $n+1 )];\n\t\t}\n\t$gaps[( `size $gaps` )] = $entries[( `size $entries`-1 )];\n\n\tfor( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == \"up\" ) $newArray = `zooAttrManUtilsArrayShiftUp $newArray $gaps[$n] $gaps[( $n+1 )]`;\n\tfor( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == \"down\" ) $newArray = `zooAttrManUtilsArrayShiftDown $newArray $gaps[$n] $gaps[( $n+1 )]`;\n\n\treturn $newArray;\n\t}\n\n\n\n//------\n//this is a sub proc used by the zooAttrManUtilsArrayReorder proc, it handles shifting subsections\n//of an array.\n//shifts entries inclusive from the start index, to the end index up (ie towards zero) in an array\n//------\nglobal proc string[] zooAttrManUtilsArrayShiftUp( string $array[], int $startIndex, int $endIndex ) {\n\tstring $newArray[];\n\tint $displaced = $startIndex-1;\n\tint $num = ( $endIndex-$startIndex )+1;\n\n\tif( $startIndex == 0 ) return $array;\n\n\t//copy the original array to the newArray variable\n\tfor( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];\n\n\tint $i = $startIndex-1;\n\tfor( $n = 0; $n < $num; $n++, $i++) $newArray[$i] = $array[( $i+1 )];\n\n\t$newArray[$endIndex] = $array[$displaced];\n\treturn $newArray;\n\t}\n\n\n\n//------\n//shifts entries inclusive from the start index, to the end index down (ie away from zero) in an array\n//------\nglobal proc string[] zooAttrManUtilsArrayShiftDown( string $array[], int $startIndex, int $endIndex ) {\n\tstring $newArray[];\n\tint $displaced = $endIndex+1;\n\tint $num = ( $endIndex-$startIndex )+1;\n\n\tif( $endIndex >= `size $array`-1 ) return $array;\n\n\t//copy the original array to the newArray variable\n\tfor( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];\n\n\tint $i = $startIndex+$num;\n\tfor( $n = 0; $n < $num; $i--, $n++ ) $newArray[$i] = $array[( $i-1 )];\n\n\t$newArray[$startIndex] = $array[$displaced];\n\treturn $newArray;\n\t}\n\n\n\n//------\n//returns the first entry in an array.\n//this is useful for commands that only return a single string, but return an array\n//\n//example: string $constraint = zooAttrManUtilsReturnElement( 0,`parentConstraint -mo $obj2 $obj1` );\n//example: string $parent = zooAttrManUtilsReturnElement( 0,`listRelatives -p $obj2` );\n//------\nglobal proc string zooAttrManUtilsReturnElement( int $entry, string $array[] ) {\n\tif( $entry<0 ) $entry = `size $array` + $entry;\n\treturn $array[$entry];\n\t}\n\n\n\n//------\n//this proc deals with getting the attribute selection from the UI, and passing it to the reorder proc below\n//------\nglobal proc zooDoReorder( string $dir ) {\n\tstring $validTypes[] = { \"bool\", \"enum\", \"long\", \"double\" };\n\tstring $obj = `text -q -l dwAttrManObjTXT`;\n\tstring $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;\n\tif( !`size $selAttrs` ) return;\n\n\tstring $attrs[] = `listAttr -k -ud $obj`;\n\tstring $validAttrs[];\n\tint $toReorder[];\n\n\t//filters the list of attributes - the re-ordering process only works on attributes that show up in the channel box\n\tfor( $n=0; $n<`size $attrs`; $n++ ) {\n\t\tstring $type = `addAttr -q -at ( $obj +\".\"+ $attrs[$n] )`;\n\t\tint $isValid = 0;\n\t\tfor( $a in $validTypes ) if( $type == $a ) { $isValid = 1; break; }\n\t\tif( $isValid ) $validAttrs[( `size $validAttrs` )] = $attrs[$n];\n\t\t}\n\n\t//gets a list of which attributes are selected, and puts their indicies into an array\n\tfor( $n=0; $n<`size $validAttrs`; $n++ ) for( $a in $selAttrs ){\n\t\tif( $a == $validAttrs[$n] ) $toReorder[( `size $toReorder` )] = $n;\n\t\t}\n\n\tstring $newOrder[] = `zooAttrManUtilsArrayReorder $validAttrs $toReorder $dir`;\n\tzooAttrManReorder $obj $newOrder;\n\tdwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n\tfor( $a in $selAttrs ) textScrollList -e -si $a dwAttrManTSL;\n\t}\n\n\n\n//------\n//reorders dynamic attributes on an object\n//NOTE: this proc is taken from zooReorderAttribs - its put here for the sake of simplicity\n//------\nglobal proc zooAttrManReorder ( string $obj, string $newAttribOrder[] ) {\n\tstring $selObjs[] = `ls -sl`;\n\tfor ( $attrib in $newAttribOrder ) {\n\t\t//if the attribute is locked, we'll need to unlock it to rename it\n\t\tint $isAttrLocked = `getAttr -l ( $obj + \".\" + $attrib )`;\n\t\tif( $isAttrLocked ) setAttr -l 0 ( $obj + \".\" + $attrib );\n\n\t\t//rename the attribute to a temporary name.  You can't rename it to its own name, so we need to rename it to a proxy name, and then back again\n\t\tstring $tempAttrib = `renameAttr ( $obj + \".\" + $attrib ) \"temp\"`;\n\t\trenameAttr ( $obj + \".\" + $tempAttrib ) $attrib;\n\n\t\t//if the attribute WAS locked, lock it again, in order to maximise transparency\n\t\tif( $isAttrLocked ) setAttr -l 1 ( $obj + \".\" + $attrib );\n\t\t}\n\n\tselect -r $selObjs;\n\tselect $selObjs;\n\t}\n\n\n\n//------\n//this proc deals with getting the new attribute name from the UI, and renaming the attribute\n//------\nglobal proc zooAttrManDoRename() {\n\tstring $obj = `text -q -l dwAttrManObjTXT`;\n\tstring $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;\n\tstring $oldName = $selAttrs[0];\n\tstring $newName = `textField -q -tx dwNewAttrName`;\n\n\tzooAttrManRenameAttrInPlace $obj $oldName $newName;\n\n\tdwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n\ttextScrollList -e -si $newName dwAttrManTSL;\n\t}\n\n\n\n//------\n//renames an attribute without changing its order\n//NOTE: this proc is taken from zooReorderAttribs - its put here for the sake of simplicity\n//------\nglobal proc zooAttrManRenameAttrInPlace( string $obj, string $oldAttr, string $newAttr ) {\n\tstring $attrs[] = `listAttr -k -ud $obj`;\n\n\tfor( $n=0; $n<`size $attrs`; $n++ ) if( $attrs[$n] == $oldAttr ) {\n\t\tint $isLocked = `getAttr -l ( $obj + \".\" + $attrs[$n] )`;\n\t\tsetAttr -l 0 ( $obj + \".\" + $attrs[$n] );\n\t\trenameAttr ( $obj + \".\" + $attrs[$n] ) $newAttr;\n\t\t$attrs[$n] = $newAttr;\n\t\tsetAttr -l $isLocked ( $obj + \".\" + $attrs[$n] );\n\t\t}\n\n\tzooAttrManReorder $obj $attrs;\n\t}\n\n\n\n///////////////////////////////////////////////////////////////\n\n//Proc loads the attributes for the selected object into the UI.\n//For now we?re skipping all compound attributes...they?re tricky lil? bastards...!\nglobal proc dwAttrMan_LoadAttributes (string $obj, int $keyableCheck)\n{\n//string $sel[] = `ls -sl -o`;\nif (! `objExists $obj`)\n\t{\n\tprint \"Object invalid or unspecified. Try again.\\n\";\n\treturn;\n\t}\n\n//Query user-defined attrs, depending on $keyableCheck int.\nstring $attrs[];\nif ($keyableCheck)\n\t$attrs = `listAttr -ud -k $obj`;\nelse\n\t$attrs = `listAttr -ud $obj`;\n\n\n//if the attribute is a \"vector\" (ie the vector type was checked when the attribute was added)\n//then explicitly list all its children\nstring $expandedAttrs[];\nfor( $a in $attrs ) {\n\tstring $children[] = `attributeQuery -listChildren -n $obj $a`;\n\tif( `size $children` ) for( $b in $children ) $expandedAttrs[( `size $expandedAttrs` )] = $b;\n\telse $expandedAttrs[( `size $expandedAttrs` )] = $a;\n\t}\n//clear $attrs;\n//$attrs = $expandedAttrs;\n//$attrs = `stringArrayRemoveDuplicates $attrs`;\n\n\n//if (! `size $attrs`)\n//\tprint ($obj + \" has no custom attributes.\\n\");\n\n\n//Load obj name\ntext -e -l $obj dwAttrManObjTXT;\n//Remove all from TSL.\ntextScrollList -e -ra dwAttrManTSL;\n//Load attrs\nfor ($a in $attrs)\n\t{\n\t//Skip over compound attributes for now.\n\t//string $parent = `addAttr -q -parent ($obj + \".\" + $a)`;\n\t//string $parentType = `addAttr -q -attributeType ($obj + \".\" + $parent)`;\n\t//if (($parentType == \"double3\") || ($parentType == \"double2\") || ($parentType == \"float3\") || ($parentType == \"float2\"))\n\t//\tcontinue;\n\tstring $parent = `addAttr -q -parent ($obj + \".\" + $a)`;\n\t//Only add parent attributes (for compound). Compound attrs should be transferred as a group.\n\t//print $parent;\n\tif ($parent == $a)\n\t\ttextScrollList -e -a $a dwAttrManTSL;\n\t}\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc transfers connections from a given object attribute to a target object attribute.\nglobal proc int dwAttrMan_TransferConnections(string $sourceObj, \t\t//Source obj.\n\t\t\t\t\t\t\tstring $attr, \t\t//Source attribute.\n\t\t\t\t\t\t\tstring $targetObj, \t//Target obj.\n\t\t\t\t\t\t\tint $isMulti)\t\t//Is the attribute a multi attribute?\n{\n//Get all connection to- and from- the source object attribute.\nstring $sourceConnections[] = `listConnections -source 1 -destination 0 -plugs 1 ($sourceObj + \".\" + $attr)`;\nstring $destinationConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + \".\" + $attr)`;\n\n\n//If the source obj?s \".message\" attribute is connected to the same obj as $sourceConnections, then it is locked and we can?t transfer it.\nstring $messageConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + \".message\")`;\nstring $messageBuffer[];\nstring $destinationBuffer[];\nint $isLockedByMessage = 0;\nint $n = 0;\nif (`size $messageConnections`)\n\t{\n\ttokenize $messageConnections[0] \".\" $messageBuffer;\n\ttokenize $destinationConnections[0] \".\" $destinationBuffer;\n\tfor ($n = 0; $n < `size $destinationConnections`; $n++)\n\t\t{\n\t\tif ($messageBuffer[0] == $destinationBuffer[$n])\n\t\t\t{\n\t\t\twarning ($sourceObj + \".\" + $attr + \" is locked to \" + $destinationBuffer[$n] + \". Cannot transfer connections for this attribute.\");\n\t\t\t$isLockedByMessage = 1;\n\t\t\t}\n\t\t}\n\t}\nif ($isLockedByMessage)\n\treturn $isLockedByMessage;\n\n\n//Disconnect old attributes and make connections for new attribute.\n//SOURCE CONNECTIONS (CONNECTIONS COMING FROM OTHER OBJECTS).\nint $i = 0;\nfor ($s in $sourceConnections)\n\t{\n\t//If the attribute is multi, we have to find the indexes that are connected.\n\tif ($isMulti)\n\t\t{\n\t\t//Not sure how important $indexMatters really is... it seems to work fine without specifiying it, so let?s ignore it for now.\n\t\t//if ($indexMatters)\n\t\t//\t{\n\t\t\tdisconnectAttr $s ($sourceObj + \".\" + $attr + \"[\" + $i + \"]\");\n\t\t\tconnectAttr -f $s ($targetObj + \".\" + $attr + \"[\" + $i + \"]\");\n\t\t//\t}\n\t\t//else if (! $indexMatters)\n\t\t//\t{\n\t\t//\tdisconnectAttr -na $s ($sourceObj + \".\" + $attr);\n\t\t//\tconnectAttr -f -na $s ($targetObj + \".\" + $attr);\n\t\t//\t}\n\t\t}\n\telse\n\t\t{\n\t\tdisconnectAttr $s ($sourceObj + \".\" + $attr);\n\t\tconnectAttr -f $s ($targetObj + \".\" + $attr);\n\t\t}\n\t$i++;\n\t}\n//DESTINATION CONNECTIONS (CONNECTIONS GOING TO OTHER OBJECTS).\n$i = 0;\nfor ($d in $destinationConnections)\n\t{\n\t//If the attribute is multi, we have to find the indexes that are connected.\n\tif ($isMulti)\n\t\t{\n\t\t//if ($indexMatters)\n\t\t//\t{\n\t\t\tdisconnectAttr ($sourceObj + \".\" + $attr + \"[\" + $i + \"]\") $d;\n\t\t\tconnectAttr -f ($targetObj + \".\" + $attr + \"[\" + $i + \"]\") $d;\n\t\t//\t}\n\t\t//else if (! $indexMatters)\n\t\t//\t{\n\t\t//\tdisconnectAttr -na ($sourceObj + \".\" + $a) $d;\n\t\t//\tconnectAttr -f -na ($targetObj + \".\" + $a) $d;\n\t\t//\t}\n\t\t}\n\telse\n\t\t{\n\t\tdisconnectAttr ($sourceObj + \".\" + $attr) $d;\n\t\tconnectAttr -f ($targetObj + \".\" + $attr) $d;\n\t\t}\n\t$i++;\n\t}\n\n//Return if the object is locked by its message attribute.\nreturn $isLockedByMessage;\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc returns 1 if the attribute is a compound type attr, 0 if not. \"Compound\" attributes require the \"-nc\" flag, other\n//attribs of compound type do not.\nglobal proc int dwAttrMan_IsCompoundType(string $sourceObj, string $attribute)\n{\nstring $type = `addAttr -q -attributeType ($sourceObj + \".\" + $attribute)`;\n\nif (($type == \"reflectance\") || ($type == \"spectrum\") || ($type == \"float2\") || ($type == \"float3\")\n\t\t || ($type == \"double2\") || ($type == \"double3\") || ($type == \"long2\") || ($type == \"long3\")\n\t\t || ($type == \"short2\") || ($type == \"short3\") || ($type == \"compound\"))\n\treturn 1;\nelse\n\treturn 0;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Proc returns 1 if the attr requires the \"-dataType\" flag. 0 if not.\nglobal proc int dwAttrMan_IsDataType(string $object, string $attr)\n{\nstring $type = `addAttr -q -attributeType ($object + \".\" + $attr)`;\n\nif ($type == \"typed\")\n\treturn 1;\nelse\n\treturn 0;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Proc transfers attributes from the selection in the UI list to the selected obj.\n//All connections to- and from- the attribute are maintained (if user desires), and attributes on original obj are deleted (if user desires).\n//Note: for compound attributes, we will only input the parent attribute into this procedure. That means we need to query the children attrs.\nglobal proc dwAttrMan_TransferAttributes(string $sourceObj,\t\t\t  //Source object\n\t\t\t\t\t\tstring $attrs[], \t  //Attr list\n\t\t\t\t\t\tstring $parent,\t\t  //Parent attr (necessary for compound attrs)\n\t\t\t\t\t\tint $transferConnections, //Transfer connections?\n\t\t\t\t\t\tint $deleteOriginals)\t  //Delete original attrs?\n{\nif (! `objExists $sourceObj`)\n\terror \"Source object specified incorrectly. Try again.\";\nif (! `size $attrs`)\n\terror \"No attributes selected in list. Try again.\";\nstring $sel[] = `ls -sl -o`;\nif (! `size $sel`)\n\terror \"Nothing selected. Select one object and try again.\";\nif (`size $sel` > 1)\n\terror \"Select only one object and try again.\";\n\n//Report error if user wants to transfer attribute to same obj.\nif ($sel[0] == $sourceObj)\n\terror (\"Selected object is the same as the source. Try again.\");\n\n//Report error if attribute already exists on target obj. Do this BEFORE transferring anything.\nfor ($a in $attrs)\n\t{\n\tif (`attributeExists $a $sel[0]`)\n\t\terror (\"Attribute \\\"\" + $a + \"\\\" conflicts with name of existing attribute on target \" + $sel[0] + \". Try again.\");\n\t}\n\nint $numberOfChildren;\nfor ($a in $attrs)\n\t{\n\t//GET ALL THE INFORMATION ABOUT THE ATTRIBUTE.\n\t//Get the -attributeType flag. For now we are skipping attributes that require the \"-dataType\" flag.\n\tstring $type = `addAttr -q -attributeType ($sourceObj + \".\" + $a)`;\n\t//IF THE ATTRIBUTE IS A COMPOUND ATTRIBUTE, GET ITS CHILDREN.\n\n\tstring $children[];\n\tint $isCompoundType = `dwAttrMan_IsCompoundType $sourceObj $a`;\n\tif ($isCompoundType)\n\t\t{\n\t\t//Assign $numberOfChildren only if the attr is a compound type.\n\t\t$numberOfChildren = `addAttr -q -numberOfChildren ($sourceObj + \".\" + $a)`;\n\t\t//Get list of children attrs.\n\t\t$children = `listAttr ($sourceObj + \".\" + $a)`;\n\t\t//Remove parent name from $children array.\n\t\t$children = `stringArrayRemove {$a} $children`;\n\t\t//print $children; return;\n\t\t}\n\n\tint $keyable = `getAttr -keyable ($sourceObj + \".\" + $a)`;\n\tint $locked = `getAttr -lock ($sourceObj + \".\" + $a)`;\n\t//Let?s ignore the attribute value for now.\n\t//$value = `getAttr ($sourceObj + \".\" + $a)`;\n\tstring $longName = `addAttr -q -longName ($sourceObj + \".\" + $a)`;\n\tstring $shortName = `addAttr -q -shortName ($sourceObj + \".\" + $a)`;\n\n\t//Get range information (if attr is not a string type or a vector type (double3)).\n\tint $hasMin; int $hasMax; float $minValue; float $maxValue; int $hasSoftMin;\n\tint $hasSoftMax; float $softMinValue; float $softMaxValue;\n\tif (($type != \"typed\") && ($type != \"message\") && ($type != \"fltMatrix\") && ($type != \"matrix\") && (! $isCompoundType))\n\t\t{\n\t\t$hasMin = `addAttr -q -hasMinValue ($sourceObj + \".\" + $a)`;\n\t\t$hasMax = `addAttr -q -hasMaxValue ($sourceObj + \".\" + $a)`;\n\t\t$minValue = `addAttr -q -minValue ($sourceObj + \".\" + $a)`;\n\t\t$maxValue = `addAttr -q -maxValue ($sourceObj + \".\" + $a)`;\n\t\t$hasSoftMin = `addAttr -q -hasSoftMinValue ($sourceObj + \".\" + $a)`;\n\t\t$hasSoftMax = `addAttr -q -hasSoftMaxValue ($sourceObj + \".\" + $a)`;\n\t\t$softMinValue = `addAttr -q -softMinValue ($sourceObj + \".\" + $a)`;\n\t\t$softMaxValue = `addAttr -q -softMaxValue ($sourceObj + \".\" + $a)`;\n\t\t}\n\n\n\t//Find out if the attribute is a string attribute.\n\tint $isString = 0;\n\tstring $typedDataType[]; //For some reason querying \"-dataType\" returns an array (while \"-attributeType\" returns a string).\n\tif ($type == \"typed\")\n\t\t{\n\t\t$typedDataType = `addAttr -q -dataType ($sourceObj + \".\" + $a)`;\n\t\tif ($typedDataType[0] == \"string\")\n\t\t\t$isString = 1;\n\t\t}\n\n\t//Find out if the attribute is a multi attribute.\n\tint $isMulti = `attributeQuery -n $sourceObj -multi $a`;\n\tint $multiSize = `getAttr -size ($sourceObj + \".\" + $a)`;\n\tint $indexMatters = `addAttr -q -indexMatters ($sourceObj + \".\" + $a)`;\n\n\t//Get the -enumName value if the attribute is an \"enum\" type.\n\tstring $enumName;\n\tif ($type == \"enum\")\n\t\t$enumName = `addAttr -q -enumName ($sourceObj + \".\" + $a)`;\n\n\t//print ($a + \" : \" + $type + \"\\n\");return;\n\n\t//ADD THE ATTR TO THE SELECTED OBJECT.\n\t//We need special cases for \"enum\" type, \"string\" type, and for multi attributes.\n\t//Criteria for multi attributes.\n\tif (! $isMulti)\n\t\t{\n\t\t//Criteria for enum attributes.\n\t\tif ($type != \"enum\")\n\t\t\t{\n\t\t\t//Criteria for string attributes.\n\t\t\tif (! $isString)\n\t\t\t\t{\n\t\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\t\tif (`size $parent`)\n\t\t\t\t\t{\n\t\t\t\t\t//print `addAttr -q -numberOfChildren ($sel[0] + \".\" + $parent)`; return;\n\t\t\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];\n\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\t\t//Note: attributes using the \"-dataType\" flag cannot use the -numberOfChildren flag... cool!\n\t\t\t\tif (`size $parent`)\n\t\t\t\t\taddAttr -parent $parent -dataType \"string\" -longName $longName -shortName $shortName $sel[0];\n\t\t\t\telse\n\t\t\t\t\taddAttr -dataType \"string\" -longName $longName -shortName $shortName $sel[0];\n\t\t\t\t}\n\t\t\t}\n\t\telse\n\t\t\t{\n\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\tif (`size $parent`)\n\t\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType \"enum\" -enumName $enumName -longName $longName -shortName $shortName $sel[0];\n\t\t\telse\n\t\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType \"enum\" -enumName $enumName -longName $longName -shortName $shortName $sel[0];\n\t\t\t}\n\t\t}\n\telse if ($isMulti)\n\t\t{\n\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\tif (`size $parent`)\n\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];\n\t\telse\n\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];\n\t\t}\n\n\t//Now, after transferring the attr: if the attr is a compound type, transfer all its children before continuing.\n\t//This is a recursive part because we are calling this same procedure for each child.\n\tif ($isCompoundType)\n\t\t{\n\t\tfor ($c in $children)\n\t\t\tdwAttrMan_TransferAttributes($sourceObj,\t\t//Source obj\n\t\t\t\t\t\t\t {$c}, \t\t\t//child attribute to add.\n\t\t\t\t\t\t\t $a, \t\t\t//Parent attribute (same as current attr).\n\t\t\t\t\t\t\t $transferConnections,  //transfer connections?\n\t\t\t\t\t\t\t 0);\t\t\t//Don?t delete attr (we?ll delete the parent attr later).\n\t\t}\n\n\n\n\n\t//Edit attribute accordingly. Attributes of type \"typed\" are string attributes and do not have min-max ranges.\n\tif (($type != \"typed\") && ($type != \"message\") && ($type != \"fltMatrix\") && ($type != \"matrix\") && (! $isCompoundType))\n\t\t{\n\t\tif ($hasMin)\n\t\t\taddAttr -e -minValue $minValue ($sel[0] + \".\" + $a);\n\t\tif ($hasMax)\n\t\t\taddAttr -e -maxValue $maxValue ($sel[0] + \".\" + $a);\n\t\tif ($hasSoftMin)\n\t\t\taddAttr -e -softMinValue $softMinValue ($sel[0] + \".\" + $a);\n\t\tif ($hasSoftMax)\n\t\t\taddAttr -e -softMaxValue $softMaxValue ($sel[0] + \".\" + $a);\n\t\t}\n\n\n\n\t//For some reason, this produces a very bizarre error message. Instead, let?s specifiy the -keyable state upon adding the attr (above).\n\t//if ($keyable)\n\t//\tsetAttr -keyable 1 ($sel[0] + \".\" + $a);\n\tif ($locked)\n\t\tsetAttr -lock 1 ($sel[0] + \".\" + $a);\n\n\t//For now we can ignore the value of the attribute.\n\t//Set the attribute value. String attributes require special case.\n\t//if ($type != \"typed\")\n\t//\tsetAttr ($sel[0] + \".\" + $a) $value;\n\t//else if ($isString)\n\t//\tsetAttr -type \"string\" ($sel[0] + \".\" + $a) $value;\n\n\n\t//TRANSFER CONNECTIONS.\n\tint $isLockedByMessage = 0;\n\tif ($transferConnections)\n\t\t{\n\t\t//For compound attrib members, let?s wait until all children are transferred before we do the connections.\n\t\t//***I learned something really important: the parent (compound) attribute exists ONLY when all the children exist.\n\t\t//Only when they ALL exist (the entire compound group, parent and all children) are any of them editable.\n\t\t//So, first check to see if the attr has a given parent, and if that parent indeed exists. If the parent exists,\n\t\t//it exists because all the children attributes have been added to the group. Only then can we proceed to\n\t\t//transfer connections to/from compound attributes and their children attributes.\n\t\tif ((`size $parent`) && (`attributeExists $parent $sel[0]`))\n\t\t\t{\n\t\t\t//Get the children of the parent.\n\t\t\t$children = `listAttr ($sel[0] + \".\" + $parent)`;\n\t\t\t//Remove parent name from $children array.\n\t\t\t$children = `stringArrayRemove {$parent} $children`;\n\t\t\tfor ($c in $children)\n\t\t\t\t$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $c $sel[0] $isMulti`;\n\t\t\t}\n\t\telse if (! `size $parent`)\n\t\t\t$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $a $sel[0] $isMulti`;\n\t\t}\n\n\t//Continue the loop if the attribute is locked by its message attr.\n\tif ($isLockedByMessage)\n\t\tcontinue;\n\n\t//DELETE ATTR FROM SOURCE OBJ.\n\tif ($deleteOriginals)\n\t\t{\n\t\t//We need to unlock it first.\n\t\tif ($locked)\n\t\t\tsetAttr -lock 0 ($sourceObj + \".\" + $a);\n\t\t//Delete it only if it has no specified parent (ie, not a member of a compound attr group)\n\t\tif (! `size $parent`)\n\t\t\tdeleteAttr ($sourceObj + \".\" + $a);\n\t\t}\n\t}\n\n\n//Refresh TSL to reflect transferred attributes (but only if not a child of a compound attr).\nif (! `size $parent`)\n\tdwAttrMan_LoadAttributes $sourceObj `checkBox -q -v dwAttrManListKeyableCheck`;\n}\n\n\n\n\n///////////////////////////////////////////////////////////////\n\n\nglobal proc doHideConXnList() {\n\tint $hideState = `control -q -vis dwAttrManConXnForm`;\n\tstring $buttonLabel = ( $hideState )? \"<\": \">\";\n\tint $newPos = ( $hideState )? 100: 50;\n\n\tbutton -e -width 12 -l $buttonLabel dwAttrManButtonCollapseConXn;\n\tcontrol -e -vis (!$hideState) dwAttrManConXnForm;\n\n\tformLayout -e\n\t\t-ap dwAttrManConXnForm left -3 $newPos\n\t\t//-af dwAttrManConXnForm top 0\n\t\t//-af dwAttrManConXnForm right 0\n\t\t//-ac dwAttrManConXnForm bottom 0 dwAttrManBottomForm\n\t\tdwAttrManFormMaster;\n\t}\n\n\n\n\n\n///////////////////////////////////////////////////////////////\n//Proc shows connections in the right-hand TSL in the main UI.\nglobal proc dwAttrMan_ShowConnections(int $kind)\n{\n//Clear the TSL\ntextScrollList -e -ra dwAttrManConXnTSL;\n//Get the full object attribute name.\nstring $obj = `text -q -l dwAttrManObjTXT`;\nif (! `objExists $obj`)\n\treturn;\nstring $attr[] = `textScrollList -q -si dwAttrManTSL`;\n//If many attributes are selected, display \"...\"\nif (`size $attr` > 1)\n\ttextScrollList -e -a \"...\" dwAttrManConXnTSL;\nelse if (`size $attr` == 1)\n\t{\n\tstring $connections[];\n\tif ($kind == 1)\n\t\t$connections = `listConnections -s 1 -d 0 -p 1 ($obj + \".\" + $attr[0])`;\n\telse if ($kind == 2)\n\t\t$connections = `listConnections -s 0 -d 1 -p 1 ($obj + \".\" + $attr[0])`;\n\n\tfor ($c in $connections)\n\t\t{\n\t\t//Get the nodeType.\n\t\tstring $nodeBuffer[];\n\t\ttokenize $c \".\" $nodeBuffer;\n\t\tstring $nodeType = `nodeType $nodeBuffer[0]`;\n\t\t//Show the connection name as well as its nodeType.\n\t\ttextScrollList -e -a ($c + \" (\" + $nodeType + \")\") dwAttrManConXnTSL;\n\t\t}\n\t}\n}\n\n\n///////////////////////////////////////////////////////////////\n//Proc deletes selected attributes.\nglobal proc dwAttrMan_DeleteAttributes(string $obj, string $attrs[])\n{\nif (! `size $attrs`)\n\treturn;\n\nfor ($a in $attrs)\n\tdeleteAttr ($obj + \".\" + $a);\n\n//Refresh source TSL\ndwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n//Refresh connection TSL\ndwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;\n}\n\n///////////////////////////////////////////////////////////////\n//Procedure selects a connected obj, as listed in the connection TSL.\nglobal proc dwAttrMan_SelectConnectionObject()\n{\nstring $objAttr[] = `textScrollList -q -si dwAttrManConXnTSL`;\nif (! `size $objAttr`)\n\treturn;\n\n//Tokenize the $objAttrs by \".\", make sure the buffer exists, then add it to a final selection string.\nstring $objBuffer[];\nstring $selectionString;\nfor ($i = 0; $i < `size $objAttr`; $i++)\n\t{\n\ttokenize $objAttr[$i] \".\" $objBuffer;\n\tif (`objExists $objBuffer[$i]`)\n\t\t$selectionString += ($objBuffer[$i] + \" \");\n\t}\n\nif (`size $selectionString`)\n\tselect -r $selectionString;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Procedure selects the original source obj.\nglobal proc dwAttrMan_SelectSourceObject()\n{\nstring $obj = `text -q -l dwAttrManObjTXT`;\nif (! `objExists $obj`)\n\treturn;\nselect -r $obj;\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc sets the source attr?s keyable or not.\nglobal proc dwAttrMan_SetKeyable()\n{\nstring $obj = `text -q -l dwAttrManObjTXT`;\nstring $attrs[] = `textScrollList -q -si dwAttrManTSL`;\nfor ($a in $attrs)\n\t{\n\t//If attribute is a compound attr, then set children keyable.\n\tif (`dwAttrMan_IsCompoundType $obj $a `)\n\t\t{\n\t\tstring $children[] = `listAttr ($obj + \".\" + $a)`;\n\t\t$children = `stringArrayRemove {($obj + \".\" + $a)} $children`;\n\t\tint $keyable;\n\t\tfor ($c in $children)\n\t\t\t{\n\t\t\t$keyable = `getAttr -k ($obj + \".\" + $c)`;\n\t\t\tsetAttr -k (! $keyable) ($obj + \".\" + $c);\n\t\t\t//print ($c + \" ----> \" + (! $keyable) + \"\\n\");\n\t\t\t}\n\t\t//Another bizarre anomoly: I must set the compound parent?s \"keyability\" to the *opposite* of the children (???)\n\t\tsetAttr -k ($keyable) ($obj + \".\" + $a);\n\t\t//print ($a + \" ----> \" + ($keyable) + \"\\n\");\n\t\t}\n\n\tif (`dwAttrMan_IsDataType $obj $a`)\n\t\t{\n\t\twarning ($obj + \".\" + $a + \" is a dataType attribute. Attributes that require the \\\"-dataType\\\" flag cannot be keyable.\");\n\t\tcontinue;\n\t\t}\n\n\tif (`getAttr -k ($obj + \".\" + $a)` == 0)\n\t\tsetAttr -k 1 ($obj + \".\" + $a);\n\telse\n\t\tsetAttr -k 0 ($obj + \".\" + $a);\n\t}\n//Refresh TSL.\ndwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Returns the exact attribute type, regardless whether it is an -at or a -dt type.\nglobal proc string dwAttrManGetAttrTypeGeneral(string $object, string $attribute)\n{\nstring $type = `addAttr -q -attributeType ($object + \".\" + $attribute)`;\n\nif ($type == \"typed\")\n\t{\n\t//Data typed attrs return an array for their -dataType\n\tstring $dataType[] = `addAttr -q -dataType ($object + \".\" + $attribute)`;\n\treturn $dataType[0];\n\t}\n\nelse\n\treturn $type;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Returns 1 if the attribute is a multi attribute, 0 if not\nglobal proc int dwAttrManIsMulti(string $object, string $attribute)\n{\nstring $isMulti = `addAttr -q -multi ($object + \".\" + $attribute)`;\n\nreturn $isMulti;\n}\n\n///////////////////////////////////////////////////////////////\n\nglobal proc attrManHelp()\n{\nif (`window -ex attrManHelpUI`)\n\tdeleteUI attrManHelpUI;\n\nwindow -t \"AttributeMan Help\" -wh 450 350 attrManHelpUI;\n\tstring $form = `formLayout`;\n\t\tstring $scroll = `scrollLayout`;\n\t\t\tcolumnLayout;\n\n\t\t\t\trowColumnLayout -nc 2 -cw 1 75 -cw 2 300;\n\t\t\t\t\ttext -label \"Authors: \" -font boldLabelFont;\n\t\t\t\t\ttext -label \"Hamish McKenzie:  www.macaronikazoo.com\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"David Walden:        www.davidwalden.com\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"Created:\" -font boldLabelFont;\n\t\t\t\t\ttext -label \"May 5-18, 2004\";\n\t\t\t\t\tsetParent..;\n\n\t\t\t\ttext -label \"\" -h 30;\n\n\n\t\t\t\ttext -label \"   About: \" -font boldLabelFont;\n\t\t\t\tstring $noteText = \"  This tool allows the user to manage custom object attributes, providing the following\\n\";\n\t\t\t\t$noteText += \"   functionality:  reordering of attributes, renaming attributes, and transferring attributes\\n\";\n\t\t\t\t$noteText += \"   between objects. To use, simply select an object and load it into the UI via the \\\"Load Obj\\\"\\n\";\n\t\t\t\t$noteText += \"   button. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Reordering of attributes is done via the \\\"Move Up\\\" and \\\"Move Down\\\" buttons. User can  \\n\" ;\n\t\t\t\t$noteText += \"   rename attributes by simply providing a new name for the selected attribute in the text  \\n\";\n\t\t\t\t$noteText += \"   field below the attribute list. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Transferring attributes allows the user to move custom attributes between objects. User  \\n\";\n\t\t\t\t$noteText += \"   has the option of transferring all input and output connections. The original object \\n\";\n\t\t\t\t$noteText += \"   attributes can either be preserved or deleted. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   In the main attribute UI list, the user can access additional functionality via the RMB popup \\n\";\n\t\t\t\t$noteText += \"   menu. Here the user can see the exact attribute type, toggle the attribute?s keyable status, \\n\";\n\t\t\t\t$noteText += \"   and delete the attribute. On the right-hand side of the UI is a button that opens another text \\n\";\n\t\t\t\t$noteText += \"   list which allows the user to view both input and output connections on the selected attribute.\\n\";\n\t\t\t\t$noteText += \"   Double clicking in this list selects the connected object. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Virtually all attribute types are supported. Compound attributes, for example vector attributes, \\n\";\n\t\t\t\t$noteText += \"   are shown in the UI according to their parent attribute name. Compound children attributes \\n\";\n\t\t\t\t$noteText += \"   must be transferred together with their parent, and thus are not available in the UI. \\\"Move Up\\\"   \\n\";\n\t\t\t\t$noteText += \"   and \\\"Move Down\\\" is currently not supported with compound attributes, nor with attributes that   \\n\";\n\t\t\t\t$noteText += \"   require the \\\"-dataType\\\" flag upon creation.  \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   There are some known bugs with transferring compound attributes multiple times in the same \\n\";\n\t\t\t\t$noteText += \"   Maya session.  Compound attributes (with their connections) can be transferred once per \\n\";\n\t\t\t\t$noteText += \"   Maya session; more than that and Maya will report errors, or worse, crash. There is currently \\n\";\n\t\t\t\t$noteText += \"   no known fix for this, so just try to avoid it.   \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Comments etc. can be sent to mel@macaroniKazoo.com or dwalden74@hotmail.com. \\n\";\n\t\t\t\ttext -label $noteText -align left;\n\n\t\t\t\ttext -label \"\" -h 10;\n\n\n\t\t\t\tsetParent..;\n\t\t\tsetParent..;\n\t\tstring $closeButton = `button -label \"Close Window\" -c \"deleteUI attrManHelpUI\"`;\n\t\tsetParent..;\n\n\tformLayout -e\n\t\t-attachForm $scroll left 0\n\t\t-attachForm $scroll top 0\n\t\t-attachForm $scroll right 0\n\t\t-attachControl $scroll bottom 0 $closeButton\n\n\t\t-attachForm $closeButton left 0\n\t\t-attachNone $closeButton top\n\t\t-attachForm $closeButton right 0\n\t\t-attachForm $closeButton bottom 0\n\t\t$form;\n\nshowWindow attrManHelpUI;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Proc creates main UI.\nglobal proc attributeMan()\n{\nif (`window -ex dwAttrManWin`)\n\tdeleteUI dwAttrManWin;\n\nwindow -t \"AttributeMan\" -menuBar true dwAttrManWin;\nmenu -label \"Help\" -tearOff true attributeMangerHelpMenu;\n\tmenuItem -l \"AttributeMan Help\" -c \"attrManHelp\";\n\n//Master form layout; contains three children formLayouts ($sourceForm, $conXnform, and $bottomForm)\nstring $masterForm = `formLayout dwAttrManFormMaster`;\n\n\n//Source object formLayout.\nstring $sourceForm = `formLayout sourceObjForm`;\n\n\tstring $sourceText = `text -l \"Source Object:\"`;\n\tstring $objText = `text -l \"\" -font boldLabelFont -align left dwAttrManObjTXT`;\n\t\tpopupMenu -p $objText -b 3;\n\t\t\tmenuItem -l \"Select\" -c \"dwAttrMan_SelectSourceObject\";\n\n\tstring $TSL = `textScrollList\n\t\t\t-ams 1\n\t\t\t-sc (\"textField -e -tx (zooAttrManUtilsReturnElement(0,`textScrollList -q -si dwAttrManTSL`)) dwNewAttrName; \\\n\t\t\t\tdwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;\")\n\t\t\tdwAttrManTSL`;\n\n\t\t//PopupMenu for main TSL.\n\t\t//Show the attribute type via a popup menu.\n\t\tpopupMenu -p $TSL -b 3 -postMenuCommand \"{string $obj = `text -q -l dwAttrManObjTXT`; \\\n\t\t\t\t\t\t\t\tif (`objExists $obj`) { \\\n\t\t\t\t\t\t\t\t\tstring $attr[] = `textScrollList -q -si dwAttrManTSL`; \\\n\t\t\t\t\t\t\t\tif (`attributeExists $attr[0] $obj`) {\\\n\t\t\t\t\t\t\t\t\tstring $attrType; \\\n\t\t\t\t\t\t\t\tif (`size $attr` > 1) \\\n\t\t\t\t\t\t\t\t\t$attrType = \\\"\\\"; \\\n\t\t\t\t\t\t\t\telse \\\n\t\t\t\t\t\t\t\t\t{$attrType = `dwAttrManGetAttrTypeGeneral $obj $attr[0]`; \\\n\t\t\t\t\t\t\t\t\tif (`dwAttrManIsMulti $obj $attr[0]`) \\\n\t\t\t\t\t\t\t\t\t$attrType += \\\" (multi)\\\";} \\\n\t\t\t\t\t\t\t\tstring $newMenuLabel = (\\\"Attribute Type: \\\" + $attrType); \\\n\t\t\t\t\t\t\t\tmenuItem -e -l $newMenuLabel attrMan_AttrTypeMI;}}}\";\n\t\t\tmenuItem -l \"Attribute Type: \" attrMan_AttrTypeMI;\n\t\t\tmenuItem -d 1;\n\t\t\tmenuItem -l \"Toggle keyable\" -c \"dwAttrMan_SetKeyable\";\n\t\t\tmenuItem -l \"Delete attribute\" -c \"dwAttrMan_DeleteAttributes `text -q -l dwAttrManObjTXT` `textScrollList -q -si dwAttrManTSL`\";\n\n\tstring $moveUpBTN = `button -l \"Move Up\" -c ( \"zooDoReorder up\" )`;\n\tstring $moveDownBTN = `button -l \"Move Down\" -c ( \"zooDoReorder down\" )`;\n\n\t//Button form is a child of $sourceForm.\n\t//string $buttForm = `formLayout`;\n\t//\tstring $upButt = `symbolButton -i \"arrowup.xpm\" -width 15 -c( \"zooDoReorder up\" )`;\n\t//\tstring $dnButt = `symbolButton -i \"arrowdown.xpm\" -width 15 -c( \"zooDoReorder down\" )`;\n\t//setParent ..;\n\n\tstring $collapseButton = `button -l \">\" -width 13 -c( \"doHideConXnList\" ) dwAttrManButtonCollapseConXn`;\nsetParent ..;\n\n\n//Show connections formLayout.\nstring $conXnform = `formLayout -vis 0 dwAttrManConXnForm`;\n\tstring $connectionsTXT = `text\n\t\t\t\t\t-l \"Show Connections:\"\n\t\t\t\t\t-align left`;\n\tstring $conXnRBG = `radioButtonGrp\n\t\t\t\t-nrb 2\n\t\t\t\t-cw 1 70\n\t\t\t\t-la2 \"Inputs\" \"Outputs\"\n\t\t\t\t-on1 \"dwAttrMan_ShowConnections 1\"\n\t\t\t\t-on2 \"dwAttrMan_ShowConnections 2\"\n\t\t\t\tattrManConnectionsRBG`;\n\t\tradioButtonGrp -e -sl 1 attrManConnectionsRBG;\n\tstring $conXnTSL = `textScrollList\n\t\t\t-en 1\n\t\t\t-ams 0\n\t\t\t-dcc \"dwAttrMan_SelectConnectionObject\"\n\t\t\t-sc \"\"\n\t\t\tdwAttrManConXnTSL`;\n\t\tpopupMenu -p $conXnTSL -b 3;\n\t\t\tmenuItem -l \"Select object\" -c \"dwAttrMan_SelectConnectionObject\";\nsetParent ..;\n\n\n//Bottom formLayout.\nstring $bottomForm = `formLayout dwAttrManBottomForm`;\n\tstring $renameTF = `textField -cc( \"zooAttrManDoRename\" ) dwNewAttrName`;\n\tstring $keyableCheck = `checkBox\n\t\t\t\t\t-l \"List keyable only\"\n\t\t\t\t\t-v 1\n\t\t\t\t\t-ofc \"dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 0;\"\n\t\t\t\t\t-onc \"dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 1;\"\n\t\t\t\t\tdwAttrManListKeyableCheck`;\n\tstring $separator = `separator`;\n\tstring $spacerTXT = `text -l \"\" -h 5`;\n\tstring $transferOptionsTXT = `text -l \"Transfer Attribute Options:\" -font boldLabelFont`;\n\tstring $deleteOriginalsCheck = `checkBox\n\t\t\t\t\t\t-l \"Delete source attributes\"\n\t\t\t\t\t\t-v 1\n\t\t\t\t\t\t-ofc \"checkBox -e -en 1 dwAttrManConnectionsCheck;\"\n\t\t\t\t\t\t-onc \"checkBox -e -en 0 dwAttrManConnectionsCheck; checkBox -e -v 1 dwAttrManConnectionsCheck;\"\n\t\t\t\t\t\tdwAttrManDeleteSourceAttrsCheck`;\n\tstring $transferConnectionsCheck = `checkBox\n\t\t\t\t\t\t-l \"Transfer connections\"\n\t\t\t\t\t\t-v 1\n\t\t\t\t\t\t-en 0\n\t\t\t\t\t\tdwAttrManConnectionsCheck`;\n\n\tstring $loadButton = `button -l \"Load Obj\" -c \"{string $sel[] = `ls -sl -o`; \\\n\t\t\t\t\t\t\tdwAttrMan_LoadAttributes $sel[0] `checkBox -q -v dwAttrManListKeyableCheck`; \\\n\t\t\t\t\t\t\ttextField -e -tx \\\"\\\" dwNewAttrName; \\\n\t\t\t\t\t\t\ttextScrollList -e -ra dwAttrManConXnTSL;}\"`;\n\tstring $transferButton = `button -l \"Transfer Attrs\" -c \"dwAttrMan_TransferAttributes \\\n\t\t\t\t\t\t\t\t\t`text -q -l dwAttrManObjTXT` \\\n\t\t\t\t\t\t\t\t\t`textScrollList -q -si dwAttrManTSL` \\\n\t\t\t\t\t\t\t\t\t\\\"\\\" \\\n\t\t\t\t\t\t\t\t\t`checkBox -q -v dwAttrManConnectionsCheck` \\\n\t\t\t\t\t\t\t\t\t`checkBox -q -v dwAttrManDeleteSourceAttrsCheck`;\"`;\nsetParent ..;\n\n//Edit button form\n/*formLayout -e\n\t-an $upButt left\n\t-af $upButt top 0\n\t-af $upButt right 0\n\t-ap $upButt bottom 0 50\n\n\t-an $dnButt left\n\t-ac $dnButt top 0 $upButt\n\t-af $dnButt right 0\n\t-af $dnButt bottom 0\n\t$buttForm;\n*/\n//Edit source form.\nformLayout -e\n\t-af $sourceText left 0\n\t-af $sourceText top 0\n\t-an $sourceText right\n\t-an $sourceText bottom\n\n\t-ac $objText left 5 $sourceText\n\t-af $objText top 0\n\t-af $objText right 0\n\t-an $objText bottom\n\n\t-af $TSL left 0\n\t-ac $TSL top 0 $sourceText\n\t-ac $TSL right 5 $collapseButton\n\t-ac $TSL bottom 5 $moveUpBTN\n\n\t-af $moveUpBTN left 5\n\t-an $moveUpBTN top\n\t-ap $moveUpBTN right 5 50\n\t-af $moveUpBTN bottom 0\n\n\t-ac $moveDownBTN left 5 $moveUpBTN\n\t-an $moveDownBTN top\n\t-ac $moveDownBTN right 10 $collapseButton\n\t-af $moveDownBTN bottom 0\n\n\t//-an $buttForm left\n\t//-ac $buttForm top 0 $sourceText\n\t//-ac $buttForm right 3 $collapseButton\n\t//-af $buttForm bottom 0\n\n\t-an $collapseButton left\n\t-ac $collapseButton top 0 $sourceText\n\t-af $collapseButton right 0\n\t-af $collapseButton bottom 0\n\t$sourceForm;\n\n//Edit connection form\nformLayout -e\n\t-af $connectionsTXT left 3\n\t-af $connectionsTXT top 0\n\t-af $connectionsTXT right 0\n\t-an $connectionsTXT bottom\n\n\t-af $conXnRBG left 3\n\t-ac $conXnRBG top 0 $connectionsTXT\n\t-af $conXnRBG right 0\n\t-an $conXnRBG bottom\n\n\t-af $conXnTSL left 3\n\t-ac $conXnTSL top 5 $conXnRBG\n\t-af $conXnTSL right 0\n\t-af $conXnTSL bottom 0\n\t$conXnform;\n\n//Edit bottom form.\nformLayout -e\n\t-af $renameTF left 0\n\t-an $renameTF top\n\t-af $renameTF right 0\n\t-ac $renameTF bottom 0 $keyableCheck\n\n\t-af $keyableCheck left 0\n\t-an $keyableCheck top\n\t-af $keyableCheck right 0\n\t-ac $keyableCheck bottom 0 $separator\n\n\t-af $separator left 0\n\t-an $separator top\n\t-af $separator right 0\n\t-ac $separator bottom 0 $spacerTXT\n\n\t-af $spacerTXT left 0\n\t-an $spacerTXT top\n\t-af $spacerTXT right 0\n\t-ac $spacerTXT bottom 0 $transferOptionsTXT\n\n\t-af $transferOptionsTXT left 0\n\t-an $transferOptionsTXT top\n\t-af $transferOptionsTXT right 0\n\t-ac $transferOptionsTXT bottom 0 $deleteOriginalsCheck\n\n\t-af $deleteOriginalsCheck left 0\n\t-an $deleteOriginalsCheck top\n\t-af $deleteOriginalsCheck right 0\n\t-ac $deleteOriginalsCheck bottom 0 $transferConnectionsCheck\n\n\t-af $transferConnectionsCheck left 0\n\t-an $transferConnectionsCheck top\n\t-af $transferConnectionsCheck right 0\n\t-ac $transferConnectionsCheck bottom 0 $loadButton\n\n\t-af $loadButton left 0\n\t-an $loadButton top\n\t-ap $loadButton right 0 50\n\t-af $loadButton bottom 0\n\n\t-ac $transferButton left 0 $loadButton\n\t-an $transferButton top\n\t-af $transferButton right 0\n\t-af $transferButton bottom 0\n\t$bottomForm;\n\n\n//Edit master form\nint $spacer = 3;\nformLayout -e\n\t-af $sourceForm left $spacer\n\t-af $sourceForm top $spacer\n\t-ac $sourceForm right $spacer $conXnform\n\t-ac $sourceForm bottom $spacer $bottomForm\n\n\t-ap $conXnform left -2 100\n\t-af $conXnform top $spacer\n\t-af $conXnform right $spacer\n\t-ac $conXnform bottom $spacer $bottomForm\n\t//-ap $conXnform left 0 50\n\t//-af $conXnform top 0\n\t//-af $conXnform right 0\n\t//-af $conXnform bottom 0\n\n\t-af $bottomForm left $spacer\n\t-an $bottomForm top\n\t-af $bottomForm right $spacer\n\t-af $bottomForm bottom $spacer\n\t$masterForm;\n\n\nshowWindow dwAttrManWin;\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nglobal proc NameDuplicateNodes()\n{\n    if(` window -query -exists NameDuplicateNodesWin`) \n         deleteUI NameDuplicateNodesWin;\n\n    window -widthHeight 450 100 -title \"Rename Duplicate Node \" -toolbox true -sizeable 1 NameDuplicateNodesWin;\n\n         columnLayout -adjustableColumn true;\n       button -label \"Analyze\" -c (\"ListDuplicates();\") ;\n          textScrollList -w 450 -h 350 -ams 1 -selectCommand \"GeoSelcet();\" TsField;\n      setParent ..;\n  rowLayout -numberOfColumns 3 -columnWidth3 120 150 150 -adjustableColumn 3 -columnAlign 1 \"center\" -columnAttach 1 \"both\" 0 -columnAttach 2 \"both\" 0 - columnAttach 3 \"both\" 0;\n              text -l \"Padding:\";\n              intField -minValue 1 -maxValue 5 -step 1 -value 1 PaddingUl;\n          button -label \"Rename\" -c (\"RenameDuplicates();\" ) ;\n\n  setParent ..;\n\n setParent ..;\n    showWindow NameDuplicateNodesWin;\n}\n\nglobal proc ListDuplicates()\n{\ntextScrollList -e -removeAll TsField;\npython (\"import maya.cmds as cmds\");\nstring $dupList[] = python (\"[f for f in cmds.ls(tr=1,s=1) if 'l' in f]\");\nprint `size($dupList)` ;\nfor ($each in $dupList)\n{\ntextScrollList -e -append ($each+\"\\n\") TsField;\nselect -cl;\n}\n}\nglobal proc GeoSelcet() \n{\n  string $Datas[] = `textScrollList -q -selectItem TsField` ; \n  select $Datas;\n}\n\nglobal proc RenameDuplicates()\n{\n//print \"\\nRenaming.... \";\nint $pad = ` intField -q -v PaddingUI`;\npython (\"import DupRenamer\") ; \npython(\"DupRenamer.PyrenameDuplicates(\"+$pad+\")\");\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////\n\n\n/////////////////////////////////////////////////NameDuplicateNodes////////////////////////////////////////////\n\n///////////////////////////////////////unusedNodes//////////////////////////////////////////////////// \nglobal proc deleteUnusedNodes()\n{\nstring $polyGeo[] = ` ls -type \"mesh\"` ;\nint $count = 0;\nfor ($each in $polyGeo)\n{\nstring $conn[] = ` listConnections $each`;\nif ($conn[0] == \"\")\n{\ndelete $each;\nprint (\"Deleted \" + $each + \"\\n\"); \n$count++;\n}\n}\nif ($count == 0)\n{\nprint \"No unused Orig nodes found in the scene.\\n\";\n} \n}\n////////////////////////////////////////////////////////////////////////////////////// \nglobal proc dkAddAttr(string $attr)\n{\nstring $name = ` textField -q -text attrTF` ;\nstring $buffer[];\n$numTokens = ` tokenize $name \" \" $buffer` ; \nif ($name !=\"\")\n{\nfor ($eachAttr in $buffer)\n{\nstring $sel[] = ` ls -sl` ;\nfor ($each in $sel)\n{\nif (` attributeExists $eachAttr $each` )\n{\nwarning ($eachAttr + \" attribute already exists in \" + $each + \"\\n\");\n} \nelse\n{\nif ($attr == \"enum\")\n{\naddAttr -ln $eachAttr -k 1 -at \"enum\" -en \"Off:On:\" $each;\n}\nelse if ($attr == \"floatA\")\n{\naddAttr -ln $eachAttr -at double -min 0 -max 1 -dv 0 -k 1 $each;\n}\nelse if ($attr == \"floatB\")\n{\naddAttr -ln $eachAttr -at double -min 0 -max 10 -dv 0 -k 1 $each;\n}\nelse if ($attr == \"floatC\")\n{\naddAttr -ln $eachAttr -at double -min -10 -max 10 -dv 0 -k 1 $each;\n}\nelse if ($attr == \"floatD\")\n{\naddAttr -ln $eachAttr -at double -dv 0 -k 1 $each;\n}\n} \n} \n} \n} \nelse\n{\nwarning \"No attribute specified in the field\";\n}\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////PropControl////////////////////////////////////////////////\nglobal proc PropControl() \n{         \n        string $assetName; \n        string $rosie                  = ` promptDialog -title \"Asset Group Name\"\n                                                                   -message \"Asset Name:\"\n                                                                   -button \"OK\" -button \"Cancel\"\n                                                                   -defaultButton \"OK\" -cancelButton \"Cancel\"\n                                                                   -dismissString \"Cancel\" ` ;\n        if ($rosie == \"OK\") \n        {\n            $assetName = ` promptDialog -query -text` ; \n            string $world_01 = \"Placement01_Ctrl\" ; \n            string $world_02 = \"Placement02_Ctrl\" ;\n            string $cog                       = \"_COG\";\n        \n            string $asset                 = `group -em -n $assetName` ; \n            string $ctrlGrp               = `group -em -n Ctrl_Group` ;\n            string $geoGrp                = `group -em -n Geometry_Group` ; \n            string $defoGrp               = `group -em -n Deformers_Group` ; \n            string $jntGrp                = `group -em -n Joints_Group` ;\n            string $texGrp                = `group -em -n Texture_Group` ; \n            string $ligGrp                = `group -em -n Light_Group` ;\n            string $efxGrp                = `group -em -n Efx_Group` ;\n            string $noteLoc               = worldNote();\n\n            string $offsetGrp   =  `group -em -n Offset` ;\n            string $ctrlShapGro =  `group -em -n ($assetName + \"_Ctrl_Group\")` ;\n            string $astGeoGrp   =  `group -em -n ($assetName + \"_Geo_Group\")` ; \n            string $loRes                 = `group -em -n Lo` ;\n            string $hiRes                 = `group -em -n Hi` ;\n            string $jntShapeGrp           = `group -em -n ($assetName + \" jnt_Group\")`;\n//B//\n            parent $ctrlGrp $geoGrp $defoGrp $jntGrp $texGrp $ligGrp $efxGrp $asset ; \n            parent Notez $asset;\n            parent $offsetGrp $ctrlGrp ;\n            parent $ctrlShapGro $ctrlGrp ;\n            parent $astGeoGrp $geoGrp ;\n            parent $loRes $hiRes $astGeoGrp ;\n            parent $jntShapeGrp $jntGrp ;\n\n\n            //Control Shapes\n            string $place_01Ctrl[] = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1.6 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n $world_01` ;\n            string $place_02Ctrl[] = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 2 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n $world_02` ;\n            string $bkAr          = `curve -d 1 -p -0.258465 0 -2.001129 -p -0.258465 0 -2.518059 -p -0.51693 0 -2.518059 -p 0 0 -3.207298 -p 0.51693 0 -2.518059 -p 0.258465 0 -2.518059 -p 0.258465 0 -2.001129 -p -0.258465 0 -2.001129 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7`;\n            string $rtAr          = `curve -d 1 -p -3.207298 0 0 -p -2.518059 0 0.51693 -p -2.518059 0 0.258465 -p -2.001129 0 0.258465 -p -2.001129 0 -0.258465 -p -2.518059 0 -0.258465 -p -2.518059 0 -0.51693 -p -3.207298 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7`;\n            string $frAr          = `curve -d 1 -p 0 0 3.207298 -p -0.51693 0 2.518059 -p -0.258465 0 2.518059 -p -0.258465 0 2.001129 -p 0.258465 0 2.001129 -p 0.258465 0 2.518059 -p 0.51693 0 2.518059 -p 0 0 3.207298 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7`;\n            string $ltAr          = `curve -d 1 -p 3.207298 0 0 -p 2.518059 0 0.51693 -p 2.518059 0 0.258465 -p 2.001129 0 0.258465 -p 2.001129 0 -0.258465 -p 2.518059 0 -0.258465 -p 2.518059 0 -0.51693 -p 3.207298 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7`;\n            \n            \n            //World 02 Color\n            string $place_02shape[] = `listRelatives -s $place_02Ctrl[0]` ; \n            setAttr ($place_02shape[0] + \".overrideEnabled\") 1 ;\n            setAttr ($place_02shape[0] + \".overrideColor\") 6 ;\n//C/\n            select $bkAr $rtAr $frAr $ltAr ;\n            string $seleShap[] = `ls -sl` ;\n            string $obj ;\n            for ($obj in $seleShap)\n            {\n                     string $shapeNod[] = `listRelatives -s $obj` ; \n                     setAttr ($shapeNod[0] + \".overrideEnabled\") 1 ; \n                     setAttr ($shapeNod[0] + \".overrideColor\") 17 ;\n            \n                     parent -r -s $shapeNod $place_02Ctrl[0] ;\n                     rename $shapeNod ($place_02Ctrl[0] + \"Shape\") ; \n                     delete $obj ;\n            }\n            \n            //World 01 Color\n            string $place_O1shape[] =  `listRelatives -s $place_01Ctrl[0]` ; \n            setAttr ($place_O1shape[0] + \".overrideEnabled\") 1 ;\n            setAttr ($place_O1shape[0] + \".overrideColor\") 17 ;   \n            string $cogShape[] = ` circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($assetName + $cog)`;\n            string $shapeNod[] = `listRelatives -s $cogShape[0]` ;\n            setAttr ($shapeNod[0] + \".overrideEnabled\") 1 ;\n            setAttr ($shapeNod[0] + \".overrideColor\") 14 ;\n            \n            //$asset Attribute\n            addAttr -ln \"AssetType\" -dt \"string\" $asset ; \n            setAttr -e-keyable true ($asset + \".AssetType\") ;\n            setAttr -type \"string\" ($asset + \".AssetType\") \"Prop\"; \n            setAttr -l true ($asset + \".AssetType\") ;\n//D//\n            //World 01 Attribute\n            addAttr -ln \"globleScale\" -at double -dv 1 $place_01Ctrl[0] ; \n            setAttr -e-keyable true ($place_01Ctrl[0] + \".globleScale\") ;\n            \n            addAttr -ln \"meshDisplay\" -at \"enum\" -en \"Normal:Template:Refrence:\" $place_01Ctrl[0] ; \n            setAttr -e-keyable true ($place_01Ctrl[0] + \".meshDisplay\") ;\n            setAttr -keyable false -channelBox true ($place_01Ctrl[0] + \".meshDisplay\") ;\n            \n            addAttr -ln \"meshSmooth\" -at \"enum\" -en \"0:1:2:\" $place_01Ctrl[0] ; \n            setAttr -e-keyable true ($place_01Ctrl[0] + \".meshSmooth\") ;\n            setAttr -keyable false -channelBox true ($place_01Ctrl[0] + \".meshSmooth\") ;\n            \n            addAttr -ln \"ctrlVis\" -at \"enum\" -en \"Off:On:\" $place_01Ctrl[0] ; \n            setAttr -e-keyable true ($place_01Ctrl[0] + \".ctrlVis\") ;\n            setAttr -keyable false -channelBox true ($place_01Ctrl[0] + \".ctrlVis\") ; \n            setAttr ($place_01Ctrl[0] + \".ctrlVis\") 1 ;\n            \n            addAttr -ln \"meshVis\" -at \"enum\" -en \"Off:On:\" $place_01Ctrl[0] ; \n            setAttr -e-keyable true ($place_01Ctrl[0] + \".meshVis\") ;\n            //setAttr -keyable false -channelBox true ($place_01Ctrl[0] + \".meshVis\") ; \n            setAttr ($place_01Ctrl[0] + \".meshVis\") 1 ;\n            \n            addAttr -ln \"jointVis\" -at \"enum\" -en \"Off:On:\" $place_01Ctrl[0] ; \n            setAttr -e-keyable true ($place_01Ctrl[0] + \".jointVis\") ;\n            setAttr -keyable false -channelBox true ($place_01Ctrl[0] + \".jointVis\") ;\n            \n            addAttr -ln \"LOD\" -at \"enum\" -en \"Hi.Lo:\" $place_01Ctrl[0] ; \n            setAttr -e-keyable true ($place_01Ctrl[0] + \".LOD\") ;\n            setAttr -keyable false -channelBox true ($place_01Ctrl[0] + \".LOD\") ;   \n//E//       \n            //Control Shapes Prenting\n            parent $cogShape[0] $place_01Ctrl[0] ; \n            parent $place_01Ctrl[0] $place_02Ctrl[0] ; \n            parent $place_02Ctrl[0] $offsetGrp ;\n            \n            //Connections\n/*            \n            connectAttr -f ($place_01Ctrl[0] + \".globleScale\") ($place_01Ctrl[0] + \".scaleX\") ; \n            connectAttr -f ($place_01Ctrl[0] + \".globleScale\") ($place_01Ctrl[0] + \".scaleY\") ; \n            connectAttr -f ($place_01Ctrl[0] + \".globleScale\") ($place_01Ctrl[0] + \".scaleZ\") ;\n*/            \n            parentConstraint ($assetName + $cog) ($assetName + \"_Geo_Group\") ; \n            scaleConstraint ($assetName + $cog)($assetName + \"_Geo_Group\") ; \n            connectAttr -f ($place_01Ctrl[0] + \".ctrlVis\") ($ctrlShapGro + \".visibility\") ; \n            connectAttr -f ($place_01Ctrl[0] + \".meshVis\") ($astGeoGrp + \".visibility\") ; \n            connectAttr -f ($place_01Ctrl[0] + \".jointVis\") ($jntShapeGrp + \".visibility\") ; \n            string $revNode = `shadingNode -asUtility reverse -n ($assetName + \"_Geo_Vis_Rev\")`;    \n            connectAttr -f ($place_01Ctrl[0] + \".LOD\") ($loRes + \".visibility\") ; \n            connectAttr -f ($place_01Ctrl[0] + \".LOD\") ($revNode + \".inputX\") ; \n            connectAttr -f ($revNode + \".outputX\") ($hiRes + \".visibility\") ;  \n            setAttr -keyable false -channelBox false ($place_01Ctrl[0] + \".v\") ; \n            setAttr -keyable false -channelBox false ($place_02Ctrl[0] + \".v\") ; \n            setAttr -keyable false -channelBox false ($cogShape[0] + \".v\") ; \n            select -cl ;\n            select -r(\"*_Ctrl\");\n            select -add(\"*_COG\");\n            sets -name \"AnimSet_prp\";\n            select -cl ;\n//F//\n        } \n        else\n        { \n                print \" \\\" Please enter the Asset Name\\\"...............\";\n        }\n}\n\n        //World Notes\n        global proc worldNote()\n        {\n                createNode transform -n \"Notez\" -p \"AssetName\";\n                addAttr -ci true -sn \"notes\" -ln \"notes\" -dt \"string\";\n                setAttr -l on \".v\" no; \n                setAttr -l on -k off \".tx\"; \n                setAttr -l on -k off \".ty\"; \n                setAttr -l on -k off \".tz\"; \n                setAttr -l on -k off \".rx\"; \n                setAttr -l on -k off \".ry\"; \n                setAttr -l on -k off \".rz\"; \n                setAttr -l on -k off \".sx\"; \n                setAttr -l on -k off \".sy\"; \n                setAttr -l on -k off \".sz\";\n                setAttr \".notes\" -type \"string\" \"ProjectName - ProjectName \\r\\nStudioName - XenTrixStudios\";\n                createNode locator -n \"NotezShape\" -p \"Notez\";\n                setAttr -k off \".v\";\n                addAttr -ln \"AssetType\" -at \"enum\" -en \"Character:Props:Env:Structures:Vegatation:Vehicles:\" Notez; \n                setAttr -e-keyable true Notez.AssetType;\n                addAttr -ln \"AssetPath\" -dt \"string\" Notez;\n                setAttr -e-keyable true Notez.AssetPath;\n                addAttr -ln \"Project\" -dt \"string\" Notez; \n                setAttr -e-keyable true Notez.Project;\n                addAttr -ln \"ModelVersion\" -dt \"string\" Notez; \n                setAttr -e-keyable true Notez.ModelVersion;\n                addAttr -ln \"TextureVersion\" -dt \"string\" Notez;\n                setAttr -e-keyable true Notez.TextureVersion;\n        }     \n\n        global proc jtErr(string $msg)\n        {\n            confirmDialog -t \"Error\" -m $msg -ma \"center\" -b \"Ok\" -db \"Ok\";\n        }  \n         \n\n\n////////////////////////////////////PropControl End///////////////////////////////////////////////////\n            \n//////////////////////////////////////UV Dtiver ///////////////////////////////////////////////////\nglobal proc uvDriver()\n{\n    string $uvName;\n    string $uvDriver   = ` promptDialog -title \" UV Driver\"\n                                        -message \"Uv Driver Name:\"\n                                        -button \"OK\" -button \"Cancel\"\n                                        -defaultButton \"OK\" -cancelButton \"Cancel\"\n                                        -dismissString \"Cancel\"` ;\n    if ($uvDriver == \"OK\")\n     {\n        $uvName = `promptDialog -query -text` ;\n        string $seleObj[] = `ls -sl` ;\n        string $uvMesh[] = `nurbsPlane -p 0 0 0 -ax 1 0 0 -w 5 -lr 1 -d 1 -u 1 -v 1 -ch 1 -n ($uvName + \"_UV_Geo\")`; \n        string $uvLoc[] = `spaceLocator -p 0 0 0 -n ($uvName + \"_UV_Loc\")` ;\n        string $uvCpos    = `createNode closestPointOnSurface -n ($uvName + \"_UV_Cpos\")`;\n        string $uvPoSInfo = `createNode pointOnSurfaceInfo -n ($uvName + \"_UV_PoSInfo\")` ;\n        string $geoConst[] = `geometryConstraint -weight 1 $uvMesh[0] $uvLoc[0]` ; \n        connectAttr -f ($uvMesh[0] + \"Shape.worldSpace[0]\") ($uvCpos + \".inputSurface\") ;\n        connectAttr -f ($uvLoc[0] + \".translateX\") ($uvCpos + \".inPositionX\") ; \n        connectAttr -f ($uvLoc[0] + \".translateY\") ($uvCpos + \".inPositionY\") ; \n        connectAttr -f ($uvLoc[0] + \".translateZ\") ($uvCpos + \".inPositionZ\") ;\n        connectAttr -f ($uvCpos + \".parameterU\") ($uvPoSInfo + \".parameterU\") ; \n        connectAttr -f ($uvCpos + \".parameterV\") ($uvPoSInfo + \".parameterV\") ;\n        connectAttr -f ($uvMesh[0] + \"Shape.worldSpace[0]\") ($uvPoSInfo + \".inputSurface\") ; \n        string $uvGrp                   = `group -em -n ($uvName + \"_UV_Driver\")` ;\n        string $uvGeoGrp = ` group -em -n ($uvName + \"_UV_Geo_Group\")` ;\n        string $uvLocGrp = ` group -em -n ($uvName + \"_UV_Loc_Group\")` ;\n        parent $uvGeoGrp $uvLocGrp $uvGrp ;\n        parent $uvMesh[0] $uvGeoGrp ;\n        parent $uvLoc[0] $uvLocGrp ;\n     } \n    else\n    {         \n            print \" \\\" Please enter the UV Driver Name\\\"........................... \";\n    }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nselect -cl; \nselect $csel;\n\n\n\n\n//////////////////////////////////////END RG TOOL////////////////////////////////////////////////////" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "SD" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "SD" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SD" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import smartDeformer_maya2018\nsmartDeformer_maya2018.show_window()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\n\n\ndef C(objs = None):\n    if objs:pass\n    else: objs = pm.ls(sl=1)\n        \n    attrs = ['.tx','.ty','.tz','.rx','.ry','.rz','.sx','.sy','.sz']\n    sl =objs\n    for i in attrs:\n        try:pm.connectAttr(sl[0]+i,sl[1]+i,f=1)\n        except:pass\n    \nC()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Cats" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Cats" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\n\ndef C(objs = None):\n    if objs:pass\n    else: objs = pm.ls(sl=1)\n        \n    attrs = ['.tx','.ty','.tz','.rx','.ry','.rz','.sx','.sy','.sz']\n    sl =objs\n    for i in attrs:\n        try:pm.connectAttr(sl[0]+i,sl[1]+i,f=1)\n        except:pass\n    \nC()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\na = JointProc()\na.CtrJnt(cmds.ls(sl=1))\nclass JointProc:\n\n    import pymel.core as pm\n\n    cmdsSel = None\n    sel = None\n    def __init__(self):\n        self.sel = pm.ls(sl=1)\n        \n    def getSelection(self,Pivs = cmdsSel):\n        components = Pivs\n        selList = []\n        objName = components[0][0:components[0].index(\".\")]\n        # go through every component in the list. If it is a single component (\"pCube1.vtx[1]\"), add it to the list. Else,\n        # add each component in the index (\"pCube1.vtx[1:5]\") to the list\n        for c in components:\n            if \":\" not in c:\n                selList.append(c)\n            else:\n                print c\n                startComponent = int(c[c.index(\"[\") + 1: c.index(\":\")])\n                endComponent = int(c[c.index(\":\") + 1:c.index(\"]\")])\n                componentType = c[c.index(\".\") + 1:c.index(\"[\")]\n                while startComponent <= endComponent:\n                    selList.append(objName + \".\" + componentType + \"[\" + str(startComponent) + \"]\")\n                    startComponent += 1\n    \n        return selList\n        pivsList.append(selList)\n        \n      \n        \n        \n        \n    \n    def CtrJnt(self,Piv=sel):\n        #createJoint\n    \n        sl = Piv\n        try:\n            pm.select(sl)\n            tempPos = pm.cluster(n='Temp')[1]\n            Jnt = pm.createNode('joint',n = (sl[0]+'Jnt'))\n            pm.delete(pm.parentConstraint(tempPos,Jnt))\n            pm.delete(tempPos)\n            return Jnt\n            \n            \n            \n            \n        except:\n            tempPos = pm.createNode('transform',n = 'Temp')\n            pm.delete(pm.parentConstraint(sl,tempPos))\n            Jnt = pm.createNode('joint',n = (sl[0]+'_Jnt'))\n            pm.delete(pm.parentConstraint(tempPos,Jnt))\n            pm.delete(tempPos)\n            return Jnt\n            \n            \n            \n        \n        \n    \n    def CtrJntEach(self,cmdsSel = None):\n        \n        #createJoint\n        try:\n            sl = getSelection()\n            #print sl\n        \n        except:sl= cmdsSel\n        \n        for i in sl:\n            pass\n            if pm.objectType(i)== 'mesh':\n            \n                \n                try:\n                    pm.select(i)\n                    tempPos = pm.cluster(n='Temp')[1]\n                    Jnt = pm.createNode('joint',n = (i+'Jnt'))\n                    pm.delete(pm.parentConstraint(tempPos,Jnt))\n                    pm.delete(tempPos)\n                    print (Jnt)\n                    return Jnt\n                    \n                    \n                    \n                except:\n                    tempPos = pm.createNode('transform',n = 'Temp')\n                    pm.delete(pm.parentConstraint(i,tempPos))\n                    Jnt = pm.createNode('joint',n = (i+'_Jnt'))\n                    pm.delete(pm.parentConstraint(tempPos,Jnt))\n                    pm.delete(tempPos)\n                    print (Jnt)\n                    return Jnt\n        \n                \n                    \n                \n                    " 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "JntBtwn" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "JntBtwn" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\n\nclass JointProc:\n\n    import pymel.core as pm\n\n    cmdsSel = None\n    sel = None\n    def __init__(self):\n        self.sel = pm.ls(sl=1)\n        \n    def getSelection(self,Pivs = cmdsSel):\n        components = Pivs\n        selList = []\n        objName = components[0][0:components[0].index(\".\")]\n        # go through every component in the list. If it is a single component (\"pCube1.vtx[1]\"), add it to the list. Else,\n        # add each component in the index (\"pCube1.vtx[1:5]\") to the list\n        for c in components:\n            if \":\" not in c:\n                selList.append(c)\n            else:\n                print c\n                startComponent = int(c[c.index(\"[\") + 1: c.index(\":\")])\n                endComponent = int(c[c.index(\":\") + 1:c.index(\"]\")])\n                componentType = c[c.index(\".\") + 1:c.index(\"[\")]\n                while startComponent <= endComponent:\n                    selList.append(objName + \".\" + componentType + \"[\" + str(startComponent) + \"]\")\n                    startComponent += 1\n    \n        return selList\n        pivsList.append(selList)\n        \n      \n        \n        \n        \n    \n    def CtrJnt(self,Piv=sel):\n        #createJoint\n    \n        sl = Piv\n        try:\n            pm.select(sl)\n            tempPos = pm.cluster(n='Temp')[1]\n            Jnt = pm.createNode('joint',n = (sl[0]+'Jnt'))\n            pm.delete(pm.parentConstraint(tempPos,Jnt))\n            pm.delete(tempPos)\n            return Jnt\n            \n            \n            \n            \n        except:\n            tempPos = pm.createNode('transform',n = 'Temp')\n            pm.delete(pm.parentConstraint(sl,tempPos))\n            Jnt = pm.createNode('joint',n = (sl[0]+'_Jnt'))\n            pm.delete(pm.parentConstraint(tempPos,Jnt))\n            pm.delete(tempPos)\n            return Jnt\n            \n            \n            \n        \n        \n    \n    def CtrJntEach(self,cmdsSel = None):\n        \n        #createJoint\n        try:\n            sl = getSelection()\n            #print sl\n        \n        except:sl= cmdsSel\n        \n        for i in sl:\n            pass\n            if pm.objectType(i)== 'mesh':\n            \n                \n                try:\n                    pm.select(i)\n                    tempPos = pm.cluster(n='Temp')[1]\n                    Jnt = pm.createNode('joint',n = (i+'Jnt'))\n                    pm.delete(pm.parentConstraint(tempPos,Jnt))\n                    pm.delete(tempPos)\n                    print (Jnt)\n                    return Jnt\n                    \n                    \n                    \n                except:\n                    tempPos = pm.createNode('transform',n = 'Temp')\n                    pm.delete(pm.parentConstraint(i,tempPos))\n                    Jnt = pm.createNode('joint',n = (i+'_Jnt'))\n                    pm.delete(pm.parentConstraint(tempPos,Jnt))\n                    pm.delete(tempPos)\n                    print (Jnt)\n                    return Jnt\n        \n                \n                    \na = JointProc()\na.CtrJnt(cmds.ls(sl=1))   " 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
        -mi "JntEach" ( "\n    \ndef CtrJnt():\n    #createJoint\n\n    sl = pm.ls(sl=1)\n    try:\n        pm.select(sl)\n        tempPos = pm.cluster(n='Temp')[1]\n        Jnt = pm.createNode('joint',n = (sl[0]+'Jnt'))\n        pm.delete(pm.parentConstraint(tempPos,Jnt))\n        pm.delete(tempPos)\n        \n        \n        \n        \n    except:\n        tempPos = pm.createNode('transform',n = 'Temp')\n        pm.delete(pm.parentConstraint(sl,tempPos))\n        Jnt = pm.createNode('joint',n = (sl[0]+'_Jnt'))\n        pm.delete(pm.parentConstraint(tempPos,Jnt))\n        pm.delete(tempPos)\n        \n        \n        \n    \n    \n\ndef CtrJntEach():\n    \n    #createJoint\n    try:sl = getSelection()\n    except:sl= pm.ls(sl=1)\n    for i in sl:\n        \n        \n        try:\n            pm.select(i)\n            tempPos = pm.cluster(n='Temp')[1]\n            Jnt = pm.createNode('joint',n = (i+'Jnt'))\n            pm.delete(pm.parentConstraint(tempPos,Jnt))\n            pm.delete(tempPos)\n            \n            \n            \n            \n        except:\n            tempPos = pm.createNode('transform',n = 'Temp')\n            pm.delete(pm.parentConstraint(i,tempPos))\n            Jnt = pm.createNode('joint',n = (i+'_Jnt'))\n            pm.delete(pm.parentConstraint(tempPos,Jnt))\n            pm.delete(tempPos)\n            \n        \n        \ndef getSelection():\n    components = cmds.ls(sl=1)\n    selList = []\n    objName = components[0][0:components[0].index(\".\")]\n    # go through every component in the list. If it is a single component (\"pCube1.vtx[1]\"), add it to the list. Else,\n    # add each component in the index (\"pCube1.vtx[1:5]\") to the list\n    for c in components:\n        if \":\" not in c:\n            selList.append(c)\n        else:\n            print c\n            startComponent = int(c[c.index(\"[\") + 1: c.index(\":\")])\n            endComponent = int(c[c.index(\":\") + 1:c.index(\"]\")])\n            componentType = c[c.index(\".\") + 1:c.index(\"[\")]\n            while startComponent <= endComponent:\n                selList.append(objName + \".\" + componentType + \"[\" + str(startComponent) + \"]\")\n                startComponent += 1\n\n    return selList\n    \ndef ScalePlus(): \n    v = 1.1\n    \n    b = pm.ls(sl=True)[0]\n    \n    a = pm.listRelatives(b,s=1)\n    TmpTrans = []\n    newShp = []\n    \n    for i in a:\n    \ttmtr  = pm.createNode('transform',n=('temp'+i))\n    \tpm.parent(i,tmtr,r =True, s = True)\n    \t\n    \t#nshape = pm.duplicate(i,n=('temp'+i))\n    \tpm.xform(tmtr,s=(v,v,v))\n    \tpm.makeIdentity(tmtr, apply=True, t=1, r=1, s=1 )\n    \tnewShp.append(i)\n    \tTmpTrans.append(tmtr)\n    \t\n    pm.select(cl=True)\n    \n    \n    \n    for i in newShp:\n    \tpm.select(i)\n    \tpm.rename(i,b+'_Shape_00')\n    \tpm.select(b , add=True)\n    \tpm.parent(r=True,s=True)\n    pm.delete(TmpTrans)\n    pm.select(b)\n    \ndef ScaleMinus(): \n    v = .9\n    \n    b = pm.ls(sl=True)[0]\n    \n    a = pm.listRelatives(b,s=1)\n    TmpTrans = []\n    newShp = []\n    \n    for i in a:\n    \ttmtr  = pm.createNode('transform',n=('temp'+i))\n    \tpm.parent(i,tmtr,r =True, s = True)\n    \t\n    \t#nshape = pm.duplicate(i,n=('temp'+i))\n    \tpm.xform(tmtr,s=(v,v,v))\n    \tpm.makeIdentity(tmtr, apply=True, t=1, r=1, s=1 )\n    \tnewShp.append(i)\n    \tTmpTrans.append(tmtr)\n    \t\n    pm.select(cl=True)\n    \n    \n    \n    for i in newShp:\n    \tpm.select(i)\n    \tpm.rename(i,b+'_Shape_00')\n    \tpm.select(b , add=True)\n    \tpm.parent(r=True,s=True)\n    pm.delete(TmpTrans)\n    pm.select(b) \n    \n    \n    \nCtrJntEach()\n    \n    \n    \n    \n    \n    \n    " )
        -mip 0
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "global proc Sid_rename_tool () { if (`window -q -exists Sid_rena..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "global proc Sid_rename_tool () { if (`window -q -exists Sid_rena..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Rename" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "global proc Sid_rename_tool () { if (`window -q -exists Sid_rename_toolWindow`) deleteUI Sid_rename_toolWindow;\n//UI taken from qkRename\n window -s 0 -title \"Sid_rename_tool\" -maximizeButton 0 -minimizeButton 1 Sid_rename_toolWindow;\n columnLayout;\n rowColumnLayout -numberOfColumns 1 -columnWidth 1 313 ;\n textFieldGrp -label \"Rename:\" -text \"\" -columnWidth 1 70 -columnWidth 2 235 KK_RenameRenameTFG;\n rowColumnLayout -numberOfColumns 2 -columnWidth 1 130 -columnWidth 2 170;\n intFieldGrp -label \"Start #:\" -v1 1 -columnWidth 1 68 -columnWidth 2 60 KK_RenameStartIFG;\n intFieldGrp -label \"Padding:\" -v1 2 -columnWidth 1 64 -columnWidth 2 60 KK_RenamePaddingIFG;\n setParent..;\n rowColumnLayout -numberOfColumns 1 -columnWidth 1 306 ;\n button -h 23 -w 100 -l \"Rename and Number\" -bgc 0.3 0.2 0.2 -c \"Rename_SidName(3)\";\n setParent..;\n separator -style \"in\" -w 315 ;\n rowColumnLayout -numberOfColumns 3 -cs 1 10 -cs 3 4 -columnWidth 1 84 -columnWidth 2 104 -columnWidth 3 104;\n text -label \"Remove...\" -align \"left\";\n button -h 23 -w 60 -l \"First Character-->\" -bgc 0.3 0.2 0.2 -c \"remove_FirstChr()\";\n button -h 23 -w 60 -l \"<--Last Character\" -bgc 0.3 0.2 0.2 -c \"remove_LastChr()\";\n setParent..;\n rowColumnLayout -numberOfColumns 3 -cs 1 10 -columnWidth 1 70 -columnWidth 2 170 -columnWidth 3 56;\n text -l \" Hash Rename:\";\n textFieldGrp -label \"\" -text \"name_####_suffix\" -columnWidth 1 10 -columnWidth 2 153 Rename_js_hashRenameTFG;\n button -h 23 -w 48 -l \"Rename\" -bgc 0.3 0.2 0.2 -c \"Rename_js_hashRename_MainProc()\";\n setParent..;\n separator -style \"in\" -w 315 ;\n rowColumnLayout -numberOfColumns 3 -cs 1 10 -columnWidth 1 55 -columnWidth 2 185 -columnWidth 3 56;\n text -l \"(Before)\";\n textFieldGrp -label \"\" -text \"prefix_\" -columnWidth 1 10 -columnWidth 2 168 prefixTFG;\n button -h 21 -l \"Add\" -bgc 0.3 0.2 0.2 -c \"Rename_SidName(1)\";\n setParent..;\n text -l \"\" -h 1;\n rowColumnLayout -numberOfColumns 3 -cs 1 10 -columnWidth 1 55 -columnWidth 2 185 -columnWidth 3 56;\n text -l \"(After)\";\n textFieldGrp -label \"\" -text \"_suffix\" -columnWidth 1 10 -columnWidth 2 168 suffixTFG;\n button -h 21 -l \"Add\" -bgc 0.3 0.2 0.2 -c \"Rename_SidName(2)\";\n setParent..;\n separator -style \"in\" -w 315 ;\n rowColumnLayout -numberOfColumns 5 -columnWidth 1 61 -columnWidth 2 61 -columnWidth 3 61 -columnWidth 4 61 -columnWidth 5 62;\n button -l \"grp\" -bgc 0.3 0.2 0.2 -c \"SidSuffix _grp\";\n button -l \"geo\" -bgc 0.3 0.2 0.2 -c \"SidSuffix _geo\";\n button -l \"ctl\" -bgc 0.3 0.2 0.2 -c \"SidSuffix _ctl\";\n button -l \"jnt\" -bgc 0.3 0.2 0.2 -c \"SidSuffix _jnt\";\n button -l \"drv\" -bgc 0.3 0.2 0.2 -c \"SidSuffix _drv\";\n setParent ..;\n separator -style \"in\" -w 315 ;\n rowColumnLayout -numberOfColumns 1 -columnWidth 1 313 ;\n textFieldGrp -label \"Search:\" -text \"pasted__\" -columnWidth 1 70 -columnWidth 2 233 SearchAndReplace_SearchTFG;\n textFieldGrp -label \"Replace:\" -text \"\" -columnWidth 1 70 -columnWidth 2 233 SearchAndReplace_ReplaceTFG;\n radioButtonGrp -bgc 0.15 0.25 0.15 -numberOfRadioButtons 3 -label \"\" -sl 1 -labelArray3 \"Hierarchy\" \"Selected\" \"All\" -columnWidth 1 30 SearchAndReplace_OptionRBG;\n rowColumnLayout -numberOfColumns 1 -columnWidth 1 305 ;\n button  -h 23 -w 40-l \"Apply\" -bgc 0.3 0.2 0.2 -c \"SearchAndRename()\";\n\n setParent..;\n setParent..;\n window -e -wh 313 302 Sid_rename_toolWindow;\n showWindow Sid_rename_toolWindow;\n } global proc remove_LastChr() {\tstring $jointSelected[0]= `ls -sl -long`;\n int $jointSelectedSize = size($jointSelected);\n for ($i=$jointSelectedSize-1;\n $i >= 0;\n $i--) { string $obj = $jointSelected[$i];\n string $pathNodes[];\n int $numTokens = tokenize($obj, \"|\", $pathNodes);\n string $myObj = $pathNodes[$numTokens - 1];\n int $stringSize = size($myObj);\n if ($stringSize > 1) { string $newName = `substring $myObj 1 ($stringSize - 1)`;\n rename $obj $newName;\n } } } global proc remove_FirstChr() {\tstring $jointSelected[0]= `ls -sl -long`;\n int $jointSelectedSize = size($jointSelected);\n for ($i=$jointSelectedSize-1;\n $i >= 0;\n $i--) { string $obj = $jointSelected[$i];\n string $pathNodes[];\n int $numTokens = tokenize($obj, \"|\", $pathNodes);\n string $myObj = $pathNodes[$numTokens - 1];\n int $stringSize = size($myObj);\n if ($stringSize > 1) { string $newName = `substring $myObj 2 $stringSize`;\n rename $obj $newName;\n } } } global proc KK_RenameSelectedShape() {\tstring $objects[] = `ls -sl`;\n string $objTransform;\n for ($objTransform in $objects) {\t\tstring $shapes[] = `listRelatives -s -f $objTransform`;\n string $pathTransNodes[];\n int $numTokens = tokenize($objTransform, \"|\", $pathTransNodes);\n string $myTransObj = $pathTransNodes[$numTokens - 1];\n string $obj;\n int $num = 1;\n for ($obj in $shapes) { string $newShapeName = ($myTransObj + \"_Shape\" + $num);\n rename $obj $newShapeName;\n $num += 1;\n } } } global proc SearchAndRename() \n{ string $search = `textFieldGrp -q -tx SearchAndReplace_SearchTFG`;\n string $replace = `textFieldGrp -q -tx SearchAndReplace_ReplaceTFG`;\n string $options = `radioButtonGrp -q -sl SearchAndReplace_OptionRBG`;\n if ($options == 1) { searchReplaceNames $search $replace \"hierarchy\";\n } else if ($options == 2) { searchReplaceNames $search $replace \"selected\";\n } else if ($options == 3) { searchReplaceNames $search $replace \"all\";\n } } global proc SidSuffix(string $suffix) {string $jointSelected[0]= `ls -sl -long`;\n int $jointSelectedSize = size($jointSelected);\n for ($i=$jointSelectedSize-1;\n $i >= 0;\n $i--) { string $obj = $jointSelected[$i];\n\n string $pathNodes[];\n int $numTokens = tokenize($obj, \"|\", $pathNodes);\n string $myObj = $pathNodes[$numTokens - 1];\n rename $obj ($myObj + $suffix);\n } } global proc Rename_js_hashRename_MainProc() { string $search = `textFieldGrp -q -tx Rename_js_hashRenameTFG`;\n if ($search != \"\") { evalEcho (\"Rename_js_hashRename \\\"\" + $search + \"\\\"\");\n } } global proc string Rename_js_replaceHash (string $string, int $number) {    string $result;\n string $substring = \"#+\";\n $substring = `match $substring $string`;\n string $substringNum = substituteAllString($substring, \"#\", \"0\");\n string $numString = $number;\n string $newString = ($substringNum + $numString);\n int $fullSize =`size($newString)`;\n int $numSize = `size($numString)`;\n if ($numSize < size($substringNum)) {        $numSize = $numSize+1;\n $numString = `substring $newString $numSize $fullSize`;\n } $result = `substitute $substring $string $numString`;\n return $result;\n } global proc string[] Rename_js_hashRename (string $newName) { string $objs[0];\n int $count = 0;\n string $return[0];\n $objs = `ls -sl`;\n if (size($objs) > 0) { $node = `createNode unknown`;\n addAttr -ln \"selObjects\" -at message -multi -im 0;\n for ($obj in $objs) { connectAttr -na ($obj + \".message\") ($node + \".selObjects\");\n } $con = `listConnections ($node + \".selObjects\")`;\n for ($x = 0;\n $x < size($con);\n $x++) { string $tmp[0];\n $tmp = `listConnections ($node + \".selObjects[\"+$x+\"]\")`;\n string $object = $tmp[0];\n $name = `Rename_js_replaceHash $newName ($x + 1)`;\n $result = `rename $object $name`;\n print (\"// Renamed: \" + $object + \" --> \" + $result + \"\\n\");\n } $return = `listConnections ($node + \".selObjects\")`;\n delete $node;\n } if ((`size $return`) > 0) select $return;\n return $return;\n } proc string getShortName(string $obj) { string $ret = \"\";\n if ($obj == \"\") return $ret;\n string $parts[];\n int $cnt = tokenize($obj, \"|\", $parts);\n if ($cnt <= 0) $ret = $obj;\n else $ret = $parts[($cnt-1)];\n return $ret;\n } proc string chop(string $str) { string $ret = \"\";\n int $cnt = size($str);\n if ($cnt <= 1) return $ret;\n $ret = `substring $str 1 ($cnt-1)`;\n\n return $ret;\n } global proc Rename_SidName(int $mode) {string $objs[] = `ls -sl -long`;\n int $objCnt = size($objs);\n int $i;\n string $prefix = `textFieldGrp -q -tx prefixTFG`;\n string $suffix = `textFieldGrp -q -tx suffixTFG`;\n string $rename = `textFieldGrp -q -tx KK_RenameRenameTFG`;\n int $start = `intFieldGrp -q -v1 KK_RenameStartIFG`;\n int $padding = `intFieldGrp -q -v1 KK_RenamePaddingIFG`;\n string $shortName;\n string $newShortName;\n string $newName;\n for ($i=0;\n $i < $objCnt;\n ++$i) { $obj = $objs[$i];\n $shortName = getShortName($obj);\n switch ($mode) { case 1: if ($prefix == \"\") { warning -sl 0 (\"Can't add prefix, prefix entry field is blank!\");\n return;\n } $newShortName = ($prefix + $shortName);\n break;\n case 2: if ($suffix == \"\") { warning -sl 0 (\"Can't add suffix, suffix entry field is blank!\");\n return;\n } $newShortName = ($shortName + $suffix);\n break;\n case 3: if ($rename == \"\") { warning -sl 0 (\"Can't rename and number, rename entry field is blank!\");\n return;\n } int $n = $i + $start;\n string $padStr = \"\";\n for ($p=1;\n $p < $padding;\n ++$p) { if ($n < pow(10, $p) ) $padStr += \"0\";\n } $newShortName = ($rename+$padStr+$n);\n break;\n } $newName = `rename $obj $newShortName`;\n select -r $newName;\n string $newLongNames[] = `ls -sl -long`;\n string $newLongName = $newLongNames[0];\n for ($j=0;\n $j < $objCnt;\n ++$j) { string $tmp = $objs[$j];\n $tmp += \"|\";\n $tmp = `substitute ($obj+\"|\") $tmp (\"|\"+$newLongName+\"|\")`;\n $tmp = chop($tmp);\n $objs[$j] = $tmp;\n } } select $objs;\n } Sid_rename_tool ()" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import pymel.core as pm\nfrom pymel.core import *    \n\nif window('TheRiggersToolkitX',ex=True):\n\tdeleteUI('TheRiggersToolkitX')\n\n\nif cmds.windowPref('TheRiggersToolkitX', exists=True ):\n   cmds.windowPref( 'TheRiggersToolkitX', r=1 )\n\t\ntemplate = uiTemplate('TheRiggersToolkitXtemplate', force=True)\ntemplate.define(formLayout)\n\nwind = pm.window( 'TheRiggersToolkitX',t = 'Sid_SpinTools',w=300,h=330,s=1,bgc = [(.17),(.18),(.19)])\nTab = tabLayout('Tabs',p='TheRiggersToolkitX',tc =1,stb=1,snt=1,ntc = 'NewTab()')\n\nToolsFrame = pm.frameLayout('ToolsFrame',p='Tabs',cll=1,l = 'Cloth Setup')\nToolsSc = pm.formLayout('Tools',p ='ToolsFrame' )\nEd1 = pm.button('ed1',l= 'Edge One',w = 140,h= 30,p ='Tools',c = 'edge1()')\nEd1In = pm.textScrollList('ed1In',w = 140,h= 30,p ='Tools')\nEd2 = pm.button('ed2',l= 'Edge Two',w = 140,h= 30,p ='Tools',c = 'edge2()')\nEd2In = pm.textScrollList('ed2In',w = 140,h= 30,p ='Tools')\n\nrdCl = pm.radioCollection('rdCll',p =  'Tools')\nrdb1 = pm.radioButton(l = '4 Small Ctrls')\nrdb2 = pm.radioButton(l = '8 Small Ctrls',sl =1)\ncSBtn = pm.button('CrtStp',l= 'Create Setup',h= 30,p ='Tools',bgc = ([.4,.8,.5]))\n\nchannelbox = pm.channelBox('ChannelBox',p = 'Tabs',ac = [(.8),(.9),(1)],bc = [(.3),(.3),(.3)],ekf =1,fw=150,hlc=[(.2),(.6),(.4)],hol =1,ln=1,nn=0,m=1,pre = 5,)\nout = pm.formLayout('Outliner',p='Tabs',w=300,h=330)\noutpanel = pm.outlinerPanel(p = 'Outliner')\n\npm.formLayout('Tools',e=1,\n\tattachForm = [\n\t(Ed1,'top',5),\n\n\t(Ed1In,'top',5),\n\t\n\t\n\t(Ed1,'left',5),\n\t(Ed2,'left',5),\n\t(rdb1,'left',5),\n\t\n\t(cSBtn,'right',5),\n\t\n\t],\n\tac = [\n    (Ed2,'top',7,Ed1),\n    (Ed2In,'top',7,Ed1),\n    (rdb1,'top',13,Ed2In),\n    (rdb2,'top',13,Ed2In),\n    (cSBtn,'top',7,Ed2In),\n\n    \n\t\n\t(Ed1In,'left',10,Ed1),\n\t(Ed2In,'left',10,Ed2),\n\t(rdb2,'left',5,rdb1),\n\t(cSBtn,'left',5,rdb2),\n\t\n\t\n\t])\n\n\n\n\nToolsForm = pm.formLayout('ToolkitForm',p='Tools')\n\n\n\npm.formLayout('Outliner',e =1,af=[(outpanel,'top',0),(outpanel,'left',0),(outpanel,'right',0),(outpanel,'bottom',0)])\n\n\nwith wind:\n\twith template:\n\t\twith Tab:\n\t\t\tprint ('Launching ToolkitX')\n\t\t\t\n\ndef NewTab():\n    pm.scrollField( 'Notes',p = 'Tabs', bgc = [(.2),(.2),(.2)],hlc = [(.6),(.4),(.2)],en =1 )\n    Tab = tabLayout('Tabs',e =1 , snt=0)\n    \n    \n    \n    \n    \n    \n    \ndef edge1():\n    sl = cmds.ls(sl=1)\n    if pm.objectType(sl[0])=='mesh':\n        for i in sl:\n            pm.textScrollList('ed1In',e=1,a = i)\n    else:\n        pm.warning('Make sure you ahve selected a edge')\n    \ndef edge2():\n    sl = cmds.ls(sl=1)\n    if pm.objectType(sl[0])=='mesh':\n        for i in sl:\n            pm.textScrollList('ed2In',e=1,a = i)\n    \n    else:\n        pm.warning('Make sure you ahve selected a edge')\n\n\n\n\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "tmp" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "tmp" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import pymel.core as pm\nfrom pymel.core import *    \n\nif window('TheRiggersToolkitX',ex=True):\n\tdeleteUI('TheRiggersToolkitX')\n\n\nif cmds.windowPref('TheRiggersToolkitX', exists=True ):\n   cmds.windowPref( 'TheRiggersToolkitX', r=1 )\n\t\ntemplate = uiTemplate('TheRiggersToolkitXtemplate', force=True)\ntemplate.define(formLayout)\n\nwind = pm.window( 'TheRiggersToolkitX',t = 'Sid_SpinTools',w=300,h=330,s=1,bgc = [(.17),(.18),(.19)])\nTab = tabLayout('Tabs',p='TheRiggersToolkitX',tc =1,stb=1,snt=1,ntc = 'NewTab()')\n\nToolsFrame = pm.frameLayout('ToolsFrame',p='Tabs',cll=1,l = 'Cloth Setup')\nToolsSc = pm.formLayout('Tools',p ='ToolsFrame' )\nEd1 = pm.button('ed1',l= 'Edge One',w = 140,h= 30,p ='Tools',c = 'edge1()')\nEd1In = pm.textScrollList('ed1In',w = 140,h= 30,p ='Tools')\nEd2 = pm.button('ed2',l= 'Edge Two',w = 140,h= 30,p ='Tools',c = 'edge2()')\nEd2In = pm.textScrollList('ed2In',w = 140,h= 30,p ='Tools')\n\nrdCl = pm.radioCollection('rdCll',p =  'Tools')\nrdb1 = pm.radioButton(l = '4 Small Ctrls')\nrdb2 = pm.radioButton(l = '8 Small Ctrls',sl =1)\ncSBtn = pm.button('CrtStp',l= 'Create Setup',h= 30,p ='Tools',bgc = ([.4,.8,.5]))\n\nchannelbox = pm.channelBox('ChannelBox',p = 'Tabs',ac = [(.8),(.9),(1)],bc = [(.3),(.3),(.3)],ekf =1,fw=150,hlc=[(.2),(.6),(.4)],hol =1,ln=1,nn=0,m=1,pre = 5,)\nout = pm.formLayout('Outliner',p='Tabs',w=300,h=330)\noutpanel = pm.outlinerPanel(p = 'Outliner')\n\npm.formLayout('Tools',e=1,\n\tattachForm = [\n\t(Ed1,'top',5),\n\n\t(Ed1In,'top',5),\n\t\n\t\n\t(Ed1,'left',5),\n\t(Ed2,'left',5),\n\t(rdb1,'left',5),\n\t\n\t(cSBtn,'right',5),\n\t\n\t],\n\tac = [\n    (Ed2,'top',7,Ed1),\n    (Ed2In,'top',7,Ed1),\n    (rdb1,'top',13,Ed2In),\n    (rdb2,'top',13,Ed2In),\n    (cSBtn,'top',7,Ed2In),\n\n    \n\t\n\t(Ed1In,'left',10,Ed1),\n\t(Ed2In,'left',10,Ed2),\n\t(rdb2,'left',5,rdb1),\n\t(cSBtn,'left',5,rdb2),\n\t\n\t\n\t])\n\n\n\n\nToolsForm = pm.formLayout('ToolkitForm',p='Tools')\n\n\n\npm.formLayout('Outliner',e =1,af=[(outpanel,'top',0),(outpanel,'left',0),(outpanel,'right',0),(outpanel,'bottom',0)])\n\n\nwith wind:\n\twith template:\n\t\twith Tab:\n\t\t\tprint ('Launching ToolkitX')\n\t\t\t\n\ndef NewTab():\n    pm.scrollField( 'Notes',p = 'Tabs', bgc = [(.2),(.2),(.2)],hlc = [(.6),(.4),(.2)],en =1 )\n    Tab = tabLayout('Tabs',e =1 , snt=0)\n    \n    \n    \n    \n    \n    \n    \ndef edge1():\n    sl = cmds.ls(sl=1)\n    if pm.objectType(sl[0])=='mesh':\n        for i in sl:\n            pm.textScrollList('ed1In',e=1,a = i)\n    else:\n        pm.warning('Make sure you ahve selected a edge')\n    \ndef edge2():\n    sl = cmds.ls(sl=1)\n    if pm.objectType(sl[0])=='mesh':\n        for i in sl:\n            pm.textScrollList('ed2In',e=1,a = i)\n    \n    else:\n        pm.warning('Make sure you ahve selected a edge')\n\n\n\n\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "'''\n    SCRIPT NAME: \n        fari_deformersWeightsEditor\n    \n    AUTHOR: \n        Paolo Farinello - paolo.farinello@gmail.com\n        \n    DESCRIPTION:\n        Enables operations such as import/export, copy, mirror and flip on deformers weights, focusing on deformers which differ from the skinCluster.\n        Affected deformers are: blend shape, cluster, lattice, non-linear, shrinkwrap and wire deformers.\n    \n    INSTALL:\n        1. Put the script file in Maya scripts folder (usually C:\\Users\\User\\Documents\\maya\\20xx\\scripts)\n        2. In a python tab type the following: import fari_deformersWeightsEditor; reload(fari_deformersWeightsEditor)  \n    \n    LOG:        \n        Version: 1.0.0\n        Date: 10 August 2021\n        - First release          \n'''\n\nimport maya.api.OpenMaya as om\nimport maya.api.OpenMayaAnim as oma\nimport maya.cmds as cmds\nimport os\nimport sys\nimport json\nfrom __builtin__ import object as builtin_object\n    \nclass DeformersWeightsEditor(builtin_object):\n\n    @classmethod\n    def showUI(cls):\n        win = cls()\n        win.create()\n        cmds.textFieldButtonGrp(win.importExportGroup,edit=True,fileName=win.workingDir)\n        return win\n\n    def __init__(self):\n        super(DeformersWeightsEditor,self).__init__()\n        self.winName = 'DWEwindow'\n        self.winTitle = 'Deformers Weights Editor'\n        self.winSize = (600,540)\n        self.workingDir = cmds.workspace(query=True,directory=True)\n        self.validDeformers = ['blendShape','cluster','ffd','nonLinear','shrinkWrap','wire']\n        self.symmetryAxis = {1:(0,[-1,1,1]),2:(1,[1,-1,1]),3:(2,[1,1,-1])}\n        self.copySourceInfo = []\n        self.copyTargetInfo = []\n\n    def create(self):\n        if(cmds.window(self.winName,exists=True)):\n            cmds.deleteUI(self.winName,window=True)\n        cmds.window(self.winName,title=self.winTitle,widthHeight=self.winSize,sizeable=True)\n        \n        self.mainForm = cmds.formLayout(numberOfDivisions=100)\n        self.deformerFrame = cmds.frameLayout(parent=self.mainForm,label='Deformer Select',collapsable=True)\n        self.importExportFrame = cmds.frameLayout(parent=self.mainForm,label='Weights Import/Export',collapsable=True)  \n        self.mirrorFrame = cmds.frameLayout(parent=self.mainForm,label='Weights Mirror',collapsable=True) \n        self.copyFrame = cmds.frameLayout(parent=self.mainForm,label='Weights Copy',collapsable=True)              \n        cmds.formLayout(self.mainForm,edit=True,\n                        attachForm=([self.deformerFrame,'top',0],[self.deformerFrame,'left',0],[self.deformerFrame,'right',0],[self.importExportFrame,'left',0],[self.importExportFrame,'right',0],[self.mirrorFrame,'left',0],[self.mirrorFrame,'right',0],[self.copyFrame,'left',0],[self.copyFrame,'right',0]),\n                        attachControl=([self.importExportFrame,'top',10,self.deformerFrame],[self.mirrorFrame,'top',10,self.importExportFrame],[self.copyFrame,'top',10,self.mirrorFrame]))\n       \n        self.deformerForm = cmds.formLayout(parent=self.deformerFrame,numberOfDivisions=100)\n        self.meshGroup = cmds.textFieldButtonGrp(parent=self.deformerForm,label='Mesh:',buttonLabel='<<<',adjustableColumn=2,columnAttach3=['left','left','left'],columnWidth3=[30,100,100],columnOffset3=[0,10,10],buttonCommand=self.meshButton,changeCommand=self.meshText)\n        self.deformersText = cmds.text(parent=self.deformerForm,label='Deformers:')        \n        self.deformersList = cmds.textScrollList(parent=self.deformerForm,allowMultiSelection=False,numberOfRows=1,height=100,width=455)        \n        cmds.formLayout(self.deformerForm,edit=True,\n                        attachForm=([self.meshGroup,'top',5],[self.meshGroup,'left',5],[self.meshGroup,'right',5],[self.deformersText,'left',5]),\n                        attachControl=([self.deformersText,'top',5,self.meshGroup],[self.deformersList,'top',5,self.meshGroup],[self.deformersList,'left',5,self.deformersText]))                \n\n        self.importExportForm = cmds.formLayout(parent=self.importExportFrame,numberOfDivisions=100)\n        self.importExportGroup = cmds.textFieldButtonGrp(parent=self.importExportForm,label='Start Directory:',buttonLabel='Browse',adjustableColumn=2,columnAttach3=['left','left','left'],columnWidth3=[75,100,100],columnOffset3=[0,10,10],buttonCommand=self.dirBrowser,changeCommand=self.inputDir)\n        self.loadParameters = cmds.text(parent=self.importExportForm,label='Load Parameters:')\n        self.loadVertices = cmds.radioButtonGrp(parent=self.importExportForm,numberOfRadioButtons=2,label='Algorithm:',labelArray2=['vertex index','vertex position'],select=1,columnAttach3=['left','left','left'],columnWidth3=[60,100,100],columnOffset3=[0,0,0],onCommand1=self.indexAlgorithm,onCommand2=self.positionAlgorithm)        \n        self.loadTolerance = cmds.textFieldGrp(parent=self.importExportForm,label='Tolerance:',adjustableColumn=2,columnAttach2=['left','left'],columnWidth2=[55,100],columnOffset2=[0,0],text='0.1',enable=False,changeCommand=self.setTolerance,annotation='Tolerance must be of type \"float\". Only positive, non-zero values are allowed')\n        self.saveButton = cmds.button(parent=self.importExportForm,label='Save Weights',width=150,command=self.saveWeights,annotation='Select the vertices whose weights to be saved')\n        self.loadButton = cmds.button(parent=self.importExportForm,label='Load Weights',width=150,command=self.loadWeights,annotation='Select the vertices whose weights to be loaded')        \n        cmds.formLayout(self.importExportForm,edit=True,\n                        attachForm=([self.importExportGroup,'top',5],[self.importExportGroup,'left',5],[self.importExportGroup,'right',5],[self.loadParameters,'left',5],[self.loadVertices,'left',50],[self.saveButton,'left',125]),\n                        attachControl=([self.loadParameters,'top',5,self.importExportGroup],[self.loadVertices,'top',5,self.loadParameters],[self.loadTolerance,'top',5,self.loadParameters],[self.loadTolerance,'left',50,self.loadVertices],[self.saveButton,'top',10,self.loadVertices],[self.loadButton,'top',10,self.loadVertices],[self.loadButton,'left',50,self.saveButton]))        \n        \n        self.mirrorForm = cmds.formLayout(parent=self.mirrorFrame,numberOfDivisions=100)\n        self.symmetryPlane = cmds.radioButtonGrp(parent=self.mirrorForm,numberOfRadioButtons=3,label='Symmetry Plane:',labelArray3=['YZ','XZ','XY'],select=1,columnAttach4=['left','left','left','left'],columnOffset4=[0,0,0,0],columnWidth4=[100,80,80,80],annotation='Symmertry plane refers to the selected mesh local axes')\n        self.symmetryDirection = cmds.radioButtonGrp(parent=self.mirrorForm,numberOfRadioButtons=2,label='Direction:',labelArray2=['from positive to negative','from negative to positive'],select=1,columnAttach3=['left','left','left'],columnOffset3=[0,0,0],columnWidth3=[100,200,200])\n        self.mirrorButton = cmds.button(parent=self.mirrorForm,label='Mirror Weights',command=self.mirrorWeights,annotation='Select the vertices whose weights to be mirrored',width=150) \n        self.flipButton = cmds.button(parent=self.mirrorForm,label='Flip Weights',command=self.flipWeights,annotation='Select the vertices whose weights to be flipped',width=150)        \n        cmds.formLayout(self.mirrorForm,edit=True,\n                        attachForm=([self.symmetryPlane,'top',5],[self.symmetryPlane,'left',5],[self.symmetryDirection,'left',5],[self.mirrorButton,'left',125]),\n                        attachControl=([self.symmetryDirection,'top',5,self.symmetryPlane],[self.mirrorButton,'top',10,self.symmetryDirection],[self.flipButton,'top',10,self.symmetryDirection],[self.flipButton,'left',50,self.mirrorButton]))\n        \n        self.copyForm = cmds.formLayout(parent=self.copyFrame,numberOfDivisions=100)\n        self.sourceButton = cmds.button(parent=self.copyForm,label='Source',command=self.copySource,annotation='Select the deformer to copy weights from',width=100) \n        self.sourceText = cmds.text(parent=self.copyForm,label=' - Select a valid deformer from the deformers list above')\n        self.targetButton = cmds.button(parent=self.copyForm,label='Target',command=self.copyTarget,annotation='Select the deformer to copy weights to',width=100)         \n        self.targetText = cmds.text(parent=self.copyForm,label=' - Select a valid deformer from the deformers list above')\n        self.copyButton = cmds.button(parent=self.copyForm,label='Copy',command=self.copyWeights,annotation='Select valid source and target deformers',width=150) \n        cmds.formLayout(self.copyForm,edit=True,\n                        attachForm=([self.sourceButton,'top',5],[self.sourceButton,'left',10],[self.sourceText,'top',10],[self.targetButton,'left',10],[self.copyButton,'left',225]),\n                        attachControl=([self.sourceText,'left',10,self.sourceButton],[self.targetButton,'top',5,self.sourceButton],[self.targetText,'top',15,self.sourceText],[self.targetText,'left',10,self.targetButton],[self.copyButton,'top',5,self.targetButton]))        \n\n        cmds.showWindow()\n       \n    def getDeformers(self,target):        \n        try:\n            selList = om.MSelectionList()\n            selList.add(target)\n        except RuntimeError:\n            raise ValueError('Current scene does not contain any \"{Name}\" node'.format(Name=target))                \n        targetObj = selList.getDependNode(0)\n        targetType = targetObj.apiTypeStr\n        if (targetType == 'kTransform'):        \n            targetDAG = selList.getDagPath(0)\n            targetShape = targetDAG.extendToShape(0)\n            targetObj = targetShape.node()\n            targetType = targetObj.apiTypeStr\n        if not (targetType == 'kMesh'):    \n            raise ValueError('Select a valid mesh to display its deformers')\n        deformersList = []\n        targetFn = om.MFnDependencyNode(targetObj)\n        targetPlug_IOG = targetFn.findPlug('instObjGroups',True)\n        IOG_indexArray = targetPlug_IOG.getExistingArrayAttributeIndices()\n        for index_IOG in IOG_indexArray:\n            targetPlug_OG = targetPlug_IOG.elementByLogicalIndex(index_IOG).child(0)        \n            OG_indexArray = targetPlug_OG.getExistingArrayAttributeIndices()\n            for index_OG in OG_indexArray:\n                deformerSet_DSMplug = targetPlug_OG.elementByLogicalIndex(index_OG).connectedTo(False,True)\n                if deformerSet_DSMplug:\n                    deformerSet_obj = deformerSet_DSMplug[0].node()                                             \n                    deformerSet_Fn = om.MFnDependencyNode(deformerSet_obj)\n                    try:\n                        deformerSet_UBplug = deformerSet_Fn.findPlug('usedBy',True)\n                        UB_indexArray = deformerSet_UBplug.getExistingArrayAttributeIndices()\n                    except RuntimeError:\n                        wrongSet = deformerSet_Fn.name()\n                        cmds.warning('Node \"{Name}\" does not have any attribute \"usedBy\"'.format(Name=wrongSet))\n                        continue\n                    for index_UB in UB_indexArray:\n                        deformerPlug_message = deformerSet_UBplug.elementByLogicalIndex(index_UB).connectedTo(True,False)\n                        if deformerPlug_message:\n                            deformer_obj = deformerPlug_message[0].node()                                        \n                            deformer_Fn = om.MFnDependencyNode(deformer_obj)\n                            deformer_name = deformer_Fn.name()\n                            deformer_type = deformer_Fn.typeName\n                            if deformer_type in self.validDeformers:\n                                deformersList.append({'Name':deformer_name,'Type':deformer_type})\n        if deformersList:\n            def customSort(listElement):\n                return listElement['Type']+listElement['Name']\n            deformersList.sort(key=customSort)\n            return deformersList\n        else:\n            return None   \n            \n    def deformersScrollList(self,mesh):\n        cmds.textScrollList(self.deformersList,edit=True,removeAll=True)\n        try:\n            deformersList = self.getDeformers(mesh)\n        except ValueError as VE:\n            if mesh:\n                raise\n            else:\n                return\n        if deformersList:\n            for token in deformersList:\n                newEntry = token['Type'] + ' - ' + token['Name']\n                cmds.textScrollList(self.deformersList,edit=True,append=newEntry)\n        else:\n            cmds.warning('No valid deformer applies to the selected mesh')  \n           \n    def meshButton(self):\n        selList = om.MGlobal.getActiveSelectionList(orderedSelectionIfAvailable=True)      \n        numberOfItems = selList.length()\n        if numberOfItems:\n            lastItem = selList.getSelectionStrings(numberOfItems-1)[0]\n        else:\n            lastItem = ''\n        cmds.textFieldButtonGrp(self.meshGroup,edit=True,text=lastItem)\n        self.deformersScrollList(lastItem)\n        \n    def meshText(self,input_text):\n        self.deformersScrollList(input_text)        \n\n    def getTargetShape(self):\n        target = cmds.textFieldButtonGrp(self.meshGroup,query=True,text=True)\n        selection = om.MSelectionList()\n        selection.add(target)\n        target_dag = selection.getDagPath(0)\n        target_shape = target_dag.extendToShape(0)\n        return target_shape\n\n    def dirBrowser(self):\n        inputDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)\n        oldDir = inputDir\n        if not os.path.isdir(inputDir):\n            oldDir = self.workingDir\n        startDir = cmds.fileDialog2(dialogStyle=1,caption='Select Start Directory',startingDirectory=oldDir,fileMode=3)\n        if startDir:\n            cmds.textFieldButtonGrp(self.importExportGroup,edit=True,fileName=startDir[0])\n            \n    def inputDir(self,input_text):                                                                       \n        startDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)        \n        if not os.path.isdir(startDir):\n            cmds.warning('Invalid start directory: default directory will be used instead')        \n\n    def findTargetIndex(self,deformerObj,target_shape):\n        target_index = []\n        deformerFn = oma.MFnGeometryFilter(deformerObj)\n        outputGeoCount = deformerFn.numOutputConnections()\n        for index in range(0,outputGeoCount):\n            plugIndex = deformerFn.indexForOutputConnection(index)\n            outputGeo = deformerFn.getPathAtIndex(plugIndex)\n            if (outputGeo == target_shape):\n                target_index.append(plugIndex)\n                break\n        return target_index\n                                                 \n    def getDeformerWeights(self,Target=None,ID=None,DeformerName=None):        \n        weightsMap = {}\n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()     \n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist')            \n        else:\n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]            \n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))\n        if ID:\n            memberID = ID\n            nonMemberID = []\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in ID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            component_fn = om.MFnSingleIndexedComponent() \n            vtx_component = component_fn.create(om.MFn.kMeshVertComponent)\n            component_fn.addElements(ID) \n            vertices_iterator = om.MItMeshVertex(target_shape,vtx_component) \n            while not vertices_iterator.isDone():\n                current_vtxComponent = vertices_iterator.currentItem()\n                if not setMembers.hasItem((target_shape,current_vtxComponent)):\n                    current_index = vertices_iterator.index()\n                    nonMemberID.append(current_index)\n                    memberID.remove(current_index)\n                vertices_iterator.next()                 \n        else:\n            memberID = []\n            nonMemberID = []\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    current_vtxComponent = vertices_iterator.currentItem()\n                    if setMembers.hasItem((component[0],current_vtxComponent)):\n                        memberID.append(vertices_iterator.index())\n                    else:\n                        nonMemberID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()                      \n        deformerPlug_WL = deformerFn.findPlug('weightList',True)\n        WL_indexArray = deformerPlug_WL.getExistingArrayAttributeIndices() \n        if target_index[0] in WL_indexArray:\n            deformerPlug_W = deformerPlug_WL.elementByLogicalIndex(target_index[0]).child(0)\n            W_indexArray = deformerPlug_W.getExistingArrayAttributeIndices()\n            for token in W_indexArray:\n                if token in memberID:\n                    weightsMap.setdefault(token,deformerPlug_W.elementByLogicalIndex(token).asFloat())\n                    memberID.remove(token)\n        for token in memberID:\n            weightsMap.setdefault(token,1)\n        for token in nonMemberID:\n            weightsMap.setdefault(token,0)\n        if weightsMap:\n            return weightsMap \n            \n    def getBlendShapeWeights(self,Target=None,ID=None,DeformerName=None):        \n        weightsMap = {}\n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()\n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist') \n        else:                \n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]\n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))        \n        if ID:\n            memberID = ID\n            nonMemberID = []\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in ID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            component_fn = om.MFnSingleIndexedComponent() \n            vtx_component = component_fn.create(om.MFn.kMeshVertComponent)\n            component_fn.addElements(ID) \n            vertices_iterator = om.MItMeshVertex(target_shape,vtx_component) \n            while not vertices_iterator.isDone():\n                current_vtxComponent = vertices_iterator.currentItem()\n                if not setMembers.hasItem((target_shape,current_vtxComponent)):\n                    current_index = vertices_iterator.index()\n                    nonMemberID.append(current_index)\n                    memberID.remove(current_index)\n                vertices_iterator.next()                 \n        else:\n            memberID = []\n            nonMemberID = []\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    current_vtxComponent = vertices_iterator.currentItem()\n                    if setMembers.hasItem((component[0],current_vtxComponent)):\n                        memberID.append(vertices_iterator.index())\n                    else:\n                        nonMemberID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()      \n        deformerPlug_IT = deformerFn.findPlug('inputTarget',True)\n        IT_indexArray = deformerPlug_IT.getExistingArrayAttributeIndices() \n        if target_index[0] in IT_indexArray:\n            deformerPlug_BW = deformerPlug_IT.elementByLogicalIndex(target_index[0]).child(1)\n            BW_indexArray = deformerPlug_BW.getExistingArrayAttributeIndices()\n            for token in BW_indexArray:\n                if token in memberID:\n                    weightsMap.setdefault(token,deformerPlug_BW.elementByLogicalIndex(token).asFloat())\n                    memberID.remove(token)\n        for token in memberID:\n            weightsMap.setdefault(token,1)\n        for token in nonMemberID:\n            weightsMap.setdefault(token,0)            \n        if weightsMap:\n            return weightsMap                            \n\n    def setDeformerWeights(self,weightsMap,importDeformer,Target=None,ID=None,DeformerName=None):        \n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()     \n        if ID:\n            verticesID = ID\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in verticesID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n        else:    \n            verticesID = []        \n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    verticesID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()  \n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist') \n        else:                \n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]\n        if not (deformer_name == importDeformer):\n            answer = cmds.confirmDialog(title='Confirm',message='You are trying to import weights of \"'+importDeformer+'\" deformer into \"'+deformer_name+'\" deformer. Proceed anyway?',button=['Yes','No'],defaultButton='Yes',cancelButton='No',dismissString='No')\n            if answer == 'No':\n                status = 'aborted'\n                return status \n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))        \n        deformerPlug_WL = deformerFn.findPlug('weightList',True)\n        deformerPlug_W = deformerPlug_WL.elementByLogicalIndex(target_index[0]).child(0)\n        if weightsMap:\n            weightsMap_keys = weightsMap.keys()\n            weightsMap_items = [(int(key),weightsMap[key]) for key in weightsMap_keys]\n            weightsMap_validItems = [item for item in weightsMap_items if item[0] in verticesID]\n            for item in weightsMap_validItems:\n                deformerPlug_W.elementByLogicalIndex(item[0]).setFloat(item[1])\n            if not weightsMap_validItems:\n                status = 'failure'\n            else:\n                status = 'complete'\n        else:\n            status = 'failure'\n        return status \n\n    def setBlendShapeWeights(self,weightsMap,importDeformer,Target=None,ID=None,DeformerName=None):        \n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()       \n        if ID:\n            verticesID = ID\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in verticesID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n        else:         \n            verticesID = []        \n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    verticesID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()  \n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist') \n        else:     \n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]\n        if not (deformer_name == importDeformer):\n            answer = cmds.confirmDialog(title='Confirm',message='You are trying to import weights of \"'+importDeformer+'\" deformer into \"'+deformer_name+'\" deformer. Proceed anyway?',button=['Yes','No'],defaultButton='Yes',cancelButton='No',dismissString='No')\n            if answer == 'No':\n                status = 'aborted'\n                return status \n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))        \n        deformerPlug_IT = deformerFn.findPlug('inputTarget',True)\n        deformerPlug_BW = deformerPlug_IT.elementByLogicalIndex(target_index[0]).child(1)\n        if weightsMap:\n            weightsMap_keys = weightsMap.keys()\n            weightsMap_items = [(int(key),weightsMap[key]) for key in weightsMap_keys]\n            weightsMap_validItems = [item for item in weightsMap_items if item[0] in verticesID]        \n            for item in weightsMap_validItems:\n                deformerPlug_BW.elementByLogicalIndex(item[0]).setFloat(item[1])\n            if not weightsMap_validItems:\n                status = 'failure'\n            else:\n                status = 'complete'\n        else:\n            status = 'failure'\n        return status            \n           \n    def getVerticesPosition(self):\n        target_shape = self.getTargetShape()     \n        coordinatesTable = {}                     \n        components_selection = om.MGlobal.getActiveSelectionList()\n        components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n        if components_iterator.isDone():\n            raise ValueError('Select the mesh vertices to operate on')  \n        while not components_iterator.isDone():\n            component = components_iterator.getComponent()\n            vertices_iterator = om.MItMeshVertex(component[0],component[1])\n            if not (component[0].extendToShape(0) == target_shape): \n                raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n            while not vertices_iterator.isDone():\n                vtx_ID = vertices_iterator.index()\n                vtx_position = vertices_iterator.position(om.MSpace.kWorld)\n                coordinatesTable.setdefault(vtx_ID,[vtx_position.x,vtx_position.y,vtx_position.z])\n                vertices_iterator.next()\n            components_iterator.next() \n        if coordinatesTable:\n            return coordinatesTable   \n\n    def saveWeights(self,*args):\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')\n        target_shapeFn = om.MFnDagNode(target_shape)\n        target_transform = target_shapeFn.parent(0)                                      \n        target_transformFn = om.MFnDependencyNode(target_transform)\n        mesh_name = target_transformFn.name()                    \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')           \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_name = deformer_entry[1]  \n        if deformer_entry[0] == 'blendShape':\n            weightsMap = self.getBlendShapeWeights()\n        else:\n            weightsMap = self.getDeformerWeights()\n        coordinatesTable = self.getVerticesPosition()\n        vtx_count = len(weightsMap.keys())\n        startDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)        \n        if not os.path.isdir(startDir):\n            startDir = self.workingDir\n        save_file = cmds.fileDialog2(dialogStyle=1,caption='Save As',startingDirectory=startDir,fileMode=0,fileFilter='*.json')\n        if not save_file:\n            sys.stdout.write('Save operation aborted')\n            return None\n        file_name = save_file[0]        \n        header = {}\n        header.setdefault('FILE NAME',file_name)\n        header.setdefault('MESH NAME',mesh_name)        \n        header.setdefault('DEFORMER NAME',deformer_name)\n        header.setdefault('VERTICES COUNT',vtx_count)                \n        exportData = {}\n        exportData.setdefault('header',header)\n        exportData.setdefault('weightsMap',weightsMap)\n        exportData.setdefault('coordinatesTable',coordinatesTable)                \n        with open(file_name,mode='w') as exportFile:\n            json.dump(exportData,exportFile,indent=4,sort_keys=True)\n        sys.stdout.write('Save operation ended successfully')              \n  \n    def indexAlgorithm(self,*args):\n        cmds.textFieldGrp(self.loadTolerance,edit=True,enable=False)\n  \n    def positionAlgorithm(self,*args):\n        cmds.textFieldGrp(self.loadTolerance,edit=True,enable=True)\n  \n    def setTolerance(self,input_text):\n        try:\n            value = float(input_text)\n            if not (value>0):\n                raise ValueError\n        except ValueError as VE:\n            cmds.warning('Tolerance must be of type \"float\". Only positive, non-zero values are allowed. A default tolerance of 0.1 is applied otherwise')    \n\n    def findClosestVertices(self,vtxSourcePoint,vtxTargetMap,toleranceVal):  \n        radiusVector = om.MVector([toleranceVal,toleranceVal,toleranceVal])\n        BB_min = vtxSourcePoint - radiusVector\n        BB_max = vtxSourcePoint + radiusVector\n        BoundingBox = om.MBoundingBox(BB_min,BB_max)\n        vtxTarget_items = vtxTargetMap.items()\n        vtxIndex_list = []\n        for item in vtxTarget_items:\n            if BoundingBox.contains(item[1]):\n                vtxIndex_list.append(item[0])\n        closest_vtxInfo = {}\n        for index in vtxIndex_list:\n            distance = vtxSourcePoint.distanceTo(vtxTargetMap[index])\n            if not distance > toleranceVal:\n                closest_vtxInfo.setdefault(index,distance)\n        if closest_vtxInfo:\n            return closest_vtxInfo\n            \n    def averageWeightsMap(self,coordinatesTable,weightsMap):\n        toleranceInput = cmds.textFieldGrp(self.loadTolerance,query=True,text=True)\n        try:\n            toleranceVal = float(toleranceInput)\n            if not (toleranceVal > 0):\n                raise ValueError\n        except ValueError:\n            toleranceVal = 0.1\n        coordinatesTable_items = coordinatesTable.items()\n        vtxTargetMap = {item[0]: om.MPoint(item[1]) for item in coordinatesTable_items}                           \n        target_shape = self.getTargetShape() \n        components_selection = om.MGlobal.getActiveSelectionList()\n        components_count = 0\n        screening_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n        while not screening_iterator.isDone():\n            components_count = components_count + 1\n            screening_iterator.next()\n        if components_count == 0:\n            raise ValueError('Select the mesh vertices to operate on')  \n        components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent) \n        averageWeightsMap = {}\n        component_step = 0\n        while not components_iterator.isDone():            \n            component = components_iterator.getComponent()\n            vertices_iterator = om.MItMeshVertex(component[0],component[1])\n            if not (component[0].extendToShape(0) == target_shape): \n                raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n            vtx_count = vertices_iterator.count()\n            component_step = component_step + 1\n            pb_titleString = '...Step ' + str(component_step) + ' of ' + str(components_count) + '...'\n            pbWinName = 'DWE_PB'          \n            if cmds.window(pbWinName,exists=True):\n                cmds.deleteUI(pbWinName)\n            cmds.window(pbWinName,title=pb_titleString,sizeable=False,widthHeight=[350,50])\n            pbLayout = cmds.formLayout(numberOfDivisions=100)\n            pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=vtx_count,progress=0)\n            cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n            if cmds.windowPref(pbWinName,exists=True):\n                cmds.windowPref(pbWinName,remove=True)\n            cmds.showWindow(pbWinName)                \n            while not vertices_iterator.isDone():\n                vtx_ID = vertices_iterator.index()\n                point = vertices_iterator.position(space=om.MSpace.kWorld)\n                closest_vtxInfo = self.findClosestVertices(point,vtxTargetMap,toleranceVal)\n                avg_weight = 0\n                if closest_vtxInfo:                    \n                    closest_vtxItems = closest_vtxInfo.items()\n                    closest_vtxDistances = closest_vtxInfo.values()\n                    if 0 in closest_vtxDistances:\n                        for item in closest_vtxItems:\n                            if item[1] == 0:\n                                avg_weight = weightsMap[item[0]]\n                                break\n                    else:\n                        factor = 0\n                        for item in closest_vtxItems:\n                            avg_weight = avg_weight + weightsMap[item[0]]*1.0/item[1]\n                            factor = factor + 1.0/item[1]\n                        avg_weight = float(avg_weight) / factor  \n                averageWeightsMap.setdefault(str(vtx_ID),avg_weight)\n                vertices_iterator.next()\n                cmds.progressBar(pbControl,edit=True,step=1)\n            cmds.deleteUI(pbWinName)   \n            components_iterator.next()\n        if averageWeightsMap:\n            return averageWeightsMap\n        \n    def loadWeights(self,*args):                     \n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')        \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')           \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        startDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)        \n        if not os.path.isdir(startDir):\n            startDir = self.workingDir\n        load_file = cmds.fileDialog2(dialogStyle=1,caption='Load',startingDirectory=startDir,fileMode=1,fileFilter='*.json')\n        if not load_file:\n            sys.stdout.write('Load operation aborted')\n            return None\n        file_name = load_file[0]\n        algorithm = cmds.radioButtonGrp(self.loadVertices,query=True,select=True) \n        with open(file_name,mode='r') as importFile:\n            importData = json.load(importFile)\n        try:\n            header = importData['header']\n        except:\n            raise KeyError('Unable to find \"header\" key in import file')\n        try:\n            coordinatesTable = importData['coordinatesTable']\n        except:\n            raise KeyError('Unable to find \"coordinatesTable\" key in import file')\n        try:\n            weightsMap = importData['weightsMap']\n        except:\n            raise KeyError('Unable to find \"weightsMap\" key in import file')\n        outputMessage = {}\n        outputMessage.setdefault('complete','Load operation ended successfully')\n        outputMessage.setdefault('failure','No weight was set: check stored vertices IDs or try increasing tolerance value')                \n        outputMessage.setdefault('aborted','Load operation aborted')   \n        if algorithm == 1:         \n            if deformer_entry[0] == 'blendShape':\n                status = self.setBlendShapeWeights(weightsMap,header['DEFORMER NAME'])                \n                sys.stdout.write(outputMessage[status])\n                return\n            else: \n                status = self.setDeformerWeights(weightsMap,header['DEFORMER NAME'])            \n                sys.stdout.write(outputMessage[status])\n                return    \n        if algorithm == 2:\n            averageWeightsMap = self.averageWeightsMap(coordinatesTable,weightsMap)\n            if deformer_entry[0] == 'blendShape':\n                status = self.setBlendShapeWeights(averageWeightsMap,header['DEFORMER NAME'])                \n                sys.stdout.write(outputMessage[status])\n                return\n            else: \n                status = self.setDeformerWeights(averageWeightsMap,header['DEFORMER NAME'])            \n                sys.stdout.write(outputMessage[status])\n                return \n          \n    def mirrorWeights(self,*args):\n        symmetry_plane = cmds.radioButtonGrp(self.symmetryPlane,query=True,select=True)\n        mirror_direction = cmds.radioButtonGrp(self.symmetryDirection,query=True,select=True)\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')   \n        target_fn = om.MFnMesh(target_shape)\n        target_vtx = target_fn.numVertices\n        target_IDs = range(0,target_vtx)          \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')        \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_name = deformer_entry[1] \n        if deformer_entry[0] == 'blendShape':\n            weightsMap = self.getBlendShapeWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        else:\n            weightsMap = self.getDeformerWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        coordinatesTable = self.getVerticesPosition()\n        vtx_IDs = coordinatesTable.keys()\n        coordinatesTableFlipped = {ID: map(lambda a,b:a*b,coordinatesTable[ID],self.symmetryAxis[symmetry_plane][1]) for ID in vtx_IDs}        \n        if mirror_direction == 1:\n            targetMap = {ID: om.MPoint(coordinatesTableFlipped[ID]) for ID in vtx_IDs if coordinatesTable[ID][self.symmetryAxis[symmetry_plane][0]] < 0}                                  \n        if mirror_direction == 2:\n            targetMap = {ID: om.MPoint(coordinatesTableFlipped[ID]) for ID in vtx_IDs if coordinatesTable[ID][self.symmetryAxis[symmetry_plane][0]] > 0}                                  \n        target_items = targetMap.items()\n        targetItemsCounts = len(target_items)\n        mirrorWeightsMap = {str(ID): weightsMap[ID] for ID in vtx_IDs} \n        pbWinName = 'DWE_PB'          \n        if cmds.window(pbWinName,exists=True):\n            cmds.deleteUI(pbWinName)\n        cmds.window(pbWinName,title='...Mirroring Weights...',sizeable=False,widthHeight=[350,50])\n        pbLayout = cmds.formLayout(numberOfDivisions=100)\n        pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=targetItemsCounts,progress=0)\n        cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n        if cmds.windowPref(pbWinName,exists=True):\n            cmds.windowPref(pbWinName,remove=True)\n        cmds.showWindow(pbWinName)                 \n        for token in target_items:\n            closestPoint = target_fn.getClosestPoint(token[1],om.MSpace.kWorld)\n            component = om.MFnSingleIndexedComponent()\n            face_component = component.create(om.MFn.kMeshPolygonComponent)\n            component.addElement(closestPoint[1])\n            polyIT = om.MItMeshPolygon(target_shape,face_component) \n            face_triangles = polyIT.getTriangles(om.MSpace.kWorld)                  \n            numTriangles = len(face_triangles[0])/3\n            for counter in range(0,numTriangles):\n                vec_A = om.MVector(face_triangles[0][0+counter*3])\n                vec_B = om.MVector(face_triangles[0][1+counter*3])\n                vec_C = om.MVector(face_triangles[0][2+counter*3])\n                vec_P = om.MVector(closestPoint[0])\n                barycentric_coordinates = self.barycenter(vec_A,vec_B,vec_C,vec_P)\n                if max(barycentric_coordinates) > 0:\n                    break\n            interpolated_weight = weightsMap[face_triangles[1][0+counter*3]]*barycentric_coordinates[0] + weightsMap[face_triangles[1][1+counter*3]]*barycentric_coordinates[1] + weightsMap[face_triangles[1][2+counter*3]]*barycentric_coordinates[2]          \n            mirrorWeightsMap[str(token[0])] = interpolated_weight\n            cmds.progressBar(pbControl,edit=True,step=1)\n        cmds.deleteUI(pbWinName)              \n        if deformer_entry[0] == 'blendShape':\n            status = self.setBlendShapeWeights(mirrorWeightsMap,deformer_name)                \n            sys.stdout.write('Mirror operation ended successfully')\n            return\n        else: \n            status = self.setDeformerWeights(mirrorWeightsMap,deformer_name)            \n            sys.stdout.write('Mirror operation ended successfully')\n            return     \n            \n    def flipWeights(self,*args):\n        symmetry_plane = cmds.radioButtonGrp(self.symmetryPlane,query=True,select=True)\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')   \n        target_fn = om.MFnMesh(target_shape)\n        target_vtx = target_fn.numVertices\n        target_IDs = range(0,target_vtx)  \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')        \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_name = deformer_entry[1] \n        if deformer_entry[0] == 'blendShape':\n            weightsMap = self.getBlendShapeWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        else:\n            weightsMap = self.getDeformerWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        coordinatesTable = self.getVerticesPosition()\n        vtx_IDs = coordinatesTable.keys()\n        coordinatesTableFlipped = {ID: map(lambda a,b:a*b,coordinatesTable[ID],self.symmetryAxis[symmetry_plane][1]) for ID in vtx_IDs}                                       \n        targetMap = {ID: om.MPoint(coordinatesTableFlipped[ID]) for ID in vtx_IDs}\n        target_items = targetMap.items()\n        targetItemsCounts = len(target_items)\n        flippedWeightsMap = {}       \n        pbWinName = 'DWE_PB'          \n        if cmds.window(pbWinName,exists=True):\n            cmds.deleteUI(pbWinName)\n        cmds.window(pbWinName,title='...Flipping Weights...',sizeable=False,widthHeight=[350,50])\n        pbLayout = cmds.formLayout(numberOfDivisions=100)\n        pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=targetItemsCounts,progress=0)\n        cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n        if cmds.windowPref(pbWinName,exists=True):\n            cmds.windowPref(pbWinName,remove=True)\n        cmds.showWindow(pbWinName)              \n        for token in target_items:\n            closestPoint = target_fn.getClosestPoint(token[1],om.MSpace.kWorld)\n            component = om.MFnSingleIndexedComponent()\n            face_component = component.create(om.MFn.kMeshPolygonComponent)\n            component.addElement(closestPoint[1])\n            polyIT = om.MItMeshPolygon(target_shape,face_component) \n            face_triangles = polyIT.getTriangles(om.MSpace.kWorld)                  \n            numTriangles = len(face_triangles[0])/3\n            for counter in range(0,numTriangles):\n                vec_A = om.MVector(face_triangles[0][0+counter*3])\n                vec_B = om.MVector(face_triangles[0][1+counter*3])\n                vec_C = om.MVector(face_triangles[0][2+counter*3])\n                vec_P = om.MVector(closestPoint[0])\n                barycentric_coordinates = self.barycenter(vec_A,vec_B,vec_C,vec_P)\n                if max(barycentric_coordinates) > 0:\n                    break\n            interpolated_weight = weightsMap[face_triangles[1][0+counter*3]]*barycentric_coordinates[0] + weightsMap[face_triangles[1][1+counter*3]]*barycentric_coordinates[1] + weightsMap[face_triangles[1][2+counter*3]]*barycentric_coordinates[2]          \n            flippedWeightsMap.setdefault(str(token[0]),interpolated_weight)  \n            cmds.progressBar(pbControl,edit=True,step=1)\n        cmds.deleteUI(pbWinName)   \n        if deformer_entry[0] == 'blendShape':\n            status = self.setBlendShapeWeights(flippedWeightsMap,deformer_name)                \n            sys.stdout.write('Flip operation ended successfully')\n            return\n        else: \n            status = self.setDeformerWeights(flippedWeightsMap,deformer_name)            \n            sys.stdout.write('Flip operation ended successfully')\n            return                        \n            \n    def copySource(self,*args):\n        try:\n            source_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')\n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')\n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_type = deformer_entry[0]\n        deformer_name = deformer_entry[1]         \n        message = str(source_shape) + ' -> ' + deformer_name  \n        cmds.text(self.sourceText,edit=True,label=message)   \n        self.copySourceInfo = []\n        self.copySourceInfo.append(source_shape)     \n        self.copySourceInfo.append((deformer_type,deformer_name))           \n        \n    def copyTarget(self,*args):\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')\n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')\n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_type = deformer_entry[0]\n        deformer_name = deformer_entry[1]         \n        message = str(target_shape) + ' -> ' + deformer_name  \n        cmds.text(self.targetText,edit=True,label=message) \n        self.copyTargetInfo = []   \n        self.copyTargetInfo.append(target_shape)     \n        self.copyTargetInfo.append((deformer_type,deformer_name))             \n\n    def barycenter(self,vec_A,vec_B,vec_C,vec_P,toleranceVal=0.001):\n        barycentricCoor = [0,0,0]\n        vec_AB = vec_B - vec_A\n        vec_AC = vec_C - vec_A\n        vec_BC = vec_C - vec_B   \n        vec_CA = vec_A - vec_C             \n        vec_AP = vec_P - vec_A\n        vec_BP = vec_P - vec_B\n        vec_CP = vec_P - vec_C        \n        vec_Normal = vec_AB^vec_AC\n        factor = 1.0/(vec_Normal*vec_Normal)\n        barycentric_u = (vec_BC^vec_BP) * vec_Normal * factor        \n        if barycentric_u < -toleranceVal:                    \n            return barycentricCoor  \n        barycentric_v = (vec_CA^vec_CP) * vec_Normal * factor        \n        if barycentric_v < -toleranceVal:                    \n            return barycentricCoor                    \n        barycentric_w = (vec_AB^vec_AP) * vec_Normal * factor\n        if barycentric_w < -toleranceVal:                    \n            return barycentricCoor                                                  \n        barycentricCoor = (barycentric_u,barycentric_v,barycentric_w)\n        return barycentricCoor\n        \n    def copyWeights(self,*args):\n        if not self.copySourceInfo:\n            raise ValueError('Select a valid source deformer')          \n        if not self.copyTargetInfo:\n            raise ValueError('Select a valid target deformer')\n        source_shape = self.copySourceInfo[0]\n        source_deformerType = self.copySourceInfo[1][0]\n        source_deformer = self.copySourceInfo[1][1]  \n        target_shape = self.copyTargetInfo[0]\n        target_deformerType = self.copyTargetInfo[1][0]\n        target_deformer = self.copyTargetInfo[1][1]\n        selection = om.MSelectionList()\n        try:\n            selection.add(source_shape)\n        except:\n            raise ValueError('Source shape \"' + str(source_shape) + '\" no longer exists')\n        try:\n            selection.add(source_deformer)\n        except:\n            raise ValueError('Source deformer \"' + str(source_deformer) + '\" no longer exists')            \n        try:\n            selection.add(target_shape)\n        except:\n            raise ValueError('Target shape \"' + str(target_shape) + '\" no longer exists')            \n        try:\n            selection.add(target_deformer)\n        except:\n            raise ValueError('Target deformer \"' + str(target_deformer) + '\" no longer exists')            \n        source_fn = om.MFnMesh(source_shape)\n        source_vtx = source_fn.numVertices\n        source_IDs = range(0,source_vtx)\n        if source_deformerType == 'blendShape':\n            source_weights = self.getBlendShapeWeights(Target=source_shape,ID=source_IDs,DeformerName=source_deformer)\n        else:\n            source_weights = self.getDeformerWeights(Target=source_shape,ID=source_IDs,DeformerName=source_deformer)   \n        target_fn = om.MFnMesh(target_shape)\n        target_vtx = target_fn.numVertices \n        target_IDs = range(0,target_vtx)               \n        target_points = target_fn.getPoints(om.MSpace.kWorld)\n        target_weights = {}\n        pbWinName = 'DWE_PB'          \n        if cmds.window(pbWinName,exists=True):\n            cmds.deleteUI(pbWinName)\n        cmds.window(pbWinName,title='...Copying Weights...',sizeable=False,widthHeight=[350,50])\n        pbLayout = cmds.formLayout(numberOfDivisions=100)\n        pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=target_vtx,progress=0)\n        cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n        if cmds.windowPref(pbWinName,exists=True):\n            cmds.windowPref(pbWinName,remove=True)\n        cmds.showWindow(pbWinName)          \n        for index,pointItem in enumerate(target_points):\n            closestPoint = source_fn.getClosestPoint(pointItem,om.MSpace.kWorld)\n            component = om.MFnSingleIndexedComponent()\n            face_component = component.create(om.MFn.kMeshPolygonComponent)\n            component.addElement(closestPoint[1])\n            polyIT = om.MItMeshPolygon(source_shape,face_component) \n            face_triangles = polyIT.getTriangles(om.MSpace.kWorld)                  \n            numTriangles = len(face_triangles[0])/3\n            for counter in range(0,numTriangles):\n                vec_A = om.MVector(face_triangles[0][0+counter*3])\n                vec_B = om.MVector(face_triangles[0][1+counter*3])\n                vec_C = om.MVector(face_triangles[0][2+counter*3])\n                vec_P = om.MVector(closestPoint[0])\n                barycentric_coordinates = self.barycenter(vec_A,vec_B,vec_C,vec_P)\n                if max(barycentric_coordinates) > 0:\n                    break\n            interpolated_weight = source_weights[face_triangles[1][0+counter*3]]*barycentric_coordinates[0] + source_weights[face_triangles[1][1+counter*3]]*barycentric_coordinates[1] + source_weights[face_triangles[1][2+counter*3]]*barycentric_coordinates[2]          \n            target_weights.setdefault(index,interpolated_weight)\n            cmds.progressBar(pbControl,edit=True,step=1)\n        cmds.deleteUI(pbWinName) \n        outputMessage = {}\n        outputMessage.setdefault('complete','Copy operation ended successfully')\n        outputMessage.setdefault('failure','No weight was set')                \n        outputMessage.setdefault('aborted','Copy operation aborted')                                                                \n        if target_deformerType == 'blendShape':\n            status = self.setBlendShapeWeights(target_weights,source_deformer,Target=target_shape,ID=target_IDs,DeformerName=target_deformer)\n            sys.stdout.write(outputMessage[status])\n            return\n        else:\n            status = self.setDeformerWeights(target_weights,source_deformer,Target=target_shape,ID=target_IDs,DeformerName=target_deformer)\n            sys.stdout.write(outputMessage[status])\n            return\n\ndwe_win = DeformersWeightsEditor.showUI()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "DX" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DX" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "'''\n    SCRIPT NAME: \n        fari_deformersWeightsEditor\n    \n    AUTHOR: \n        Paolo Farinello - paolo.farinello@gmail.com\n        \n    DESCRIPTION:\n        Enables operations such as import/export, copy, mirror and flip on deformers weights, focusing on deformers which differ from the skinCluster.\n        Affected deformers are: blend shape, cluster, lattice, non-linear, shrinkwrap and wire deformers.\n    \n    INSTALL:\n        1. Put the script file in Maya scripts folder (usually C:\\Users\\User\\Documents\\maya\\20xx\\scripts)\n        2. In a python tab type the following: import fari_deformersWeightsEditor; reload(fari_deformersWeightsEditor)  \n    \n    LOG:        \n        Version: 1.0.0\n        Date: 10 August 2021\n        - First release          \n'''\n\nimport maya.api.OpenMaya as om\nimport maya.api.OpenMayaAnim as oma\nimport maya.cmds as cmds\nimport os\nimport sys\nimport json\nfrom __builtin__ import object as builtin_object\n    \nclass DeformersWeightsEditor(builtin_object):\n\n    @classmethod\n    def showUI(cls):\n        win = cls()\n        win.create()\n        cmds.textFieldButtonGrp(win.importExportGroup,edit=True,fileName=win.workingDir)\n        return win\n\n    def __init__(self):\n        super(DeformersWeightsEditor,self).__init__()\n        self.winName = 'DWEwindow'\n        self.winTitle = 'Deformers Weights Editor'\n        self.winSize = (600,540)\n        self.workingDir = cmds.workspace(query=True,directory=True)\n        self.validDeformers = ['blendShape','cluster','ffd','nonLinear','shrinkWrap','wire']\n        self.symmetryAxis = {1:(0,[-1,1,1]),2:(1,[1,-1,1]),3:(2,[1,1,-1])}\n        self.copySourceInfo = []\n        self.copyTargetInfo = []\n\n    def create(self):\n        if(cmds.window(self.winName,exists=True)):\n            cmds.deleteUI(self.winName,window=True)\n        cmds.window(self.winName,title=self.winTitle,widthHeight=self.winSize,sizeable=True)\n        \n        self.mainForm = cmds.formLayout(numberOfDivisions=100)\n        self.deformerFrame = cmds.frameLayout(parent=self.mainForm,label='Deformer Select',collapsable=True)\n        self.importExportFrame = cmds.frameLayout(parent=self.mainForm,label='Weights Import/Export',collapsable=True)  \n        self.mirrorFrame = cmds.frameLayout(parent=self.mainForm,label='Weights Mirror',collapsable=True) \n        self.copyFrame = cmds.frameLayout(parent=self.mainForm,label='Weights Copy',collapsable=True)              \n        cmds.formLayout(self.mainForm,edit=True,\n                        attachForm=([self.deformerFrame,'top',0],[self.deformerFrame,'left',0],[self.deformerFrame,'right',0],[self.importExportFrame,'left',0],[self.importExportFrame,'right',0],[self.mirrorFrame,'left',0],[self.mirrorFrame,'right',0],[self.copyFrame,'left',0],[self.copyFrame,'right',0]),\n                        attachControl=([self.importExportFrame,'top',10,self.deformerFrame],[self.mirrorFrame,'top',10,self.importExportFrame],[self.copyFrame,'top',10,self.mirrorFrame]))\n       \n        self.deformerForm = cmds.formLayout(parent=self.deformerFrame,numberOfDivisions=100)\n        self.meshGroup = cmds.textFieldButtonGrp(parent=self.deformerForm,label='Mesh:',buttonLabel='<<<',adjustableColumn=2,columnAttach3=['left','left','left'],columnWidth3=[30,100,100],columnOffset3=[0,10,10],buttonCommand=self.meshButton,changeCommand=self.meshText)\n        self.deformersText = cmds.text(parent=self.deformerForm,label='Deformers:')        \n        self.deformersList = cmds.textScrollList(parent=self.deformerForm,allowMultiSelection=False,numberOfRows=1,height=100,width=455)        \n        cmds.formLayout(self.deformerForm,edit=True,\n                        attachForm=([self.meshGroup,'top',5],[self.meshGroup,'left',5],[self.meshGroup,'right',5],[self.deformersText,'left',5]),\n                        attachControl=([self.deformersText,'top',5,self.meshGroup],[self.deformersList,'top',5,self.meshGroup],[self.deformersList,'left',5,self.deformersText]))                \n\n        self.importExportForm = cmds.formLayout(parent=self.importExportFrame,numberOfDivisions=100)\n        self.importExportGroup = cmds.textFieldButtonGrp(parent=self.importExportForm,label='Start Directory:',buttonLabel='Browse',adjustableColumn=2,columnAttach3=['left','left','left'],columnWidth3=[75,100,100],columnOffset3=[0,10,10],buttonCommand=self.dirBrowser,changeCommand=self.inputDir)\n        self.loadParameters = cmds.text(parent=self.importExportForm,label='Load Parameters:')\n        self.loadVertices = cmds.radioButtonGrp(parent=self.importExportForm,numberOfRadioButtons=2,label='Algorithm:',labelArray2=['vertex index','vertex position'],select=1,columnAttach3=['left','left','left'],columnWidth3=[60,100,100],columnOffset3=[0,0,0],onCommand1=self.indexAlgorithm,onCommand2=self.positionAlgorithm)        \n        self.loadTolerance = cmds.textFieldGrp(parent=self.importExportForm,label='Tolerance:',adjustableColumn=2,columnAttach2=['left','left'],columnWidth2=[55,100],columnOffset2=[0,0],text='0.1',enable=False,changeCommand=self.setTolerance,annotation='Tolerance must be of type \"float\". Only positive, non-zero values are allowed')\n        self.saveButton = cmds.button(parent=self.importExportForm,label='Save Weights',width=150,command=self.saveWeights,annotation='Select the vertices whose weights to be saved')\n        self.loadButton = cmds.button(parent=self.importExportForm,label='Load Weights',width=150,command=self.loadWeights,annotation='Select the vertices whose weights to be loaded')        \n        cmds.formLayout(self.importExportForm,edit=True,\n                        attachForm=([self.importExportGroup,'top',5],[self.importExportGroup,'left',5],[self.importExportGroup,'right',5],[self.loadParameters,'left',5],[self.loadVertices,'left',50],[self.saveButton,'left',125]),\n                        attachControl=([self.loadParameters,'top',5,self.importExportGroup],[self.loadVertices,'top',5,self.loadParameters],[self.loadTolerance,'top',5,self.loadParameters],[self.loadTolerance,'left',50,self.loadVertices],[self.saveButton,'top',10,self.loadVertices],[self.loadButton,'top',10,self.loadVertices],[self.loadButton,'left',50,self.saveButton]))        \n        \n        self.mirrorForm = cmds.formLayout(parent=self.mirrorFrame,numberOfDivisions=100)\n        self.symmetryPlane = cmds.radioButtonGrp(parent=self.mirrorForm,numberOfRadioButtons=3,label='Symmetry Plane:',labelArray3=['YZ','XZ','XY'],select=1,columnAttach4=['left','left','left','left'],columnOffset4=[0,0,0,0],columnWidth4=[100,80,80,80],annotation='Symmertry plane refers to the selected mesh local axes')\n        self.symmetryDirection = cmds.radioButtonGrp(parent=self.mirrorForm,numberOfRadioButtons=2,label='Direction:',labelArray2=['from positive to negative','from negative to positive'],select=1,columnAttach3=['left','left','left'],columnOffset3=[0,0,0],columnWidth3=[100,200,200])\n        self.mirrorButton = cmds.button(parent=self.mirrorForm,label='Mirror Weights',command=self.mirrorWeights,annotation='Select the vertices whose weights to be mirrored',width=150) \n        self.flipButton = cmds.button(parent=self.mirrorForm,label='Flip Weights',command=self.flipWeights,annotation='Select the vertices whose weights to be flipped',width=150)        \n        cmds.formLayout(self.mirrorForm,edit=True,\n                        attachForm=([self.symmetryPlane,'top',5],[self.symmetryPlane,'left',5],[self.symmetryDirection,'left',5],[self.mirrorButton,'left',125]),\n                        attachControl=([self.symmetryDirection,'top',5,self.symmetryPlane],[self.mirrorButton,'top',10,self.symmetryDirection],[self.flipButton,'top',10,self.symmetryDirection],[self.flipButton,'left',50,self.mirrorButton]))\n        \n        self.copyForm = cmds.formLayout(parent=self.copyFrame,numberOfDivisions=100)\n        self.sourceButton = cmds.button(parent=self.copyForm,label='Source',command=self.copySource,annotation='Select the deformer to copy weights from',width=100) \n        self.sourceText = cmds.text(parent=self.copyForm,label=' - Select a valid deformer from the deformers list above')\n        self.targetButton = cmds.button(parent=self.copyForm,label='Target',command=self.copyTarget,annotation='Select the deformer to copy weights to',width=100)         \n        self.targetText = cmds.text(parent=self.copyForm,label=' - Select a valid deformer from the deformers list above')\n        self.copyButton = cmds.button(parent=self.copyForm,label='Copy',command=self.copyWeights,annotation='Select valid source and target deformers',width=150) \n        cmds.formLayout(self.copyForm,edit=True,\n                        attachForm=([self.sourceButton,'top',5],[self.sourceButton,'left',10],[self.sourceText,'top',10],[self.targetButton,'left',10],[self.copyButton,'left',225]),\n                        attachControl=([self.sourceText,'left',10,self.sourceButton],[self.targetButton,'top',5,self.sourceButton],[self.targetText,'top',15,self.sourceText],[self.targetText,'left',10,self.targetButton],[self.copyButton,'top',5,self.targetButton]))        \n\n        cmds.showWindow()\n       \n    def getDeformers(self,target):        \n        try:\n            selList = om.MSelectionList()\n            selList.add(target)\n        except RuntimeError:\n            raise ValueError('Current scene does not contain any \"{Name}\" node'.format(Name=target))                \n        targetObj = selList.getDependNode(0)\n        targetType = targetObj.apiTypeStr\n        if (targetType == 'kTransform'):        \n            targetDAG = selList.getDagPath(0)\n            targetShape = targetDAG.extendToShape(0)\n            targetObj = targetShape.node()\n            targetType = targetObj.apiTypeStr\n        if not (targetType == 'kMesh'):    \n            raise ValueError('Select a valid mesh to display its deformers')\n        deformersList = []\n        targetFn = om.MFnDependencyNode(targetObj)\n        targetPlug_IOG = targetFn.findPlug('instObjGroups',True)\n        IOG_indexArray = targetPlug_IOG.getExistingArrayAttributeIndices()\n        for index_IOG in IOG_indexArray:\n            targetPlug_OG = targetPlug_IOG.elementByLogicalIndex(index_IOG).child(0)        \n            OG_indexArray = targetPlug_OG.getExistingArrayAttributeIndices()\n            for index_OG in OG_indexArray:\n                deformerSet_DSMplug = targetPlug_OG.elementByLogicalIndex(index_OG).connectedTo(False,True)\n                if deformerSet_DSMplug:\n                    deformerSet_obj = deformerSet_DSMplug[0].node()                                             \n                    deformerSet_Fn = om.MFnDependencyNode(deformerSet_obj)\n                    try:\n                        deformerSet_UBplug = deformerSet_Fn.findPlug('usedBy',True)\n                        UB_indexArray = deformerSet_UBplug.getExistingArrayAttributeIndices()\n                    except RuntimeError:\n                        wrongSet = deformerSet_Fn.name()\n                        cmds.warning('Node \"{Name}\" does not have any attribute \"usedBy\"'.format(Name=wrongSet))\n                        continue\n                    for index_UB in UB_indexArray:\n                        deformerPlug_message = deformerSet_UBplug.elementByLogicalIndex(index_UB).connectedTo(True,False)\n                        if deformerPlug_message:\n                            deformer_obj = deformerPlug_message[0].node()                                        \n                            deformer_Fn = om.MFnDependencyNode(deformer_obj)\n                            deformer_name = deformer_Fn.name()\n                            deformer_type = deformer_Fn.typeName\n                            if deformer_type in self.validDeformers:\n                                deformersList.append({'Name':deformer_name,'Type':deformer_type})\n        if deformersList:\n            def customSort(listElement):\n                return listElement['Type']+listElement['Name']\n            deformersList.sort(key=customSort)\n            return deformersList\n        else:\n            return None   \n            \n    def deformersScrollList(self,mesh):\n        cmds.textScrollList(self.deformersList,edit=True,removeAll=True)\n        try:\n            deformersList = self.getDeformers(mesh)\n        except ValueError as VE:\n            if mesh:\n                raise\n            else:\n                return\n        if deformersList:\n            for token in deformersList:\n                newEntry = token['Type'] + ' - ' + token['Name']\n                cmds.textScrollList(self.deformersList,edit=True,append=newEntry)\n        else:\n            cmds.warning('No valid deformer applies to the selected mesh')  \n           \n    def meshButton(self):\n        selList = om.MGlobal.getActiveSelectionList(orderedSelectionIfAvailable=True)      \n        numberOfItems = selList.length()\n        if numberOfItems:\n            lastItem = selList.getSelectionStrings(numberOfItems-1)[0]\n        else:\n            lastItem = ''\n        cmds.textFieldButtonGrp(self.meshGroup,edit=True,text=lastItem)\n        self.deformersScrollList(lastItem)\n        \n    def meshText(self,input_text):\n        self.deformersScrollList(input_text)        \n\n    def getTargetShape(self):\n        target = cmds.textFieldButtonGrp(self.meshGroup,query=True,text=True)\n        selection = om.MSelectionList()\n        selection.add(target)\n        target_dag = selection.getDagPath(0)\n        target_shape = target_dag.extendToShape(0)\n        return target_shape\n\n    def dirBrowser(self):\n        inputDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)\n        oldDir = inputDir\n        if not os.path.isdir(inputDir):\n            oldDir = self.workingDir\n        startDir = cmds.fileDialog2(dialogStyle=1,caption='Select Start Directory',startingDirectory=oldDir,fileMode=3)\n        if startDir:\n            cmds.textFieldButtonGrp(self.importExportGroup,edit=True,fileName=startDir[0])\n            \n    def inputDir(self,input_text):                                                                       \n        startDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)        \n        if not os.path.isdir(startDir):\n            cmds.warning('Invalid start directory: default directory will be used instead')        \n\n    def findTargetIndex(self,deformerObj,target_shape):\n        target_index = []\n        deformerFn = oma.MFnGeometryFilter(deformerObj)\n        outputGeoCount = deformerFn.numOutputConnections()\n        for index in range(0,outputGeoCount):\n            plugIndex = deformerFn.indexForOutputConnection(index)\n            outputGeo = deformerFn.getPathAtIndex(plugIndex)\n            if (outputGeo == target_shape):\n                target_index.append(plugIndex)\n                break\n        return target_index\n                                                 \n    def getDeformerWeights(self,Target=None,ID=None,DeformerName=None):        \n        weightsMap = {}\n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()     \n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist')            \n        else:\n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]            \n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))\n        if ID:\n            memberID = ID\n            nonMemberID = []\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in ID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            component_fn = om.MFnSingleIndexedComponent() \n            vtx_component = component_fn.create(om.MFn.kMeshVertComponent)\n            component_fn.addElements(ID) \n            vertices_iterator = om.MItMeshVertex(target_shape,vtx_component) \n            while not vertices_iterator.isDone():\n                current_vtxComponent = vertices_iterator.currentItem()\n                if not setMembers.hasItem((target_shape,current_vtxComponent)):\n                    current_index = vertices_iterator.index()\n                    nonMemberID.append(current_index)\n                    memberID.remove(current_index)\n                vertices_iterator.next()                 \n        else:\n            memberID = []\n            nonMemberID = []\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    current_vtxComponent = vertices_iterator.currentItem()\n                    if setMembers.hasItem((component[0],current_vtxComponent)):\n                        memberID.append(vertices_iterator.index())\n                    else:\n                        nonMemberID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()                      \n        deformerPlug_WL = deformerFn.findPlug('weightList',True)\n        WL_indexArray = deformerPlug_WL.getExistingArrayAttributeIndices() \n        if target_index[0] in WL_indexArray:\n            deformerPlug_W = deformerPlug_WL.elementByLogicalIndex(target_index[0]).child(0)\n            W_indexArray = deformerPlug_W.getExistingArrayAttributeIndices()\n            for token in W_indexArray:\n                if token in memberID:\n                    weightsMap.setdefault(token,deformerPlug_W.elementByLogicalIndex(token).asFloat())\n                    memberID.remove(token)\n        for token in memberID:\n            weightsMap.setdefault(token,1)\n        for token in nonMemberID:\n            weightsMap.setdefault(token,0)\n        if weightsMap:\n            return weightsMap \n            \n    def getBlendShapeWeights(self,Target=None,ID=None,DeformerName=None):        \n        weightsMap = {}\n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()\n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist') \n        else:                \n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]\n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))        \n        if ID:\n            memberID = ID\n            nonMemberID = []\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in ID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            component_fn = om.MFnSingleIndexedComponent() \n            vtx_component = component_fn.create(om.MFn.kMeshVertComponent)\n            component_fn.addElements(ID) \n            vertices_iterator = om.MItMeshVertex(target_shape,vtx_component) \n            while not vertices_iterator.isDone():\n                current_vtxComponent = vertices_iterator.currentItem()\n                if not setMembers.hasItem((target_shape,current_vtxComponent)):\n                    current_index = vertices_iterator.index()\n                    nonMemberID.append(current_index)\n                    memberID.remove(current_index)\n                vertices_iterator.next()                 \n        else:\n            memberID = []\n            nonMemberID = []\n            deformerFilter = oma.MFnGeometryFilter(deformerObj)        \n            deformerSet = deformerFilter.deformerSet\n            fnSet = om.MFnSet(deformerSet)\n            setMembers = fnSet.getMembers(flatten=True)\n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    current_vtxComponent = vertices_iterator.currentItem()\n                    if setMembers.hasItem((component[0],current_vtxComponent)):\n                        memberID.append(vertices_iterator.index())\n                    else:\n                        nonMemberID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()      \n        deformerPlug_IT = deformerFn.findPlug('inputTarget',True)\n        IT_indexArray = deformerPlug_IT.getExistingArrayAttributeIndices() \n        if target_index[0] in IT_indexArray:\n            deformerPlug_BW = deformerPlug_IT.elementByLogicalIndex(target_index[0]).child(1)\n            BW_indexArray = deformerPlug_BW.getExistingArrayAttributeIndices()\n            for token in BW_indexArray:\n                if token in memberID:\n                    weightsMap.setdefault(token,deformerPlug_BW.elementByLogicalIndex(token).asFloat())\n                    memberID.remove(token)\n        for token in memberID:\n            weightsMap.setdefault(token,1)\n        for token in nonMemberID:\n            weightsMap.setdefault(token,0)            \n        if weightsMap:\n            return weightsMap                            \n\n    def setDeformerWeights(self,weightsMap,importDeformer,Target=None,ID=None,DeformerName=None):        \n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()     \n        if ID:\n            verticesID = ID\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in verticesID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n        else:    \n            verticesID = []        \n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    verticesID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()  \n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist') \n        else:                \n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]\n        if not (deformer_name == importDeformer):\n            answer = cmds.confirmDialog(title='Confirm',message='You are trying to import weights of \"'+importDeformer+'\" deformer into \"'+deformer_name+'\" deformer. Proceed anyway?',button=['Yes','No'],defaultButton='Yes',cancelButton='No',dismissString='No')\n            if answer == 'No':\n                status = 'aborted'\n                return status \n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))        \n        deformerPlug_WL = deformerFn.findPlug('weightList',True)\n        deformerPlug_W = deformerPlug_WL.elementByLogicalIndex(target_index[0]).child(0)\n        if weightsMap:\n            weightsMap_keys = weightsMap.keys()\n            weightsMap_items = [(int(key),weightsMap[key]) for key in weightsMap_keys]\n            weightsMap_validItems = [item for item in weightsMap_items if item[0] in verticesID]\n            for item in weightsMap_validItems:\n                deformerPlug_W.elementByLogicalIndex(item[0]).setFloat(item[1])\n            if not weightsMap_validItems:\n                status = 'failure'\n            else:\n                status = 'complete'\n        else:\n            status = 'failure'\n        return status \n\n    def setBlendShapeWeights(self,weightsMap,importDeformer,Target=None,ID=None,DeformerName=None):        \n        if Target:                                                   \n            target_shape = Target\n            selection = om.MSelectionList()\n            try:\n                selection.add(target_shape)\n            except:\n                raise ValueError('Target \"' + str(target_shape) + '\" does not exist')\n            test_node = selection.getDependNode(0)\n            test_type = test_node.apiTypeStr\n            if not test_type == 'kMesh':\n                raise ValueError('Target \"' + str(target_shape) + '\" is not a valid mesh')\n        else:\n            target_shape = self.getTargetShape()       \n        if ID:\n            verticesID = ID\n            target_fn = om.MFnMesh(target_shape)\n            target_vtxCount = target_fn.numVertices\n            target_vtx = range(0,target_vtxCount)\n            for element in verticesID:\n                if not element in target_vtx:\n                    raise ValueError('Vertex ID ' + str(element) + ' does not belong to mesh \"' + str(target_shape) + '\"')\n        else:         \n            verticesID = []        \n            components_selection = om.MGlobal.getActiveSelectionList()\n            components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n            if components_iterator.isDone():\n                raise ValueError('Select the mesh vertices to operate on')\n            while not components_iterator.isDone():\n                component = components_iterator.getComponent()\n                vertices_iterator = om.MItMeshVertex(component[0],component[1])\n                if not (component[0].extendToShape(0) == target_shape): \n                    raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n                while not vertices_iterator.isDone():\n                    verticesID.append(vertices_iterator.index())\n                    vertices_iterator.next()\n                components_iterator.next()  \n        if DeformerName:\n            deformer_name = DeformerName\n            selection = om.MSelectionList()\n            try:\n                selection.add(deformer_name)\n            except:\n                raise ValueError('Deformer \"' + str(deformer_name) + '\" does not exist') \n        else:     \n            deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n            deformer_entry = deformerEntry_list[0].split(' - ')\n            deformer_name = deformer_entry[1]\n        if not (deformer_name == importDeformer):\n            answer = cmds.confirmDialog(title='Confirm',message='You are trying to import weights of \"'+importDeformer+'\" deformer into \"'+deformer_name+'\" deformer. Proceed anyway?',button=['Yes','No'],defaultButton='Yes',cancelButton='No',dismissString='No')\n            if answer == 'No':\n                status = 'aborted'\n                return status \n        deformer_selection = om.MSelectionList()\n        deformer_selection.add(deformer_name)\n        deformerObj = deformer_selection.getDependNode(0)\n        deformerFn = om.MFnDependencyNode(deformerObj)\n        target_index = self.findTargetIndex(deformerObj,target_shape)\n        if not target_index:\n            raise ValueError('\"{Name1}\" does not affect \"{Name2}\"'.format(Name1=deformer_name,Name2=target_shape))        \n        deformerPlug_IT = deformerFn.findPlug('inputTarget',True)\n        deformerPlug_BW = deformerPlug_IT.elementByLogicalIndex(target_index[0]).child(1)\n        if weightsMap:\n            weightsMap_keys = weightsMap.keys()\n            weightsMap_items = [(int(key),weightsMap[key]) for key in weightsMap_keys]\n            weightsMap_validItems = [item for item in weightsMap_items if item[0] in verticesID]        \n            for item in weightsMap_validItems:\n                deformerPlug_BW.elementByLogicalIndex(item[0]).setFloat(item[1])\n            if not weightsMap_validItems:\n                status = 'failure'\n            else:\n                status = 'complete'\n        else:\n            status = 'failure'\n        return status            \n           \n    def getVerticesPosition(self):\n        target_shape = self.getTargetShape()     \n        coordinatesTable = {}                     \n        components_selection = om.MGlobal.getActiveSelectionList()\n        components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n        if components_iterator.isDone():\n            raise ValueError('Select the mesh vertices to operate on')  \n        while not components_iterator.isDone():\n            component = components_iterator.getComponent()\n            vertices_iterator = om.MItMeshVertex(component[0],component[1])\n            if not (component[0].extendToShape(0) == target_shape): \n                raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n            while not vertices_iterator.isDone():\n                vtx_ID = vertices_iterator.index()\n                vtx_position = vertices_iterator.position(om.MSpace.kWorld)\n                coordinatesTable.setdefault(vtx_ID,[vtx_position.x,vtx_position.y,vtx_position.z])\n                vertices_iterator.next()\n            components_iterator.next() \n        if coordinatesTable:\n            return coordinatesTable   \n\n    def saveWeights(self,*args):\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')\n        target_shapeFn = om.MFnDagNode(target_shape)\n        target_transform = target_shapeFn.parent(0)                                      \n        target_transformFn = om.MFnDependencyNode(target_transform)\n        mesh_name = target_transformFn.name()                    \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')           \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_name = deformer_entry[1]  \n        if deformer_entry[0] == 'blendShape':\n            weightsMap = self.getBlendShapeWeights()\n        else:\n            weightsMap = self.getDeformerWeights()\n        coordinatesTable = self.getVerticesPosition()\n        vtx_count = len(weightsMap.keys())\n        startDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)        \n        if not os.path.isdir(startDir):\n            startDir = self.workingDir\n        save_file = cmds.fileDialog2(dialogStyle=1,caption='Save As',startingDirectory=startDir,fileMode=0,fileFilter='*.json')\n        if not save_file:\n            sys.stdout.write('Save operation aborted')\n            return None\n        file_name = save_file[0]        \n        header = {}\n        header.setdefault('FILE NAME',file_name)\n        header.setdefault('MESH NAME',mesh_name)        \n        header.setdefault('DEFORMER NAME',deformer_name)\n        header.setdefault('VERTICES COUNT',vtx_count)                \n        exportData = {}\n        exportData.setdefault('header',header)\n        exportData.setdefault('weightsMap',weightsMap)\n        exportData.setdefault('coordinatesTable',coordinatesTable)                \n        with open(file_name,mode='w') as exportFile:\n            json.dump(exportData,exportFile,indent=4,sort_keys=True)\n        sys.stdout.write('Save operation ended successfully')              \n  \n    def indexAlgorithm(self,*args):\n        cmds.textFieldGrp(self.loadTolerance,edit=True,enable=False)\n  \n    def positionAlgorithm(self,*args):\n        cmds.textFieldGrp(self.loadTolerance,edit=True,enable=True)\n  \n    def setTolerance(self,input_text):\n        try:\n            value = float(input_text)\n            if not (value>0):\n                raise ValueError\n        except ValueError as VE:\n            cmds.warning('Tolerance must be of type \"float\". Only positive, non-zero values are allowed. A default tolerance of 0.1 is applied otherwise')    \n\n    def findClosestVertices(self,vtxSourcePoint,vtxTargetMap,toleranceVal):  \n        radiusVector = om.MVector([toleranceVal,toleranceVal,toleranceVal])\n        BB_min = vtxSourcePoint - radiusVector\n        BB_max = vtxSourcePoint + radiusVector\n        BoundingBox = om.MBoundingBox(BB_min,BB_max)\n        vtxTarget_items = vtxTargetMap.items()\n        vtxIndex_list = []\n        for item in vtxTarget_items:\n            if BoundingBox.contains(item[1]):\n                vtxIndex_list.append(item[0])\n        closest_vtxInfo = {}\n        for index in vtxIndex_list:\n            distance = vtxSourcePoint.distanceTo(vtxTargetMap[index])\n            if not distance > toleranceVal:\n                closest_vtxInfo.setdefault(index,distance)\n        if closest_vtxInfo:\n            return closest_vtxInfo\n            \n    def averageWeightsMap(self,coordinatesTable,weightsMap):\n        toleranceInput = cmds.textFieldGrp(self.loadTolerance,query=True,text=True)\n        try:\n            toleranceVal = float(toleranceInput)\n            if not (toleranceVal > 0):\n                raise ValueError\n        except ValueError:\n            toleranceVal = 0.1\n        coordinatesTable_items = coordinatesTable.items()\n        vtxTargetMap = {item[0]: om.MPoint(item[1]) for item in coordinatesTable_items}                           \n        target_shape = self.getTargetShape() \n        components_selection = om.MGlobal.getActiveSelectionList()\n        components_count = 0\n        screening_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent)\n        while not screening_iterator.isDone():\n            components_count = components_count + 1\n            screening_iterator.next()\n        if components_count == 0:\n            raise ValueError('Select the mesh vertices to operate on')  \n        components_iterator = om.MItSelectionList(components_selection,om.MFn.kMeshVertComponent) \n        averageWeightsMap = {}\n        component_step = 0\n        while not components_iterator.isDone():            \n            component = components_iterator.getComponent()\n            vertices_iterator = om.MItMeshVertex(component[0],component[1])\n            if not (component[0].extendToShape(0) == target_shape): \n                raise ValueError('The selected vertices do not belong to \"{Name}\"'.format(Name=target_shape))\n            vtx_count = vertices_iterator.count()\n            component_step = component_step + 1\n            pb_titleString = '...Step ' + str(component_step) + ' of ' + str(components_count) + '...'\n            pbWinName = 'DWE_PB'          \n            if cmds.window(pbWinName,exists=True):\n                cmds.deleteUI(pbWinName)\n            cmds.window(pbWinName,title=pb_titleString,sizeable=False,widthHeight=[350,50])\n            pbLayout = cmds.formLayout(numberOfDivisions=100)\n            pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=vtx_count,progress=0)\n            cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n            if cmds.windowPref(pbWinName,exists=True):\n                cmds.windowPref(pbWinName,remove=True)\n            cmds.showWindow(pbWinName)                \n            while not vertices_iterator.isDone():\n                vtx_ID = vertices_iterator.index()\n                point = vertices_iterator.position(space=om.MSpace.kWorld)\n                closest_vtxInfo = self.findClosestVertices(point,vtxTargetMap,toleranceVal)\n                avg_weight = 0\n                if closest_vtxInfo:                    \n                    closest_vtxItems = closest_vtxInfo.items()\n                    closest_vtxDistances = closest_vtxInfo.values()\n                    if 0 in closest_vtxDistances:\n                        for item in closest_vtxItems:\n                            if item[1] == 0:\n                                avg_weight = weightsMap[item[0]]\n                                break\n                    else:\n                        factor = 0\n                        for item in closest_vtxItems:\n                            avg_weight = avg_weight + weightsMap[item[0]]*1.0/item[1]\n                            factor = factor + 1.0/item[1]\n                        avg_weight = float(avg_weight) / factor  \n                averageWeightsMap.setdefault(str(vtx_ID),avg_weight)\n                vertices_iterator.next()\n                cmds.progressBar(pbControl,edit=True,step=1)\n            cmds.deleteUI(pbWinName)   \n            components_iterator.next()\n        if averageWeightsMap:\n            return averageWeightsMap\n        \n    def loadWeights(self,*args):                     \n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')        \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')           \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        startDir = cmds.textFieldButtonGrp(self.importExportGroup,query=True,fileName=True)        \n        if not os.path.isdir(startDir):\n            startDir = self.workingDir\n        load_file = cmds.fileDialog2(dialogStyle=1,caption='Load',startingDirectory=startDir,fileMode=1,fileFilter='*.json')\n        if not load_file:\n            sys.stdout.write('Load operation aborted')\n            return None\n        file_name = load_file[0]\n        algorithm = cmds.radioButtonGrp(self.loadVertices,query=True,select=True) \n        with open(file_name,mode='r') as importFile:\n            importData = json.load(importFile)\n        try:\n            header = importData['header']\n        except:\n            raise KeyError('Unable to find \"header\" key in import file')\n        try:\n            coordinatesTable = importData['coordinatesTable']\n        except:\n            raise KeyError('Unable to find \"coordinatesTable\" key in import file')\n        try:\n            weightsMap = importData['weightsMap']\n        except:\n            raise KeyError('Unable to find \"weightsMap\" key in import file')\n        outputMessage = {}\n        outputMessage.setdefault('complete','Load operation ended successfully')\n        outputMessage.setdefault('failure','No weight was set: check stored vertices IDs or try increasing tolerance value')                \n        outputMessage.setdefault('aborted','Load operation aborted')   \n        if algorithm == 1:         \n            if deformer_entry[0] == 'blendShape':\n                status = self.setBlendShapeWeights(weightsMap,header['DEFORMER NAME'])                \n                sys.stdout.write(outputMessage[status])\n                return\n            else: \n                status = self.setDeformerWeights(weightsMap,header['DEFORMER NAME'])            \n                sys.stdout.write(outputMessage[status])\n                return    \n        if algorithm == 2:\n            averageWeightsMap = self.averageWeightsMap(coordinatesTable,weightsMap)\n            if deformer_entry[0] == 'blendShape':\n                status = self.setBlendShapeWeights(averageWeightsMap,header['DEFORMER NAME'])                \n                sys.stdout.write(outputMessage[status])\n                return\n            else: \n                status = self.setDeformerWeights(averageWeightsMap,header['DEFORMER NAME'])            \n                sys.stdout.write(outputMessage[status])\n                return \n          \n    def mirrorWeights(self,*args):\n        symmetry_plane = cmds.radioButtonGrp(self.symmetryPlane,query=True,select=True)\n        mirror_direction = cmds.radioButtonGrp(self.symmetryDirection,query=True,select=True)\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')   \n        target_fn = om.MFnMesh(target_shape)\n        target_vtx = target_fn.numVertices\n        target_IDs = range(0,target_vtx)          \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')        \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_name = deformer_entry[1] \n        if deformer_entry[0] == 'blendShape':\n            weightsMap = self.getBlendShapeWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        else:\n            weightsMap = self.getDeformerWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        coordinatesTable = self.getVerticesPosition()\n        vtx_IDs = coordinatesTable.keys()\n        coordinatesTableFlipped = {ID: map(lambda a,b:a*b,coordinatesTable[ID],self.symmetryAxis[symmetry_plane][1]) for ID in vtx_IDs}        \n        if mirror_direction == 1:\n            targetMap = {ID: om.MPoint(coordinatesTableFlipped[ID]) for ID in vtx_IDs if coordinatesTable[ID][self.symmetryAxis[symmetry_plane][0]] < 0}                                  \n        if mirror_direction == 2:\n            targetMap = {ID: om.MPoint(coordinatesTableFlipped[ID]) for ID in vtx_IDs if coordinatesTable[ID][self.symmetryAxis[symmetry_plane][0]] > 0}                                  \n        target_items = targetMap.items()\n        targetItemsCounts = len(target_items)\n        mirrorWeightsMap = {str(ID): weightsMap[ID] for ID in vtx_IDs} \n        pbWinName = 'DWE_PB'          \n        if cmds.window(pbWinName,exists=True):\n            cmds.deleteUI(pbWinName)\n        cmds.window(pbWinName,title='...Mirroring Weights...',sizeable=False,widthHeight=[350,50])\n        pbLayout = cmds.formLayout(numberOfDivisions=100)\n        pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=targetItemsCounts,progress=0)\n        cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n        if cmds.windowPref(pbWinName,exists=True):\n            cmds.windowPref(pbWinName,remove=True)\n        cmds.showWindow(pbWinName)                 \n        for token in target_items:\n            closestPoint = target_fn.getClosestPoint(token[1],om.MSpace.kWorld)\n            component = om.MFnSingleIndexedComponent()\n            face_component = component.create(om.MFn.kMeshPolygonComponent)\n            component.addElement(closestPoint[1])\n            polyIT = om.MItMeshPolygon(target_shape,face_component) \n            face_triangles = polyIT.getTriangles(om.MSpace.kWorld)                  \n            numTriangles = len(face_triangles[0])/3\n            for counter in range(0,numTriangles):\n                vec_A = om.MVector(face_triangles[0][0+counter*3])\n                vec_B = om.MVector(face_triangles[0][1+counter*3])\n                vec_C = om.MVector(face_triangles[0][2+counter*3])\n                vec_P = om.MVector(closestPoint[0])\n                barycentric_coordinates = self.barycenter(vec_A,vec_B,vec_C,vec_P)\n                if max(barycentric_coordinates) > 0:\n                    break\n            interpolated_weight = weightsMap[face_triangles[1][0+counter*3]]*barycentric_coordinates[0] + weightsMap[face_triangles[1][1+counter*3]]*barycentric_coordinates[1] + weightsMap[face_triangles[1][2+counter*3]]*barycentric_coordinates[2]          \n            mirrorWeightsMap[str(token[0])] = interpolated_weight\n            cmds.progressBar(pbControl,edit=True,step=1)\n        cmds.deleteUI(pbWinName)              \n        if deformer_entry[0] == 'blendShape':\n            status = self.setBlendShapeWeights(mirrorWeightsMap,deformer_name)                \n            sys.stdout.write('Mirror operation ended successfully')\n            return\n        else: \n            status = self.setDeformerWeights(mirrorWeightsMap,deformer_name)            \n            sys.stdout.write('Mirror operation ended successfully')\n            return     \n            \n    def flipWeights(self,*args):\n        symmetry_plane = cmds.radioButtonGrp(self.symmetryPlane,query=True,select=True)\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')   \n        target_fn = om.MFnMesh(target_shape)\n        target_vtx = target_fn.numVertices\n        target_IDs = range(0,target_vtx)  \n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')        \n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_name = deformer_entry[1] \n        if deformer_entry[0] == 'blendShape':\n            weightsMap = self.getBlendShapeWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        else:\n            weightsMap = self.getDeformerWeights(Target=target_shape,ID=target_IDs,DeformerName=deformer_name)\n        coordinatesTable = self.getVerticesPosition()\n        vtx_IDs = coordinatesTable.keys()\n        coordinatesTableFlipped = {ID: map(lambda a,b:a*b,coordinatesTable[ID],self.symmetryAxis[symmetry_plane][1]) for ID in vtx_IDs}                                       \n        targetMap = {ID: om.MPoint(coordinatesTableFlipped[ID]) for ID in vtx_IDs}\n        target_items = targetMap.items()\n        targetItemsCounts = len(target_items)\n        flippedWeightsMap = {}       \n        pbWinName = 'DWE_PB'          \n        if cmds.window(pbWinName,exists=True):\n            cmds.deleteUI(pbWinName)\n        cmds.window(pbWinName,title='...Flipping Weights...',sizeable=False,widthHeight=[350,50])\n        pbLayout = cmds.formLayout(numberOfDivisions=100)\n        pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=targetItemsCounts,progress=0)\n        cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n        if cmds.windowPref(pbWinName,exists=True):\n            cmds.windowPref(pbWinName,remove=True)\n        cmds.showWindow(pbWinName)              \n        for token in target_items:\n            closestPoint = target_fn.getClosestPoint(token[1],om.MSpace.kWorld)\n            component = om.MFnSingleIndexedComponent()\n            face_component = component.create(om.MFn.kMeshPolygonComponent)\n            component.addElement(closestPoint[1])\n            polyIT = om.MItMeshPolygon(target_shape,face_component) \n            face_triangles = polyIT.getTriangles(om.MSpace.kWorld)                  \n            numTriangles = len(face_triangles[0])/3\n            for counter in range(0,numTriangles):\n                vec_A = om.MVector(face_triangles[0][0+counter*3])\n                vec_B = om.MVector(face_triangles[0][1+counter*3])\n                vec_C = om.MVector(face_triangles[0][2+counter*3])\n                vec_P = om.MVector(closestPoint[0])\n                barycentric_coordinates = self.barycenter(vec_A,vec_B,vec_C,vec_P)\n                if max(barycentric_coordinates) > 0:\n                    break\n            interpolated_weight = weightsMap[face_triangles[1][0+counter*3]]*barycentric_coordinates[0] + weightsMap[face_triangles[1][1+counter*3]]*barycentric_coordinates[1] + weightsMap[face_triangles[1][2+counter*3]]*barycentric_coordinates[2]          \n            flippedWeightsMap.setdefault(str(token[0]),interpolated_weight)  \n            cmds.progressBar(pbControl,edit=True,step=1)\n        cmds.deleteUI(pbWinName)   \n        if deformer_entry[0] == 'blendShape':\n            status = self.setBlendShapeWeights(flippedWeightsMap,deformer_name)                \n            sys.stdout.write('Flip operation ended successfully')\n            return\n        else: \n            status = self.setDeformerWeights(flippedWeightsMap,deformer_name)            \n            sys.stdout.write('Flip operation ended successfully')\n            return                        \n            \n    def copySource(self,*args):\n        try:\n            source_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')\n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')\n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_type = deformer_entry[0]\n        deformer_name = deformer_entry[1]         \n        message = str(source_shape) + ' -> ' + deformer_name  \n        cmds.text(self.sourceText,edit=True,label=message)   \n        self.copySourceInfo = []\n        self.copySourceInfo.append(source_shape)     \n        self.copySourceInfo.append((deformer_type,deformer_name))           \n        \n    def copyTarget(self,*args):\n        try:\n            target_shape = self.getTargetShape()\n        except:\n            raise ValueError('Select a valid mesh')\n        deformerEntry_list = cmds.textScrollList(self.deformersList,query=True,selectItem=True)\n        if not deformerEntry_list:\n            raise ValueError('Select a valid deformer')\n        deformer_entry = deformerEntry_list[0].split(' - ')\n        deformer_type = deformer_entry[0]\n        deformer_name = deformer_entry[1]         \n        message = str(target_shape) + ' -> ' + deformer_name  \n        cmds.text(self.targetText,edit=True,label=message) \n        self.copyTargetInfo = []   \n        self.copyTargetInfo.append(target_shape)     \n        self.copyTargetInfo.append((deformer_type,deformer_name))             \n\n    def barycenter(self,vec_A,vec_B,vec_C,vec_P,toleranceVal=0.001):\n        barycentricCoor = [0,0,0]\n        vec_AB = vec_B - vec_A\n        vec_AC = vec_C - vec_A\n        vec_BC = vec_C - vec_B   \n        vec_CA = vec_A - vec_C             \n        vec_AP = vec_P - vec_A\n        vec_BP = vec_P - vec_B\n        vec_CP = vec_P - vec_C        \n        vec_Normal = vec_AB^vec_AC\n        factor = 1.0/(vec_Normal*vec_Normal)\n        barycentric_u = (vec_BC^vec_BP) * vec_Normal * factor        \n        if barycentric_u < -toleranceVal:                    \n            return barycentricCoor  \n        barycentric_v = (vec_CA^vec_CP) * vec_Normal * factor        \n        if barycentric_v < -toleranceVal:                    \n            return barycentricCoor                    \n        barycentric_w = (vec_AB^vec_AP) * vec_Normal * factor\n        if barycentric_w < -toleranceVal:                    \n            return barycentricCoor                                                  \n        barycentricCoor = (barycentric_u,barycentric_v,barycentric_w)\n        return barycentricCoor\n        \n    def copyWeights(self,*args):\n        if not self.copySourceInfo:\n            raise ValueError('Select a valid source deformer')          \n        if not self.copyTargetInfo:\n            raise ValueError('Select a valid target deformer')\n        source_shape = self.copySourceInfo[0]\n        source_deformerType = self.copySourceInfo[1][0]\n        source_deformer = self.copySourceInfo[1][1]  \n        target_shape = self.copyTargetInfo[0]\n        target_deformerType = self.copyTargetInfo[1][0]\n        target_deformer = self.copyTargetInfo[1][1]\n        selection = om.MSelectionList()\n        try:\n            selection.add(source_shape)\n        except:\n            raise ValueError('Source shape \"' + str(source_shape) + '\" no longer exists')\n        try:\n            selection.add(source_deformer)\n        except:\n            raise ValueError('Source deformer \"' + str(source_deformer) + '\" no longer exists')            \n        try:\n            selection.add(target_shape)\n        except:\n            raise ValueError('Target shape \"' + str(target_shape) + '\" no longer exists')            \n        try:\n            selection.add(target_deformer)\n        except:\n            raise ValueError('Target deformer \"' + str(target_deformer) + '\" no longer exists')            \n        source_fn = om.MFnMesh(source_shape)\n        source_vtx = source_fn.numVertices\n        source_IDs = range(0,source_vtx)\n        if source_deformerType == 'blendShape':\n            source_weights = self.getBlendShapeWeights(Target=source_shape,ID=source_IDs,DeformerName=source_deformer)\n        else:\n            source_weights = self.getDeformerWeights(Target=source_shape,ID=source_IDs,DeformerName=source_deformer)   \n        target_fn = om.MFnMesh(target_shape)\n        target_vtx = target_fn.numVertices \n        target_IDs = range(0,target_vtx)               \n        target_points = target_fn.getPoints(om.MSpace.kWorld)\n        target_weights = {}\n        pbWinName = 'DWE_PB'          \n        if cmds.window(pbWinName,exists=True):\n            cmds.deleteUI(pbWinName)\n        cmds.window(pbWinName,title='...Copying Weights...',sizeable=False,widthHeight=[350,50])\n        pbLayout = cmds.formLayout(numberOfDivisions=100)\n        pbControl = cmds.progressBar(parent=pbLayout,width=330,height=30,minValue=0,maxValue=target_vtx,progress=0)\n        cmds.formLayout(pbLayout,edit=True,attachForm=([pbControl,'left',10],[pbControl,'top',10]))  \n        if cmds.windowPref(pbWinName,exists=True):\n            cmds.windowPref(pbWinName,remove=True)\n        cmds.showWindow(pbWinName)          \n        for index,pointItem in enumerate(target_points):\n            closestPoint = source_fn.getClosestPoint(pointItem,om.MSpace.kWorld)\n            component = om.MFnSingleIndexedComponent()\n            face_component = component.create(om.MFn.kMeshPolygonComponent)\n            component.addElement(closestPoint[1])\n            polyIT = om.MItMeshPolygon(source_shape,face_component) \n            face_triangles = polyIT.getTriangles(om.MSpace.kWorld)                  \n            numTriangles = len(face_triangles[0])/3\n            for counter in range(0,numTriangles):\n                vec_A = om.MVector(face_triangles[0][0+counter*3])\n                vec_B = om.MVector(face_triangles[0][1+counter*3])\n                vec_C = om.MVector(face_triangles[0][2+counter*3])\n                vec_P = om.MVector(closestPoint[0])\n                barycentric_coordinates = self.barycenter(vec_A,vec_B,vec_C,vec_P)\n                if max(barycentric_coordinates) > 0:\n                    break\n            interpolated_weight = source_weights[face_triangles[1][0+counter*3]]*barycentric_coordinates[0] + source_weights[face_triangles[1][1+counter*3]]*barycentric_coordinates[1] + source_weights[face_triangles[1][2+counter*3]]*barycentric_coordinates[2]          \n            target_weights.setdefault(index,interpolated_weight)\n            cmds.progressBar(pbControl,edit=True,step=1)\n        cmds.deleteUI(pbWinName) \n        outputMessage = {}\n        outputMessage.setdefault('complete','Copy operation ended successfully')\n        outputMessage.setdefault('failure','No weight was set')                \n        outputMessage.setdefault('aborted','Copy operation aborted')                                                                \n        if target_deformerType == 'blendShape':\n            status = self.setBlendShapeWeights(target_weights,source_deformer,Target=target_shape,ID=target_IDs,DeformerName=target_deformer)\n            sys.stdout.write(outputMessage[status])\n            return\n        else:\n            status = self.setDeformerWeights(target_weights,source_deformer,Target=target_shape,ID=target_IDs,DeformerName=target_deformer)\n            sys.stdout.write(outputMessage[status])\n            return\n\ndwe_win = DeformersWeightsEditor.showUI()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "#change path if you are calling the script from somewhere else\n\nimport sys\nsys.path.append('/spin/share/Projects/CFX_share/Sid/jlr_copy_deformer_weights-master/')\nimport jlr_copy_deformer_weights as cdw\ncdw.open_copy_deformer_weights()\n \n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "DC" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "DC" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "#change path if you are calling the script from somewhere else\n\nimport sys\nsys.path.append('/spin/share/Projects/CFX_share/Sid/jlr_copy_deformer_weights-master/')\nimport jlr_copy_deformer_weights as cdw\ncdw.open_copy_deformer_weights()\n \n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Display and edit relationships among nodes of the scene" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Node Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "NodeEditorWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Display and edit relationships among nodes of the scene" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Node Editor" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "NE" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "NodeEditorWindow" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "msh = pm.listTransforms(pm.ls(typ = 'mesh'))\nfor i in msh:\n    try:\n        pm.connectAttr('model_selectable_cond.outColorR',i+'.overrideDisplayType',f=1)\n        pm.setAttr(i+'overrideEnabled',1)\n    except:pass" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "mshSelect" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "mshSelect" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "msh = pm.listTransforms(pm.ls(typ = 'mesh'))\nfor i in msh:\n    try:\n        pm.connectAttr('model_selectable_cond.outColorR',i+'.overrideDisplayType',f=1)\n        pm.setAttr(i+'.overrideEnabled',1)\n    except:pass" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "# --------------------------------------------------------------\n# VN_Magic_Deform_Tool_2.0.py - python Script\n# --------------------------------------------------------------\n#\n# DESCRIPTION:\n#\tA nicer why to convert any deformer into skincluster\n#\t\n# USAGE:\n#\tCopy \"VN_Magic_Deform_Tool_2.0.py\" in your maya python script editor and run ;\n#\n# AUTHORS:\n#\tName      : Vishal Nagpal\n# Gmail     : vishalnagpal878@gamil.com\n# linkedin  : linkedin.com/in/vishal-nagpal-82975a149\n#\tCopyright ?2022 Vishal Nagpal\n#\n# VERSIONS:\n#\t2.0 - Feb 21, 2022 - Initial Release.\n#\n# Tip for knowledge:\n#   The vertex distance can be equal to the weight.\n\n\nimport pymel.core as pm\nimport time\nimport math\nimport sys\n\nif pm.window(\"VN_Magic_Deform_Tool\", exists=True):\n\tpm.deleteUI(\"VN_Magic_Deform_Tool\", window=True)\n\nif pm.windowPref( \"VN_Magic_Deform_Tool\", exists=True ):\n    pm.windowPref( \"VN_Magic_Deform_Tool\", remove=True )\n    \n\nwindow     = pm.window(\"VN Magic Deform Tool\",s =0, iconName='Short Name',widthHeight=(300, 433), bgc = [(.1),(.1),(.01)])\n\nform       = pm.formLayout(numberOfDivisions=100)\nText       = pm.text(l ='Just One Click!', h =20, w = 80 )\n\nWire       = pm.iconTextButton('WireBase',ann =' Wire to skin convert ' ,style='iconAndTextHorizontal', image1='wire.png',c = 'wireButton()' , label='Wire to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nLattice    = pm.iconTextButton('LatticeBase',ann =' Lattice to skin convert ',style='iconAndTextHorizontal', image1='lattice.png',c = 'latticeButton()',l = 'Lattice to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nshape      = pm.iconTextButton('shapeBase',ann =' shape to skin convert ',style='iconAndTextHorizontal', image1='blendShape.png',c = 'blendShapeButton()' ,l = 'BlendShape to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nWrap       = pm.iconTextButton('wrapBase',ann =' Wrap to skin convert ',style='iconAndTextHorizontal', image1='wrap.png',c = 'wrapButton()',l = 'Wrap to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nCluster    = pm.iconTextButton('ClusterBase',ann =' Cluster to skin convert ',style='iconAndTextHorizontal', image1='cluster.png', c = 'clusterButton()',l = 'Cluster to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nSoftS      = pm.iconTextButton('SoftSBase',ann =' Soft Selection to skin convert ',style='iconAndTextHorizontal', image1='sculptPinch.png', c = 'SoftButton()',l = 'Soft Selection to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nCurve      = pm.iconTextButton('CurveBase',ann =' Curve to skin convert ',style='iconAndTextHorizontal', image1='curveEP.png', c = 'CurveButton()', l = 'Curve to Skin',w=200,h=45, bgc = [(.8),(.8),(.5)])\n\nLinkdin    = pm.iconTextButton('LinkdinBase',ann =' https://www.linkedin.com/in/vishal-nagpal-82975a149/ ',c ='pm.webBrowser( url=\"https://www.linkedin.com/in/vishal-nagpal-82975a149/\",vis =0)',style='iconAndTextHorizontal',l = 'Linkedin',w=550,h=15, bgc = [(.1),(.1),(.01)])\nGmail      = pm.iconTextButton('GmailBase',ann =' vishalnagpal878@gmail.com ',style='iconAndTextHorizontal',l = 'vishalnagpal878@gmail.com',w=550,h=15, bgc = [(.1),(.1),(.01)])\n\n\nsetingWire = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' select wire first and then Mesh.\\n\\n ( Wire should have all skinned joints. \\n joints should not have any connection. )')\nsetingLatt = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' select lattice first and then Mesh.\\n\\n ( lattice should have all skinned joints. \\n joints should not have any connection. )')\nsetingShap = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' select blendshape.\\n\\n ( Mesh should have only one blenshape on it at a time. )')\nsetingWrap = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Select SourceMesh then WrapMesh. \\n\\n ( SourceMesh should have all skinned joints. \\n joints should not have any connection. )')\nsetingClst = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Select cluster first then Mesh.')\nsetingSoft = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Create Soft Selection.\\n\\n ( select one cluster at a time.)')\nsetingCurv = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Select curve first and then Mesh.\\n\\n ( Curve should have all skinned joints. \\n joints should not have any connection. )')\n\n\npm.formLayout( form, edit=True,  \n\nattachForm=   [(Text, 'top', 5),\n               (Wire, 'top', 40),\n               (Lattice, 'top', 90),\n               (shape, 'top', 140),\n               (Wrap, 'top', 190),\n               (Cluster, 'top', 240),\n               (SoftS, 'top', 290),\n               (Curve, 'top', 342),\n               (setingWire, 'top', 40),\n               (setingLatt, 'top', 90),\n               (setingShap, 'top', 140),\n               (setingWrap, 'top', 190),\n               (setingClst, 'top', 240),\n               (setingSoft, 'top', 295),\n               (setingCurv, 'top', 348),\n               (Linkdin, 'top', 393),\n               (Gmail, 'top', 408),\n            ],\nattachControl=[(Text, 'bottom', 30, Wire), \n             ],\n               \nattachPosition=[(Text, 'right', 10, 65),\n                (Wire, 'right', 0, 75), \n                (Lattice, 'right', 0, 75), \n                (shape, 'right', 0, 75), \n                (Wrap, 'right', 0, 75), \n                (Cluster, 'right', 0, 75), \n                (SoftS, 'right', 0, 75),\n                (Curve, 'right', 0, 75),\n                (setingWire, 'left', 20, 75),\n                (setingLatt, 'left', 20, 75),\n                (setingShap, 'left', 20, 75),\n                (setingWrap, 'left', 20, 75),\n                (setingClst, 'left', 20, 75),\n                (setingSoft, 'left', 20, 75),\n                (setingCurv, 'left', 20, 75),\n                (Linkdin, 'left', 0, 40),\n                (Gmail, 'left', 0, 22)],\n                \n )\n\npm.showWindow( window )\n\n'''--------------------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------------------\n--------------------------------------------------------------------------------------------------------------------'''\n\n'''-----------------------------------------------------------------------------------'''\n\n#=========================================New_Jnt_And_Rename\ndef NewJnt(positonN):\n    objList = cmds.ls(\"NewVish_*_Jnt\")\n    \n    alln = []\n    \n    for n in objList:\n        objNewNum = int(n.split('_')[1])\n        alln.append(objNewNum)\n    alln.sort()\n    \n    alln2 = []\n    for p in range(1,alln[0]):\n        alln2.append(p)\n    \n    for d in range(len(alln)-1):\n        for n in range(alln[d]+1,alln[d+1]):\n            alln2.append(n)\n    \n    cmds.select(d = True)\n    \n    if alln2 != []:\n        if alln2[0] < 10:\n            zro = \"0\"\n            cmds.joint(n = \"NewVish_\"+zro[0]+str(alln2[0])+\"_Jnt\", p = positonN)\n        else:\n            cmds.joint(n = \"NewVish_\"+str(alln2[0])+\"_Jnt\", p = positonN)\n            \n    if alln2 == []:\n        if alln[-1]+1 < 10:\n            zro = \"0\"\n            cmds.joint(n = \"NewVish_\"+zro[0]+str(alln[-1]+1)+\"_Jnt\", p = positonN)\n        else:\n            cmds.joint(n = \"NewVish_\"+str(alln[-1]+1)+\"_Jnt\", p = positonN)\n                        \n\n#=========================================Checking if defaut strings already Exists --  Funtion\n\ndef findString():\n    \n    mysStrings = ['CoolForge','Get_Test_Mesh']\n    \n    for gbgbg in mysStrings:\n        if cmds.objExists(gbgbg):\n          print (pm.error( \"<<<<<(Please Rename \" + gbgbg + \" or delete it )>>>>>\" ))\n          \n\n'''-----------------------------------------------------------------------------------'''\ndef SimpleCurveConvert():\n    \n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n    \n              \n    findString()\n    \n    \n    #=========================================start\n    \n    \n    selection0 = cmds.ls(sl=True)\n    selecti_00 = selection0[0]\n    selecti_01 = selection0[1]\n    cmds.select(d = True)\n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = cmds.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n     \n    cluster_00 = SkinClustor(selecti_00)\n    cluster_01no = SkinClustor(selecti_01)\n    \n    #------------------------------------------------------Find_crv_Jnt\n    \n    Aljnts = cmds.skinCluster(selecti_00, inf = True, q = True)\n    \n    #------------------------------------------------------if_no_skin_on mesh\n    \n    if cluster_01no == []:\n        if pm.objExists(\"New_Nagpal_Jnt\") == False:\n            pm.joint(n = \"New_Nagpal_Jnt\")\n            \n        cmds.skinCluster('New_Nagpal_Jnt', selecti_01)\n        \n    cmds.select(d = True)\n    cluster_01 = SkinClustor(selecti_01)\n    #------------------------------------------------------Find_Hold_Jnt\n    \n    Meeshjnts = cmds.skinCluster(selecti_01, inf = True, q = True)\n    \n    #------------------------------------------------------find unlocked join and lock it\n    \n    unlockJnt = []\n    \n    for n in Meeshjnts:\n        findlock = cmds.getAttr(n+'.liw')\n        if findlock == False:\n            unlockJnt.append(n)\n    \n    if unlockJnt == []:\n        cmds.error( \"Please unlock one joint\" )\n    \n    if len(unlockJnt) > 1:\n        cmds.error( \"Please only one joint should be unlocked\" )\n        \n    cmds.setAttr(unlockJnt[0]+'.liw', 1)\n    \n    #------------------------------------------------------save_Hold_Jnt_Weight\n    cmds.select(selecti_01)\n    polyCount2 = cmds.polyEvaluate( v=True )\n    cmds.select(d =True)\n    \n    Value = []\n    \n    for fdf in range(polyCount2):\n        \n        JntVal = cmds.skinPercent(SkinClustor(selecti_01)[0], selecti_01+'.vtx['+str(fdf)+']' , transform = unlockJnt[0], query=True )\n        Value.append(JntVal)\n    \n    \n    #------------------------------------------------------addInflunce_other_Jnts\n    \n    for gfs in Aljnts:\n    \n        cmds.select(selecti_01)\n    \n        cmds.skinCluster(edit=True,ai=gfs,lw = 1)\n    \n    \n    #------------------------------------------------------wire\n    \n    pm.wire( selecti_01, w= selecti_00,n = 'CoolForge', gw = False, en= 1.000000, ce= 0.000000, li= 0.000000, dds=[(0, 1000)] )\n    pm.setAttr(\"CoolForge.rotation\", 0)\n    \n    #------------------------------------------------------\n    \n    for xx in Aljnts:\n    \n        whichVer = []\n    \n        verName = cmds.select(xx, r =True)\n    \n        cmds.move( 1, xx+'.rotatePivot', y=True, r = True)\n    \n        whichVer.append(xx)\n    \n        cmds.select(selecti_01)\n    \n        cmds.duplicate(n = 'Get_Test_Mesh')\n    \n        cmds.move( -1, xx+'.rotatePivot', y=True, r = True)\n    \n        cmds.select(selecti_01)\n    \n        polyCount = cmds.polyEvaluate( v=True )\n    \n    \n        set_01ZMain = []\n        set_02ZMain = []\n        finlDist= []\n            \n        for x in range(3):\n                \n            set_01Z = []\n            \n            set_02Z = []\n            \n        #------------------------------------------------------\n            for d in range(polyCount):\n                \n                Attr = pm.xform(selecti_01+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n                \n                set_01Z.append((Attr))\n                \n        #------------------------------------------------------\n            for b in range(polyCount):\n                \n                Attrs = pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n                \n                set_02Z.append((Attrs))\n            \n            pm.select(d =True)\n            \n            set_01ZMain.append(set_01Z)\n            set_02ZMain.append(set_02Z)\n          \n        #---------------------------------------------------getDiff \n        for o in range(polyCount):\n                   \n            x1      = float(set_01ZMain[0][o])\n            \n            y1      = float(set_01ZMain[1][o])\n        \n            z1      = float(set_01ZMain[2][o])\n            \n            x2      = float(set_02ZMain[0][o])\n        \n            y2      = float(set_02ZMain[1][o])\n            \n            z2      = float(set_02ZMain[2][o])\n                \n            findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n                \n            finlDist.append(findis)\n    \n        #---------------------------------------------------percentage_find\n        FinelWeight = []\n        \n        for nnn in range(len(Value)):\n            \n            FinelW = (Value[nnn]/1.0)*finlDist[nnn]\n            FinelWeight.append(FinelW)\n        \n        #---------------------------------------------------addSkin\n        cmds.setAttr(unlockJnt[0]+'.liw', 0)\n        for R in range(int(polyCount)):\n            \n    \n            if FinelWeight[R] != 0.0:\n    \n    \n    \n                cmds.skinPercent( SkinClustor(selecti_01)[0],selecti_01+'.vtx['+str(R)+']', tv=(whichVer[0], FinelWeight[R]))\n    \n    \n        cmds.delete('Get_Test_Mesh')\n    \n    for fv in Aljnts:\n        cmds.setAttr(fv+'.liw', 0)\n    \n    cmds.skinCluster(SkinClustor(selecti_01)[0], e = True, ri= unlockJnt[0])\n    #---------------------------------------------------delete_Unwanted_Things\n    if cluster_01no == []:\n        pm.delete(unlockJnt[0])\n    pm.delete('CoolForge')\n    pm.delete(selecti_00+'BaseWire')\n    \n    \n        \n        \n    #---------------------------------------------------Total_Time         \n        \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n        \n    #---------------------------------------------------end...\n    \n    \n    \n\n    \n\n'''-----------------------------------------------------------------------------------'''\n\n\n\n\ndef ClusterConvert():\n        \n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    selection0 = pm.ls(sl=True)\n    positon = cmds.getAttr(selection0[0]+'.origin')[0]\n    \n    pm.select(d =True)\n    \n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = pm.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if pm.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    \n    \n    #------------------------------------------------------check if both have same skinclister\n    \n        \n    if len(SkinClustor(selection0[-1]))==0:\n        if pm.objExists(\"New_Vishu_Jnt\") == False:\n            pm.joint(n = \"New_Vishu_Jnt\")\n            \n        pm.skinCluster('New_Vishu_Jnt', selection0[-1])\n    \n    \n    #------------------------------------------------------Find_Hold_Jnt\n    \n    \n    Meeshjnts = pm.skinCluster(selection0[-1], inf = True, q = True)\n    \n    pm.setAttr(Meeshjnts[0]+'.liw', 1)\n    \n    \n    #------------------------------------------------------\n    pm.select(selection0[0], r =True)\n    for nnn in range(len(selection0)-1):\n        \n        pm.select(selection0[nnn],add = True)\n        \n    \n    pm.move( 1, y=True, r = True)\n    \n    pm.duplicate(selection0[-1], n = 'Get_Test_Mesh')\n    \n    pm.move( -1,y=True, r = True)\n    \n    pm.select(selection0[-1])\n    \n    polyCount = pm.polyEvaluate( v=True )\n    \n    \n    #-----------------------------------------------------set1\n    \n    set_01ZMain = []\n    set_02ZMain = []\n    finlDist= []\n        \n    for x in range(3):\n            \n        set_01Z = []\n        \n        set_02Z = []\n        \n    #------------------------------------------------------\n        for d in range(polyCount):\n            \n            Attr = '%.3f'%pm.xform(selection0[-1]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n            \n            set_01Z.append((Attr))\n            \n    #------------------------------------------------------\n        for b in range(polyCount):\n            \n            Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n            \n            set_02Z.append((Attrs))\n        \n        pm.select(d =True)\n        \n        set_01ZMain.append(set_01Z)\n        set_02ZMain.append(set_02Z)\n      \n    #---------------------------------------------------getDiff \n    for o in range(polyCount):\n               \n        x1      = float(set_01ZMain[0][o])\n        \n        y1      = float(set_01ZMain[1][o])\n    \n        z1      = float(set_01ZMain[2][o])\n        \n        x2      = float(set_02ZMain[0][o])\n    \n        y2      = float(set_02ZMain[1][o])\n        \n        z2      = float(set_02ZMain[2][o])\n            \n        findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n            \n        finlDist.append(findis)\n    \n    \n    #---------------------------------------------------addNewJnt and influnence\n    \n    if pm.objExists(\"NewVish_01_Jnt\") == False:\n        pm.joint(n = \"NewVish_01_Jnt\", p = positon)\n    else:\n        NewJnt(positon)\n    \n    NwJnt = pm.ls(sl=True)\n    pm.select(selection0[-1])\n    \n    pm.skinCluster(edit=True,ai= NwJnt[0],lw = 1)\n    \n    #---------------------------------------------------addSkin\n    \n    for R in range(polyCount):\n    \n        pm.setAttr(Meeshjnts[0]+'.liw', 0)\n    \n            \n    \n        if finlDist[R] != 0.0:\n    \n    \n    \n            pm.skinPercent( SkinClustor(selection0[-1])[0],selection0[-1]+'.vtx['+str(R)+']', tv=(NwJnt[0], finlDist[R]))\n    \n    \n    pm.delete('Get_Test_Mesh')\n        \n        \n    #---------------------------------------------------Total_Time  \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    \n    \n    \n    #---------------------------------------------------end.. \n\n\n\n\n\n\n\n'''-----------------------------------------------------------------------------------'''\n\n\ndef SoftConvert():\n\n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    selection0 = cmds.ls(sl=True)\n    selecti_00 = selection0[0]\n    cmds.cluster(n = 'VishClust')\n    \n    shapename = cmds.listHistory(selecti_00)[0]\n    positon = cmds.getAttr(\"VishClustHandleShape.origin\")[0]\n    cmds.delete('VishClust')\n    \n    cmds.select(shapename)\n    cmds.pickWalk(d = 'up')\n    \n    transName = cmds.ls(sl=True)\n    \n    cmds.select(d =True)\n    \n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = cmds.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    cluster_01no = SkinClustor(transName)\n    #------------------------------------------------------if_no_skin_on_mesh_thenadd_one_joint\n    \n    if cluster_01no == []:\n        \n        if cmds.objExists(\"New_VishHold_Jnt\") == False:\n            cmds.joint(n = \"New_VishHold_Jnt\")\n            \n        cmds.skinCluster('New_VishHold_Jnt', transName)\n        \n    \n    cmds.select(d = True)\n    cluster_01 = SkinClustor(transName)\n    \n    \n    newJnt01 = []\n    \n    if cmds.objExists(\"NewVish_01_Jnt\") == True:\n        cmds.select(d = True)\n        NewJnt(positon)\n        NwJnt = cmds.ls(sl=True)\n        newJnt01.append(NwJnt[0])\n        cmds.select(transName)\n        cmds.skinCluster(edit=True,ai=NwJnt[0],lw = 1, wt = 0)\n        cmds.select(d = True)\n        \n    if cmds.objExists(\"NewVish_01_Jnt\") == False:\n        cmds.select(d = True)\n        cmds.joint(n = \"NewVish_01_Jnt\", p = positon )\n        NwJnt = cmds.ls(sl=True)\n        newJnt01.append(NwJnt[0])\n        cmds.select(transName)\n        cmds.skinCluster(edit=True,ai=\"NewVish_01_Jnt\",lw = 1, wt = 0)\n    #------------------------------------------------------Find_Hold_Jnt\n    \n    \n    Meeshjnts = cmds.skinCluster(transName, inf = True, q = True)\n    \n    cmds.setAttr(Meeshjnts[0]+'.liw', 1)\n    \n    \n    #------------------------------------------------------\n    \n    cmds.select(selecti_00, r =True)\n    for nnn in range(len(selection0)):\n        cmds.select(selection0[nnn],add = True)\n    \n    cmds.move( 1, y=True, r = True)\n    \n    cmds.duplicate(transName[0], n = 'Get_Test_Mesh')\n    \n    cmds.move( -1,y=True, r = True)\n    \n    cmds.select(transName[0])\n    \n    polyCount = cmds.polyEvaluate( v=True )\n    \n    \n    #-----------------------------------------------------set1\n    \n    set_01ZMain = []\n    set_02ZMain = []\n    finlDist= []\n        \n    for x in range(3):\n            \n        set_01Z = []\n        \n        set_02Z = []\n        \n    #------------------------------------------------------\n        for d in range(polyCount):\n            \n            Attr = '%.3f'%pm.xform(transName[0]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n            \n            set_01Z.append((Attr))\n            \n    #------------------------------------------------------\n        for b in range(polyCount):\n            \n            Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n            \n            set_02Z.append((Attrs))\n        \n        pm.select(d =True)\n        \n        set_01ZMain.append(set_01Z)\n        set_02ZMain.append(set_02Z)\n      \n    #---------------------------------------------------getDiff \n    for o in range(polyCount):\n               \n        x1      = float(set_01ZMain[0][o])\n        \n        y1      = float(set_01ZMain[1][o])\n    \n        z1      = float(set_01ZMain[2][o])\n        \n        x2      = float(set_02ZMain[0][o])\n    \n        y2      = float(set_02ZMain[1][o])\n        \n        z2      = float(set_02ZMain[2][o])\n            \n        findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n            \n        finlDist.append(findis)\n    \n    \n    #---------------------------------------------------addSkin\n    \n    for R in range(polyCount):\n    \n        cmds.setAttr(Meeshjnts[0]+'.liw', 0)\n    \n            \n    \n        if finlDist[R] != 0.0:\n    \n    \n    \n            cmds.skinPercent( SkinClustor(transName[0])[0],transName[0]+'.vtx['+str(R)+']', tv=(newJnt01[0], finlDist[R]))\n    \n    \n    cmds.delete('Get_Test_Mesh')\n        \n        \n    #---------------------------------------------------Total_Time  \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    \n    \n    \n    #---------------------------------------------------end..\n\n\n'''-----------------------------------------------------------------------------------'''\n\n        \ndef WrapCurveWireLatticeConvet():\n\n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    selection0 = cmds.ls(sl=True)\n    \n    cmds.select(d = True)\n    \n    #=========================================if_Wire_rotation_Zero\n    def checkWire(NamwireDfm):\n        nodes = []\n    \n        node = cmds.listHistory(NamwireDfm)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'wire':\n                nodes.append(damn)\n        return nodes\n        \n    rotVal = []\n    if checkWire(selection0[1]) != []:\n        rotVal2 = pm.getAttr(checkWire(selection0[1])[0]+\".rotation\")\n        rotVal.append(rotVal2)\n        if rotVal != 0.0:\n            pm.setAttr(checkWire(selection0[1])[0]+\".rotation\", 0.0)\n            \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = cmds.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    #------------------------------------------------------check if both have same skinclister\n    meshClust = SkinClustor(selection0[1])\n    wireClust = SkinClustor(selection0[0])\n    \n    if len(SkinClustor(selection0[0]))==0:\n        print (pm.error( \"<<<<<(no skin on wire)>>>>>\" ))\n    \n    if len(SkinClustor(selection0[0]))==1:\n        if wireClust[0] in meshClust:\n            meshClust.remove(wireClust[0])\n    \n    if SkinClustor(selection0[0]) != 0:\n        for n in SkinClustor(selection0[0]):\n            if n in meshClust:\n                meshClust.remove(n)\n            \n    if meshClust==[]:\n        if cmds.objExists(\"New_Vishu_Jnt\") == False:\n            cmds.joint(n = \"New_Vishu_Jnt\")\n            \n        cmds.skinCluster('New_Vishu_Jnt', selection0[1])\n    \n    #------------------------------------------------------Find_Hold_Jnt\n    \n    \n    Meeshjnts = cmds.skinCluster(selection0[1], inf = True, q = True)\n    \n    cmds.setAttr(Meeshjnts[0]+'.liw', 1)\n    \n    \n    #------------------------------------------------------Find_deformer_Jnt\n    \n    \n    Aljnts = cmds.skinCluster(selection0[0], inf = True, q = True)\n    \n    \n    #------------------------------------------------------addInflunce_other_Jnts\n    \n    \n    \n    for gfs in Aljnts:\n        \n        if gfs not in Meeshjnts:\n    \n            cmds.select(selection0[1])\n        \n            cmds.skinCluster(edit=True,ai=gfs,lw = 1)\n    \n    \n    \n    #------------------------------------------------------\n    \n    \n    for xx in Aljnts:\n    \n        whichVer = []\n    \n        verName = cmds.select(xx, r =True)\n    \n        cmds.move( 1, xx+'.rotatePivot', y=True, r = True)\n    \n        whichVer.append(xx)\n    \n        cmds.select(selection0[1])\n    \n        cmds.duplicate(n = 'Get_Test_Mesh')\n    \n        cmds.move( -1, xx+'.rotatePivot', y=True, r = True)\n    \n        cmds.select(selection0[1])\n    \n        polyCount = cmds.polyEvaluate( v=True )\n    \n    \n        set_01ZMain = []\n        set_02ZMain = []\n        finlDist= []\n            \n        for x in range(3):\n                \n            set_01Z = []\n            \n            set_02Z = []\n            \n        #------------------------------------------------------\n            for d in range(polyCount):\n                \n                Attr = '%.3f'%pm.xform(selection0[1]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n                \n                set_01Z.append((Attr))\n                \n        #------------------------------------------------------\n            for b in range(polyCount):\n                \n                Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n                \n                set_02Z.append((Attrs))\n            \n            pm.select(d =True)\n            \n            set_01ZMain.append(set_01Z)\n            set_02ZMain.append(set_02Z)\n          \n        #---------------------------------------------------getDiff \n        for o in range(polyCount):\n                   \n            x1      = float(set_01ZMain[0][o])\n            \n            y1      = float(set_01ZMain[1][o])\n        \n            z1      = float(set_01ZMain[2][o])\n            \n            x2      = float(set_02ZMain[0][o])\n        \n            y2      = float(set_02ZMain[1][o])\n            \n            z2      = float(set_02ZMain[2][o])\n                \n            findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n                \n            finlDist.append(findis)\n    \n    \n        #---------------------------------------------------addSkin\n    \n        for R in range(int(polyCount)):\n    \n            cmds.setAttr(Meeshjnts[0]+'.liw', 0)\n    \n            \n    \n            if finlDist[R] != 0.0:\n    \n    \n    \n                cmds.skinPercent( SkinClustor(selection0[1])[0],selection0[1]+'.vtx['+str(R)+']', tv=(whichVer[0], finlDist[R]))\n    \n    \n        cmds.delete('Get_Test_Mesh')\n    \n    \n    if checkWire(selection0[1]) != []:\n        pm.setAttr(checkWire(selection0[1])[0]+\".rotation\", rotVal[0])\n    #---------------------------------------------------Total_Time         \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    #---------------------------------------------------end..\n\n\n\n\n    \n'''---------------------------------------------------------------------------------'''\ndef BlendShapeConvert():\n    \n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    transName = pm.ls(sl=True)\n    \n    pm.listHistory(transName[0])\n    \n    pm.select(d =True)\n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    def BlendShape(NamBlensSHape):\n        nodes = []\n    \n        node = pm.listHistory(NamBlensSHape)\n        for damn in node:\n            \n            if pm.nodeType(damn) == 'blendShape':\n                nodes.append(damn)\n        return nodes\n    \n    WeightName = pm.listAttr(BlendShape(transName[0])[0]+'.w', m =True)\n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = pm.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if pm.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    #------------------------------------------------------check if both have same skinclister\n    \n    if len(SkinClustor(transName[0]))==0:\n        if pm.objExists(\"New_Vishu_Jnt\") == False:\n            pm.joint(n = \"New_Vishu_Jnt\")\n            \n        pm.skinCluster('New_Vishu_Jnt', transName[0])\n        \n    #------------------------------------------------------Find_Hold_Jnt\n    \n    MeshJnt = pm.skinCluster(transName[0], inf = True, q = True)\n    \n    pm.setAttr(MeshJnt[0]+'.liw', 1)\n    \n    #------------------------------------------------------\n    \n    pm.setAttr(BlendShape(transName[0])[0]+'.'+WeightName[0], 1)\n    \n    pm.duplicate(transName[0], n = 'Get_Test_Mesh')\n    \n    pm.setAttr(BlendShape(transName[0])[0]+'.'+WeightName[0], 0)\n    \n    pm.select(transName[0])\n    \n    polyCount = pm.polyEvaluate( v=True )\n    \n    pm.select(d =True)\n    \n    #---------------------------------------------------addNewJnt and influnence\n    \n    if pm.objExists(\"NewVish_01_Jnt\") == False:\n        pm.joint(n = \"NewVish_01_Jnt\")\n    else:\n        NewJnt((0.0,0.0,0.0))\n    \n    NwJnt = pm.ls(sl=True)\n    pm.select(transName[0])\n    \n    pm.skinCluster(edit=True,ai= NwJnt[0],lw = 1)\n    \n    #-----------------------------------------------------set1\n    \n    set_01ZMain = []\n    set_02ZMain = []\n    finlDist= []\n    \n    \n    finlDistGetBig = []\n    \n    \n    for x in range(3):\n            \n        set_01Z = []\n        \n        set_02Z = []\n        \n    #------------------------------------------------------\n        for d in range(polyCount):\n            \n            Attr = '%.3f'%pm.xform(transName[0]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n            \n            set_01Z.append((Attr))\n            \n    #------------------------------------------------------\n        for b in range(polyCount):\n            \n            Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n            \n            set_02Z.append((Attrs))\n        \n        pm.select(d =True)\n        \n        set_01ZMain.append(set_01Z)\n        set_02ZMain.append(set_02Z)\n      \n    #---------------------------------------------------getDiff \n    for o in range(polyCount):\n               \n        x1      = float(set_01ZMain[0][o])\n        \n        y1      = float(set_01ZMain[1][o])\n    \n        z1      = float(set_01ZMain[2][o])\n        \n        x2      = float(set_02ZMain[0][o])\n    \n        y2      = float(set_02ZMain[1][o])\n        \n        z2      = float(set_02ZMain[2][o])\n            \n        findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n            \n        finlDist.append(findis)\n        finlDistGetBig.append(findis)\n                \n    #---------------------------------------------------addSkin\n    finlDistGetBig.sort()\n    finlDistGetBigNum = finlDistGetBig[-1]\n    \n    for R in range(polyCount):\n            \n        pm.setAttr(MeshJnt[0]+'.liw', 0)\n    \n                \n        if finlDist[R] != 0.0 :\n            \n            pm.skinPercent( SkinClustor(transName[0])[0],transName[0]+'.vtx['+str(R)+']', tv=(NwJnt[0], finlDist[R]/finlDistGetBigNum))\n                \n    pm.delete('Get_Test_Mesh')\n        \n    #---------------------------------------------------Total_Time  \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    \n    \n    #---------------------------------------------------end..   \n\n    \n    \n    \n    \n    \n'''------------------------------------------------------------'''\n\n\n\n\n\n\n\n#=========================================Lattice\ndef latticeButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'lattice':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        WrapCurveWireLatticeConvet()\n        print('Lattice',allObjecto)\n    else:\n        cmds.error( \"No_Lattice\" )\n#=========================================\n\n#=========================================wire----\ndef wireButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'wire':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        WrapCurveWireLatticeConvet()\n        print('Wire',allObjecto)\n    else:\n        cmds.error( \"No_Wire\" )\n#=========================================\n\n#=========================================wrap----\ndef wrapButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'wrap':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        WrapCurveWireLatticeConvet()\n        print('Wrap',allObjecto)\n    else:\n        cmds.error( \"No_Wrap\" )\n#=========================================\n\n#=========================================blendShape----\ndef blendShapeButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[0]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'blendShape':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        BlendShapeConvert()\n        print('BlendShape',allObjecto)\n    else:\n        cmds.error( \"No_BlendShape\" )\n#=========================================\n\n#=========================================clusterHandle----\ndef clusterButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[-1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'cluster':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        ClusterConvert()\n        print('Cluster',allObjecto)\n    else:\n        cmds.error( \"No_Cluster\" )\n#=========================================\n\n#=========================================SoftSelection\ndef SoftButton():\n    checkSoft = cmds.softSelect(q = True, sse=True)\n    \n    selectedo = cmds.ls(sl=True)\n    \n    if cmds.nodeType(selectedo[0]) == 'mesh' and checkSoft == 1:\n        SoftConvert()\n        print('SoftSelection',selectedo)\n    else:\n        cmds.error( \"No_SoftSelection\" )\n    \n#=========================================\n\n#=========================================Curve\ndef CurveButton():\n    pm.pickWalk(d = 'down')\n    selectedo = cmds.ls(sl=True)\n    pm.pickWalk(d = 'up')\n    if cmds.nodeType(selectedo[0]) == 'nurbsCurve' and cmds.nodeType(selectedo[1]) == 'mesh' :\n        SimpleCurveConvert()\n        print('Curve')\n    else:\n        cmds.error( \"No_Curve\" )\n#=========================================\n\n'''------------------------------------------------------------end'''" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "vn" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "vn" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# --------------------------------------------------------------\n# VN_Magic_Deform_Tool_2.0.py - python Script\n# --------------------------------------------------------------\n#\n# DESCRIPTION:\n#\tA nicer why to convert any deformer into skincluster\n#\t\n# USAGE:\n#\tCopy \"VN_Magic_Deform_Tool_2.0.py\" in your maya python script editor and run ;\n#\n# AUTHORS:\n#\tName      : Vishal Nagpal\n# Gmail     : vishalnagpal878@gamil.com\n# linkedin  : linkedin.com/in/vishal-nagpal-82975a149\n#\tCopyright ?2022 Vishal Nagpal\n#\n# VERSIONS:\n#\t2.0 - Feb 21, 2022 - Initial Release.\n#\n# Tip for knowledge:\n#   The vertex distance can be equal to the weight.\n\n\nimport pymel.core as pm\nimport time\nimport math\nimport sys\n\nif pm.window(\"VN_Magic_Deform_Tool\", exists=True):\n\tpm.deleteUI(\"VN_Magic_Deform_Tool\", window=True)\n\nif pm.windowPref( \"VN_Magic_Deform_Tool\", exists=True ):\n    pm.windowPref( \"VN_Magic_Deform_Tool\", remove=True )\n    \n\nwindow     = pm.window(\"VN Magic Deform Tool\",s =0, iconName='Short Name',widthHeight=(300, 433), bgc = [(.1),(.1),(.01)])\n\nform       = pm.formLayout(numberOfDivisions=100)\nText       = pm.text(l ='Just One Click!', h =20, w = 80 )\n\nWire       = pm.iconTextButton('WireBase',ann =' Wire to skin convert ' ,style='iconAndTextHorizontal', image1='wire.png',c = 'wireButton()' , label='Wire to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nLattice    = pm.iconTextButton('LatticeBase',ann =' Lattice to skin convert ',style='iconAndTextHorizontal', image1='lattice.png',c = 'latticeButton()',l = 'Lattice to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nshape      = pm.iconTextButton('shapeBase',ann =' shape to skin convert ',style='iconAndTextHorizontal', image1='blendShape.png',c = 'blendShapeButton()' ,l = 'BlendShape to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nWrap       = pm.iconTextButton('wrapBase',ann =' Wrap to skin convert ',style='iconAndTextHorizontal', image1='wrap.png',c = 'wrapButton()',l = 'Wrap to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nCluster    = pm.iconTextButton('ClusterBase',ann =' Cluster to skin convert ',style='iconAndTextHorizontal', image1='cluster.png', c = 'clusterButton()',l = 'Cluster to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nSoftS      = pm.iconTextButton('SoftSBase',ann =' Soft Selection to skin convert ',style='iconAndTextHorizontal', image1='sculptPinch.png', c = 'SoftButton()',l = 'Soft Selection to Skin',w=200,h=35, bgc = [(.21),(.42),(.3)])\nCurve      = pm.iconTextButton('CurveBase',ann =' Curve to skin convert ',style='iconAndTextHorizontal', image1='curveEP.png', c = 'CurveButton()', l = 'Curve to Skin',w=200,h=45, bgc = [(.8),(.8),(.5)])\n\nLinkdin    = pm.iconTextButton('LinkdinBase',ann =' https://www.linkedin.com/in/vishal-nagpal-82975a149/ ',c ='pm.webBrowser( url=\"https://www.linkedin.com/in/vishal-nagpal-82975a149/\",vis =0)',style='iconAndTextHorizontal',l = 'Linkedin',w=550,h=15, bgc = [(.1),(.1),(.01)])\nGmail      = pm.iconTextButton('GmailBase',ann =' vishalnagpal878@gmail.com ',style='iconAndTextHorizontal',l = 'vishalnagpal878@gmail.com',w=550,h=15, bgc = [(.1),(.1),(.01)])\n\n\nsetingWire = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' select wire first and then Mesh.\\n\\n ( Wire should have all skinned joints. \\n joints should not have any connection. )')\nsetingLatt = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' select lattice first and then Mesh.\\n\\n ( lattice should have all skinned joints. \\n joints should not have any connection. )')\nsetingShap = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' select blendshape.\\n\\n ( Mesh should have only one blenshape on it at a time. )')\nsetingWrap = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Select SourceMesh then WrapMesh. \\n\\n ( SourceMesh should have all skinned joints. \\n joints should not have any connection. )')\nsetingClst = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Select cluster first then Mesh.')\nsetingSoft = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Create Soft Selection.\\n\\n ( select one cluster at a time.)')\nsetingCurv = pm.symbolButton(i = 'menuIconHelp.png', h= 30,w = 30,ann =' Select curve first and then Mesh.\\n\\n ( Curve should have all skinned joints. \\n joints should not have any connection. )')\n\n\npm.formLayout( form, edit=True,  \n\nattachForm=   [(Text, 'top', 5),\n               (Wire, 'top', 40),\n               (Lattice, 'top', 90),\n               (shape, 'top', 140),\n               (Wrap, 'top', 190),\n               (Cluster, 'top', 240),\n               (SoftS, 'top', 290),\n               (Curve, 'top', 342),\n               (setingWire, 'top', 40),\n               (setingLatt, 'top', 90),\n               (setingShap, 'top', 140),\n               (setingWrap, 'top', 190),\n               (setingClst, 'top', 240),\n               (setingSoft, 'top', 295),\n               (setingCurv, 'top', 348),\n               (Linkdin, 'top', 393),\n               (Gmail, 'top', 408),\n            ],\nattachControl=[(Text, 'bottom', 30, Wire), \n             ],\n               \nattachPosition=[(Text, 'right', 10, 65),\n                (Wire, 'right', 0, 75), \n                (Lattice, 'right', 0, 75), \n                (shape, 'right', 0, 75), \n                (Wrap, 'right', 0, 75), \n                (Cluster, 'right', 0, 75), \n                (SoftS, 'right', 0, 75),\n                (Curve, 'right', 0, 75),\n                (setingWire, 'left', 20, 75),\n                (setingLatt, 'left', 20, 75),\n                (setingShap, 'left', 20, 75),\n                (setingWrap, 'left', 20, 75),\n                (setingClst, 'left', 20, 75),\n                (setingSoft, 'left', 20, 75),\n                (setingCurv, 'left', 20, 75),\n                (Linkdin, 'left', 0, 40),\n                (Gmail, 'left', 0, 22)],\n                \n )\n\npm.showWindow( window )\n\n'''--------------------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------------------\n--------------------------------------------------------------------------------------------------------------------'''\n\n'''-----------------------------------------------------------------------------------'''\n\n#=========================================New_Jnt_And_Rename\ndef NewJnt(positonN):\n    objList = cmds.ls(\"NewVish_*_Jnt\")\n    \n    alln = []\n    \n    for n in objList:\n        objNewNum = int(n.split('_')[1])\n        alln.append(objNewNum)\n    alln.sort()\n    \n    alln2 = []\n    for p in range(1,alln[0]):\n        alln2.append(p)\n    \n    for d in range(len(alln)-1):\n        for n in range(alln[d]+1,alln[d+1]):\n            alln2.append(n)\n    \n    cmds.select(d = True)\n    \n    if alln2 != []:\n        if alln2[0] < 10:\n            zro = \"0\"\n            cmds.joint(n = \"NewVish_\"+zro[0]+str(alln2[0])+\"_Jnt\", p = positonN)\n        else:\n            cmds.joint(n = \"NewVish_\"+str(alln2[0])+\"_Jnt\", p = positonN)\n            \n    if alln2 == []:\n        if alln[-1]+1 < 10:\n            zro = \"0\"\n            cmds.joint(n = \"NewVish_\"+zro[0]+str(alln[-1]+1)+\"_Jnt\", p = positonN)\n        else:\n            cmds.joint(n = \"NewVish_\"+str(alln[-1]+1)+\"_Jnt\", p = positonN)\n                        \n\n#=========================================Checking if defaut strings already Exists --  Funtion\n\ndef findString():\n    \n    mysStrings = ['CoolForge','Get_Test_Mesh']\n    \n    for gbgbg in mysStrings:\n        if cmds.objExists(gbgbg):\n          print (pm.error( \"<<<<<(Please Rename \" + gbgbg + \" or delete it )>>>>>\" ))\n          \n\n'''-----------------------------------------------------------------------------------'''\ndef SimpleCurveConvert():\n    \n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n    \n              \n    findString()\n    \n    \n    #=========================================start\n    \n    \n    selection0 = cmds.ls(sl=True)\n    selecti_00 = selection0[0]\n    selecti_01 = selection0[1]\n    cmds.select(d = True)\n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = cmds.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n     \n    cluster_00 = SkinClustor(selecti_00)\n    cluster_01no = SkinClustor(selecti_01)\n    \n    #------------------------------------------------------Find_crv_Jnt\n    \n    Aljnts = cmds.skinCluster(selecti_00, inf = True, q = True)\n    \n    #------------------------------------------------------if_no_skin_on mesh\n    \n    if cluster_01no == []:\n        if pm.objExists(\"New_Nagpal_Jnt\") == False:\n            pm.joint(n = \"New_Nagpal_Jnt\")\n            \n        cmds.skinCluster('New_Nagpal_Jnt', selecti_01)\n        \n    cmds.select(d = True)\n    cluster_01 = SkinClustor(selecti_01)\n    #------------------------------------------------------Find_Hold_Jnt\n    \n    Meeshjnts = cmds.skinCluster(selecti_01, inf = True, q = True)\n    \n    #------------------------------------------------------find unlocked join and lock it\n    \n    unlockJnt = []\n    \n    for n in Meeshjnts:\n        findlock = cmds.getAttr(n+'.liw')\n        if findlock == False:\n            unlockJnt.append(n)\n    \n    if unlockJnt == []:\n        cmds.error( \"Please unlock one joint\" )\n    \n    if len(unlockJnt) > 1:\n        cmds.error( \"Please only one joint should be unlocked\" )\n        \n    cmds.setAttr(unlockJnt[0]+'.liw', 1)\n    \n    #------------------------------------------------------save_Hold_Jnt_Weight\n    cmds.select(selecti_01)\n    polyCount2 = cmds.polyEvaluate( v=True )\n    cmds.select(d =True)\n    \n    Value = []\n    \n    for fdf in range(polyCount2):\n        \n        JntVal = cmds.skinPercent(SkinClustor(selecti_01)[0], selecti_01+'.vtx['+str(fdf)+']' , transform = unlockJnt[0], query=True )\n        Value.append(JntVal)\n    \n    \n    #------------------------------------------------------addInflunce_other_Jnts\n    \n    for gfs in Aljnts:\n    \n        cmds.select(selecti_01)\n    \n        cmds.skinCluster(edit=True,ai=gfs,lw = 1)\n    \n    \n    #------------------------------------------------------wire\n    \n    pm.wire( selecti_01, w= selecti_00,n = 'CoolForge', gw = False, en= 1.000000, ce= 0.000000, li= 0.000000, dds=[(0, 1000)] )\n    pm.setAttr(\"CoolForge.rotation\", 0)\n    \n    #------------------------------------------------------\n    \n    for xx in Aljnts:\n    \n        whichVer = []\n    \n        verName = cmds.select(xx, r =True)\n    \n        cmds.move( 1, xx+'.rotatePivot', y=True, r = True)\n    \n        whichVer.append(xx)\n    \n        cmds.select(selecti_01)\n    \n        cmds.duplicate(n = 'Get_Test_Mesh')\n    \n        cmds.move( -1, xx+'.rotatePivot', y=True, r = True)\n    \n        cmds.select(selecti_01)\n    \n        polyCount = cmds.polyEvaluate( v=True )\n    \n    \n        set_01ZMain = []\n        set_02ZMain = []\n        finlDist= []\n            \n        for x in range(3):\n                \n            set_01Z = []\n            \n            set_02Z = []\n            \n        #------------------------------------------------------\n            for d in range(polyCount):\n                \n                Attr = pm.xform(selecti_01+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n                \n                set_01Z.append((Attr))\n                \n        #------------------------------------------------------\n            for b in range(polyCount):\n                \n                Attrs = pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n                \n                set_02Z.append((Attrs))\n            \n            pm.select(d =True)\n            \n            set_01ZMain.append(set_01Z)\n            set_02ZMain.append(set_02Z)\n          \n        #---------------------------------------------------getDiff \n        for o in range(polyCount):\n                   \n            x1      = float(set_01ZMain[0][o])\n            \n            y1      = float(set_01ZMain[1][o])\n        \n            z1      = float(set_01ZMain[2][o])\n            \n            x2      = float(set_02ZMain[0][o])\n        \n            y2      = float(set_02ZMain[1][o])\n            \n            z2      = float(set_02ZMain[2][o])\n                \n            findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n                \n            finlDist.append(findis)\n    \n        #---------------------------------------------------percentage_find\n        FinelWeight = []\n        \n        for nnn in range(len(Value)):\n            \n            FinelW = (Value[nnn]/1.0)*finlDist[nnn]\n            FinelWeight.append(FinelW)\n        \n        #---------------------------------------------------addSkin\n        cmds.setAttr(unlockJnt[0]+'.liw', 0)\n        for R in range(int(polyCount)):\n            \n    \n            if FinelWeight[R] != 0.0:\n    \n    \n    \n                cmds.skinPercent( SkinClustor(selecti_01)[0],selecti_01+'.vtx['+str(R)+']', tv=(whichVer[0], FinelWeight[R]))\n    \n    \n        cmds.delete('Get_Test_Mesh')\n    \n    for fv in Aljnts:\n        cmds.setAttr(fv+'.liw', 0)\n    \n    cmds.skinCluster(SkinClustor(selecti_01)[0], e = True, ri= unlockJnt[0])\n    #---------------------------------------------------delete_Unwanted_Things\n    if cluster_01no == []:\n        pm.delete(unlockJnt[0])\n    pm.delete('CoolForge')\n    pm.delete(selecti_00+'BaseWire')\n    \n    \n        \n        \n    #---------------------------------------------------Total_Time         \n        \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n        \n    #---------------------------------------------------end...\n    \n    \n    \n\n    \n\n'''-----------------------------------------------------------------------------------'''\n\n\n\n\ndef ClusterConvert():\n        \n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    selection0 = pm.ls(sl=True)\n    positon = cmds.getAttr(selection0[0]+'.origin')[0]\n    \n    pm.select(d =True)\n    \n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = pm.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if pm.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    \n    \n    #------------------------------------------------------check if both have same skinclister\n    \n        \n    if len(SkinClustor(selection0[-1]))==0:\n        if pm.objExists(\"New_Vishu_Jnt\") == False:\n            pm.joint(n = \"New_Vishu_Jnt\")\n            \n        pm.skinCluster('New_Vishu_Jnt', selection0[-1])\n    \n    \n    #------------------------------------------------------Find_Hold_Jnt\n    \n    \n    Meeshjnts = pm.skinCluster(selection0[-1], inf = True, q = True)\n    \n    pm.setAttr(Meeshjnts[0]+'.liw', 1)\n    \n    \n    #------------------------------------------------------\n    pm.select(selection0[0], r =True)\n    for nnn in range(len(selection0)-1):\n        \n        pm.select(selection0[nnn],add = True)\n        \n    \n    pm.move( 1, y=True, r = True)\n    \n    pm.duplicate(selection0[-1], n = 'Get_Test_Mesh')\n    \n    pm.move( -1,y=True, r = True)\n    \n    pm.select(selection0[-1])\n    \n    polyCount = pm.polyEvaluate( v=True )\n    \n    \n    #-----------------------------------------------------set1\n    \n    set_01ZMain = []\n    set_02ZMain = []\n    finlDist= []\n        \n    for x in range(3):\n            \n        set_01Z = []\n        \n        set_02Z = []\n        \n    #------------------------------------------------------\n        for d in range(polyCount):\n            \n            Attr = '%.3f'%pm.xform(selection0[-1]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n            \n            set_01Z.append((Attr))\n            \n    #------------------------------------------------------\n        for b in range(polyCount):\n            \n            Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n            \n            set_02Z.append((Attrs))\n        \n        pm.select(d =True)\n        \n        set_01ZMain.append(set_01Z)\n        set_02ZMain.append(set_02Z)\n      \n    #---------------------------------------------------getDiff \n    for o in range(polyCount):\n               \n        x1      = float(set_01ZMain[0][o])\n        \n        y1      = float(set_01ZMain[1][o])\n    \n        z1      = float(set_01ZMain[2][o])\n        \n        x2      = float(set_02ZMain[0][o])\n    \n        y2      = float(set_02ZMain[1][o])\n        \n        z2      = float(set_02ZMain[2][o])\n            \n        findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n            \n        finlDist.append(findis)\n    \n    \n    #---------------------------------------------------addNewJnt and influnence\n    \n    if pm.objExists(\"NewVish_01_Jnt\") == False:\n        pm.joint(n = \"NewVish_01_Jnt\", p = positon)\n    else:\n        NewJnt(positon)\n    \n    NwJnt = pm.ls(sl=True)\n    pm.select(selection0[-1])\n    \n    pm.skinCluster(edit=True,ai= NwJnt[0],lw = 1)\n    \n    #---------------------------------------------------addSkin\n    \n    for R in range(polyCount):\n    \n        pm.setAttr(Meeshjnts[0]+'.liw', 0)\n    \n            \n    \n        if finlDist[R] != 0.0:\n    \n    \n    \n            pm.skinPercent( SkinClustor(selection0[-1])[0],selection0[-1]+'.vtx['+str(R)+']', tv=(NwJnt[0], finlDist[R]))\n    \n    \n    pm.delete('Get_Test_Mesh')\n        \n        \n    #---------------------------------------------------Total_Time  \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    \n    \n    \n    #---------------------------------------------------end.. \n\n\n\n\n\n\n\n'''-----------------------------------------------------------------------------------'''\n\n\ndef SoftConvert():\n\n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    selection0 = cmds.ls(sl=True)\n    selecti_00 = selection0[0]\n    cmds.cluster(n = 'VishClust')\n    \n    shapename = cmds.listHistory(selecti_00)[0]\n    positon = cmds.getAttr(\"VishClustHandleShape.origin\")[0]\n    cmds.delete('VishClust')\n    \n    cmds.select(shapename)\n    cmds.pickWalk(d = 'up')\n    \n    transName = cmds.ls(sl=True)\n    \n    cmds.select(d =True)\n    \n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = cmds.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    cluster_01no = SkinClustor(transName)\n    #------------------------------------------------------if_no_skin_on_mesh_thenadd_one_joint\n    \n    if cluster_01no == []:\n        \n        if cmds.objExists(\"New_VishHold_Jnt\") == False:\n            cmds.joint(n = \"New_VishHold_Jnt\")\n            \n        cmds.skinCluster('New_VishHold_Jnt', transName)\n        \n    \n    cmds.select(d = True)\n    cluster_01 = SkinClustor(transName)\n    \n    \n    newJnt01 = []\n    \n    if cmds.objExists(\"NewVish_01_Jnt\") == True:\n        cmds.select(d = True)\n        NewJnt(positon)\n        NwJnt = cmds.ls(sl=True)\n        newJnt01.append(NwJnt[0])\n        cmds.select(transName)\n        cmds.skinCluster(edit=True,ai=NwJnt[0],lw = 1, wt = 0)\n        cmds.select(d = True)\n        \n    if cmds.objExists(\"NewVish_01_Jnt\") == False:\n        cmds.select(d = True)\n        cmds.joint(n = \"NewVish_01_Jnt\", p = positon )\n        NwJnt = cmds.ls(sl=True)\n        newJnt01.append(NwJnt[0])\n        cmds.select(transName)\n        cmds.skinCluster(edit=True,ai=\"NewVish_01_Jnt\",lw = 1, wt = 0)\n    #------------------------------------------------------Find_Hold_Jnt\n    \n    \n    Meeshjnts = cmds.skinCluster(transName, inf = True, q = True)\n    \n    cmds.setAttr(Meeshjnts[0]+'.liw', 1)\n    \n    \n    #------------------------------------------------------\n    \n    cmds.select(selecti_00, r =True)\n    for nnn in range(len(selection0)):\n        cmds.select(selection0[nnn],add = True)\n    \n    cmds.move( 1, y=True, r = True)\n    \n    cmds.duplicate(transName[0], n = 'Get_Test_Mesh')\n    \n    cmds.move( -1,y=True, r = True)\n    \n    cmds.select(transName[0])\n    \n    polyCount = cmds.polyEvaluate( v=True )\n    \n    \n    #-----------------------------------------------------set1\n    \n    set_01ZMain = []\n    set_02ZMain = []\n    finlDist= []\n        \n    for x in range(3):\n            \n        set_01Z = []\n        \n        set_02Z = []\n        \n    #------------------------------------------------------\n        for d in range(polyCount):\n            \n            Attr = '%.3f'%pm.xform(transName[0]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n            \n            set_01Z.append((Attr))\n            \n    #------------------------------------------------------\n        for b in range(polyCount):\n            \n            Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n            \n            set_02Z.append((Attrs))\n        \n        pm.select(d =True)\n        \n        set_01ZMain.append(set_01Z)\n        set_02ZMain.append(set_02Z)\n      \n    #---------------------------------------------------getDiff \n    for o in range(polyCount):\n               \n        x1      = float(set_01ZMain[0][o])\n        \n        y1      = float(set_01ZMain[1][o])\n    \n        z1      = float(set_01ZMain[2][o])\n        \n        x2      = float(set_02ZMain[0][o])\n    \n        y2      = float(set_02ZMain[1][o])\n        \n        z2      = float(set_02ZMain[2][o])\n            \n        findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n            \n        finlDist.append(findis)\n    \n    \n    #---------------------------------------------------addSkin\n    \n    for R in range(polyCount):\n    \n        cmds.setAttr(Meeshjnts[0]+'.liw', 0)\n    \n            \n    \n        if finlDist[R] != 0.0:\n    \n    \n    \n            cmds.skinPercent( SkinClustor(transName[0])[0],transName[0]+'.vtx['+str(R)+']', tv=(newJnt01[0], finlDist[R]))\n    \n    \n    cmds.delete('Get_Test_Mesh')\n        \n        \n    #---------------------------------------------------Total_Time  \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    \n    \n    \n    #---------------------------------------------------end..\n\n\n'''-----------------------------------------------------------------------------------'''\n\n        \ndef WrapCurveWireLatticeConvet():\n\n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    selection0 = cmds.ls(sl=True)\n    \n    cmds.select(d = True)\n    \n    #=========================================if_Wire_rotation_Zero\n    def checkWire(NamwireDfm):\n        nodes = []\n    \n        node = cmds.listHistory(NamwireDfm)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'wire':\n                nodes.append(damn)\n        return nodes\n        \n    rotVal = []\n    if checkWire(selection0[1]) != []:\n        rotVal2 = pm.getAttr(checkWire(selection0[1])[0]+\".rotation\")\n        rotVal.append(rotVal2)\n        if rotVal != 0.0:\n            pm.setAttr(checkWire(selection0[1])[0]+\".rotation\", 0.0)\n            \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = cmds.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if cmds.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    #------------------------------------------------------check if both have same skinclister\n    meshClust = SkinClustor(selection0[1])\n    wireClust = SkinClustor(selection0[0])\n    \n    if len(SkinClustor(selection0[0]))==0:\n        print (pm.error( \"<<<<<(no skin on wire)>>>>>\" ))\n    \n    if len(SkinClustor(selection0[0]))==1:\n        if wireClust[0] in meshClust:\n            meshClust.remove(wireClust[0])\n    \n    if SkinClustor(selection0[0]) != 0:\n        for n in SkinClustor(selection0[0]):\n            if n in meshClust:\n                meshClust.remove(n)\n            \n    if meshClust==[]:\n        if cmds.objExists(\"New_Vishu_Jnt\") == False:\n            cmds.joint(n = \"New_Vishu_Jnt\")\n            \n        cmds.skinCluster('New_Vishu_Jnt', selection0[1])\n    \n    #------------------------------------------------------Find_Hold_Jnt\n    \n    \n    Meeshjnts = cmds.skinCluster(selection0[1], inf = True, q = True)\n    \n    cmds.setAttr(Meeshjnts[0]+'.liw', 1)\n    \n    \n    #------------------------------------------------------Find_deformer_Jnt\n    \n    \n    Aljnts = cmds.skinCluster(selection0[0], inf = True, q = True)\n    \n    \n    #------------------------------------------------------addInflunce_other_Jnts\n    \n    \n    \n    for gfs in Aljnts:\n        \n        if gfs not in Meeshjnts:\n    \n            cmds.select(selection0[1])\n        \n            cmds.skinCluster(edit=True,ai=gfs,lw = 1)\n    \n    \n    \n    #------------------------------------------------------\n    \n    \n    for xx in Aljnts:\n    \n        whichVer = []\n    \n        verName = cmds.select(xx, r =True)\n    \n        cmds.move( 1, xx+'.rotatePivot', y=True, r = True)\n    \n        whichVer.append(xx)\n    \n        cmds.select(selection0[1])\n    \n        cmds.duplicate(n = 'Get_Test_Mesh')\n    \n        cmds.move( -1, xx+'.rotatePivot', y=True, r = True)\n    \n        cmds.select(selection0[1])\n    \n        polyCount = cmds.polyEvaluate( v=True )\n    \n    \n        set_01ZMain = []\n        set_02ZMain = []\n        finlDist= []\n            \n        for x in range(3):\n                \n            set_01Z = []\n            \n            set_02Z = []\n            \n        #------------------------------------------------------\n            for d in range(polyCount):\n                \n                Attr = '%.3f'%pm.xform(selection0[1]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n                \n                set_01Z.append((Attr))\n                \n        #------------------------------------------------------\n            for b in range(polyCount):\n                \n                Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n                \n                set_02Z.append((Attrs))\n            \n            pm.select(d =True)\n            \n            set_01ZMain.append(set_01Z)\n            set_02ZMain.append(set_02Z)\n          \n        #---------------------------------------------------getDiff \n        for o in range(polyCount):\n                   \n            x1      = float(set_01ZMain[0][o])\n            \n            y1      = float(set_01ZMain[1][o])\n        \n            z1      = float(set_01ZMain[2][o])\n            \n            x2      = float(set_02ZMain[0][o])\n        \n            y2      = float(set_02ZMain[1][o])\n            \n            z2      = float(set_02ZMain[2][o])\n                \n            findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n                \n            finlDist.append(findis)\n    \n    \n        #---------------------------------------------------addSkin\n    \n        for R in range(int(polyCount)):\n    \n            cmds.setAttr(Meeshjnts[0]+'.liw', 0)\n    \n            \n    \n            if finlDist[R] != 0.0:\n    \n    \n    \n                cmds.skinPercent( SkinClustor(selection0[1])[0],selection0[1]+'.vtx['+str(R)+']', tv=(whichVer[0], finlDist[R]))\n    \n    \n        cmds.delete('Get_Test_Mesh')\n    \n    \n    if checkWire(selection0[1]) != []:\n        pm.setAttr(checkWire(selection0[1])[0]+\".rotation\", rotVal[0])\n    #---------------------------------------------------Total_Time         \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    #---------------------------------------------------end..\n\n\n\n\n    \n'''---------------------------------------------------------------------------------'''\ndef BlendShapeConvert():\n    \n    start_time = time.time()\n    \n    #=========================================Checking if defaut strings already Exists\n              \n    findString()\n    \n    #=========================================start\n    \n    transName = pm.ls(sl=True)\n    \n    pm.listHistory(transName[0])\n    \n    pm.select(d =True)\n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    def BlendShape(NamBlensSHape):\n        nodes = []\n    \n        node = pm.listHistory(NamBlensSHape)\n        for damn in node:\n            \n            if pm.nodeType(damn) == 'blendShape':\n                nodes.append(damn)\n        return nodes\n    \n    WeightName = pm.listAttr(BlendShape(transName[0])[0]+'.w', m =True)\n    \n    #------------------------------------------------------Find_SkinCluster\n    \n    \n    def SkinClustor(NamSkinClust):\n        nodes = []\n    \n        node = pm.listHistory(NamSkinClust)\n        for damn in node:\n            \n            if pm.nodeType(damn) == 'skinCluster':\n                nodes.append(damn)\n        return nodes\n    \n    #------------------------------------------------------check if both have same skinclister\n    \n    if len(SkinClustor(transName[0]))==0:\n        if pm.objExists(\"New_Vishu_Jnt\") == False:\n            pm.joint(n = \"New_Vishu_Jnt\")\n            \n        pm.skinCluster('New_Vishu_Jnt', transName[0])\n        \n    #------------------------------------------------------Find_Hold_Jnt\n    \n    MeshJnt = pm.skinCluster(transName[0], inf = True, q = True)\n    \n    pm.setAttr(MeshJnt[0]+'.liw', 1)\n    \n    #------------------------------------------------------\n    \n    pm.setAttr(BlendShape(transName[0])[0]+'.'+WeightName[0], 1)\n    \n    pm.duplicate(transName[0], n = 'Get_Test_Mesh')\n    \n    pm.setAttr(BlendShape(transName[0])[0]+'.'+WeightName[0], 0)\n    \n    pm.select(transName[0])\n    \n    polyCount = pm.polyEvaluate( v=True )\n    \n    pm.select(d =True)\n    \n    #---------------------------------------------------addNewJnt and influnence\n    \n    if pm.objExists(\"NewVish_01_Jnt\") == False:\n        pm.joint(n = \"NewVish_01_Jnt\")\n    else:\n        NewJnt((0.0,0.0,0.0))\n    \n    NwJnt = pm.ls(sl=True)\n    pm.select(transName[0])\n    \n    pm.skinCluster(edit=True,ai= NwJnt[0],lw = 1)\n    \n    #-----------------------------------------------------set1\n    \n    set_01ZMain = []\n    set_02ZMain = []\n    finlDist= []\n    \n    \n    finlDistGetBig = []\n    \n    \n    for x in range(3):\n            \n        set_01Z = []\n        \n        set_02Z = []\n        \n    #------------------------------------------------------\n        for d in range(polyCount):\n            \n            Attr = '%.3f'%pm.xform(transName[0]+'.vtx['+str(d)+']', q =True, ws = True, t=True)[x]\n            \n            set_01Z.append((Attr))\n            \n    #------------------------------------------------------\n        for b in range(polyCount):\n            \n            Attrs = '%.3f'%pm.xform('Get_Test_Mesh'+'.vtx['+str(b)+']', q =True, ws = True, t=True)[x]\n            \n            set_02Z.append((Attrs))\n        \n        pm.select(d =True)\n        \n        set_01ZMain.append(set_01Z)\n        set_02ZMain.append(set_02Z)\n      \n    #---------------------------------------------------getDiff \n    for o in range(polyCount):\n               \n        x1      = float(set_01ZMain[0][o])\n        \n        y1      = float(set_01ZMain[1][o])\n    \n        z1      = float(set_01ZMain[2][o])\n        \n        x2      = float(set_02ZMain[0][o])\n    \n        y2      = float(set_02ZMain[1][o])\n        \n        z2      = float(set_02ZMain[2][o])\n            \n        findis = math.sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)))\n            \n        finlDist.append(findis)\n        finlDistGetBig.append(findis)\n                \n    #---------------------------------------------------addSkin\n    finlDistGetBig.sort()\n    finlDistGetBigNum = finlDistGetBig[-1]\n    \n    for R in range(polyCount):\n            \n        pm.setAttr(MeshJnt[0]+'.liw', 0)\n    \n                \n        if finlDist[R] != 0.0 :\n            \n            pm.skinPercent( SkinClustor(transName[0])[0],transName[0]+'.vtx['+str(R)+']', tv=(NwJnt[0], finlDist[R]/finlDistGetBigNum))\n                \n    pm.delete('Get_Test_Mesh')\n        \n    #---------------------------------------------------Total_Time  \n    \n    \n    sys.stdout.write('You have done a great job. ' \" %s seconds \" % (time.time() - start_time))\n    \n    \n    \n    #---------------------------------------------------end..   \n\n    \n    \n    \n    \n    \n'''------------------------------------------------------------'''\n\n\n\n\n\n\n\n#=========================================Lattice\ndef latticeButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'lattice':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        WrapCurveWireLatticeConvet()\n        print('Lattice',allObjecto)\n    else:\n        cmds.error( \"No_Lattice\" )\n#=========================================\n\n#=========================================wire----\ndef wireButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'wire':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        WrapCurveWireLatticeConvet()\n        print('Wire',allObjecto)\n    else:\n        cmds.error( \"No_Wire\" )\n#=========================================\n\n#=========================================wrap----\ndef wrapButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'wrap':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        WrapCurveWireLatticeConvet()\n        print('Wrap',allObjecto)\n    else:\n        cmds.error( \"No_Wrap\" )\n#=========================================\n\n#=========================================blendShape----\ndef blendShapeButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[0]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'blendShape':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        BlendShapeConvert()\n        print('BlendShape',allObjecto)\n    else:\n        cmds.error( \"No_BlendShape\" )\n#=========================================\n\n#=========================================clusterHandle----\ndef clusterButton():\n    selectedo = cmds.ls(sl=True)\n    listo = cmds.listHistory(selectedo[-1]) \n    allObjecto = []\n    for s in listo:\n        if  cmds.nodeType(s) == 'cluster':\n            allObjecto.append(s)\n            \n    if len(allObjecto) !=0:\n        ClusterConvert()\n        print('Cluster',allObjecto)\n    else:\n        cmds.error( \"No_Cluster\" )\n#=========================================\n\n#=========================================SoftSelection\ndef SoftButton():\n    checkSoft = cmds.softSelect(q = True, sse=True)\n    \n    selectedo = cmds.ls(sl=True)\n    \n    if cmds.nodeType(selectedo[0]) == 'mesh' and checkSoft == 1:\n        SoftConvert()\n        print('SoftSelection',selectedo)\n    else:\n        cmds.error( \"No_SoftSelection\" )\n    \n#=========================================\n\n#=========================================Curve\ndef CurveButton():\n    pm.pickWalk(d = 'down')\n    selectedo = cmds.ls(sl=True)\n    pm.pickWalk(d = 'up')\n    if cmds.nodeType(selectedo[0]) == 'nurbsCurve' and cmds.nodeType(selectedo[1]) == 'mesh' :\n        SimpleCurveConvert()\n        print('Curve')\n    else:\n        cmds.error( \"No_Curve\" )\n#=========================================\n\n'''------------------------------------------------------------end'''" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Shelf" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Shelf" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Shel" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconWindow.png" 
        -image1 "menuIconWindow.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "ToggleShelf" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Copy the weight of a vertex to paste it onto other vertices" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Copy Vertex Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CVW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CopyVertexWeights" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paste the weight of a copied vertex onto other vertices" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Paste Vertex Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PVW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "PasteVertexWeights" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Copy the weight of a vertex to paste it onto other vertices" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Copy Vertex Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "CVW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "CopyVertexWeights" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Paste the weight of a copied vertex onto other vertices" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Paste Vertex Weights" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "PVW" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconSkinning.png" 
        -image1 "menuIconSkinning.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "PasteVertexWeights" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "global proc string[] zooAttrManUtilsArrayReorder( string $array[], int $entries[], string $dir ) {\n\tstring $newArray[] = $array;\n\tint $gaps[];\n\tint $be;\n\n\tif( !`size $entries` ) return $array;\n\t$entries = `sort $entries`;\n\t$gaps[0] = $entries[0];\n\tfor( $n = 0; $n < `size $entries`-1; $n++ ) if( $entries[$n]+1 != $entries[( $n+1 )] ) {\n\t\t$gaps[( `size $gaps` )] = $entries[$n];\n\t\t$gaps[( `size $gaps` )] = $entries[( $n+1 )];\n\t\t}\n\t$gaps[( `size $gaps` )] = $entries[( `size $entries`-1 )];\n\n\tfor( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == \"up\" ) $newArray = `zooAttrManUtilsArrayShiftUp $newArray $gaps[$n] $gaps[( $n+1 )]`;\n\tfor( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == \"down\" ) $newArray = `zooAttrManUtilsArrayShiftDown $newArray $gaps[$n] $gaps[( $n+1 )]`;\n\n\treturn $newArray;\n\t}\n\n\n\n\nglobal proc string[] zooAttrManUtilsArrayShiftUp( string $array[], int $startIndex, int $endIndex ) {\n\tstring $newArray[];\n\tint $displaced = $startIndex-1;\n\tint $num = ( $endIndex-$startIndex )+1;\n\n\tif( $startIndex == 0 ) return $array;\n\n\t//copy the original array to the newArray variable\n\tfor( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];\n\n\tint $i = $startIndex-1;\n\tfor( $n = 0; $n < $num; $n++, $i++) $newArray[$i] = $array[( $i+1 )];\n\n\t$newArray[$endIndex] = $array[$displaced];\n\treturn $newArray;\n\t}\n\n\n\n//------\n//shifts entries inclusive from the start index, to the end index down (ie away from zero) in an array\n//------\nglobal proc string[] zooAttrManUtilsArrayShiftDown( string $array[], int $startIndex, int $endIndex ) {\n\tstring $newArray[];\n\tint $displaced = $endIndex+1;\n\tint $num = ( $endIndex-$startIndex )+1;\n\n\tif( $endIndex >= `size $array`-1 ) return $array;\n\n\t//copy the original array to the newArray variable\n\tfor( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];\n\n\tint $i = $startIndex+$num;\n\tfor( $n = 0; $n < $num; $i--, $n++ ) $newArray[$i] = $array[( $i-1 )];\n\n\t$newArray[$startIndex] = $array[$displaced];\n\treturn $newArray;\n\t}\n\n\n\n//------\n//returns the first entry in an array.\n//this is useful for commands that only return a single string, but return an array\n//\n//example: string $constraint = zooAttrManUtilsReturnElement( 0,`parentConstraint -mo $obj2 $obj1` );\n//example: string $parent = zooAttrManUtilsReturnElement( 0,`listRelatives -p $obj2` );\n//------\nglobal proc string zooAttrManUtilsReturnElement( int $entry, string $array[] ) {\n\tif( $entry<0 ) $entry = `size $array` + $entry;\n\treturn $array[$entry];\n\t}\n\n\n\n//------\n//this proc deals with getting the attribute selection from the UI, and passing it to the reorder proc below\n//------\nglobal proc zooDoReorder( string $dir ) {\n\tstring $validTypes[] = { \"bool\", \"enum\", \"long\", \"double\" };\n\tstring $obj = `text -q -l dwAttrManObjTXT`;\n\tstring $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;\n\tif( !`size $selAttrs` ) return;\n\n\tstring $attrs[] = `listAttr -k -ud $obj`;\n\tstring $validAttrs[];\n\tint $toReorder[];\n\n\t//filters the list of attributes - the re-ordering process only works on attributes that show up in the channel box\n\tfor( $n=0; $n<`size $attrs`; $n++ ) {\n\t\tstring $type = `addAttr -q -at ( $obj +\".\"+ $attrs[$n] )`;\n\t\tint $isValid = 0;\n\t\tfor( $a in $validTypes ) if( $type == $a ) { $isValid = 1; break; }\n\t\tif( $isValid ) $validAttrs[( `size $validAttrs` )] = $attrs[$n];\n\t\t}\n\n\t//gets a list of which attributes are selected, and puts their indicies into an array\n\tfor( $n=0; $n<`size $validAttrs`; $n++ ) for( $a in $selAttrs ){\n\t\tif( $a == $validAttrs[$n] ) $toReorder[( `size $toReorder` )] = $n;\n\t\t}\n\n\tstring $newOrder[] = `zooAttrManUtilsArrayReorder $validAttrs $toReorder $dir`;\n\tzooAttrManReorder $obj $newOrder;\n\tdwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n\tfor( $a in $selAttrs ) textScrollList -e -si $a dwAttrManTSL;\n\t}\n\n\n\n//------\n//reorders dynamic attributes on an object\n//NOTE: this proc is taken from zooReorderAttribs - its put here for the sake of simplicity\n//------\nglobal proc zooAttrManReorder ( string $obj, string $newAttribOrder[] ) {\n\tstring $selObjs[] = `ls -sl`;\n\tfor ( $attrib in $newAttribOrder ) {\n\t\t//if the attribute is locked, we'll need to unlock it to rename it\n\t\tint $isAttrLocked = `getAttr -l ( $obj + \".\" + $attrib )`;\n\t\tif( $isAttrLocked ) setAttr -l 0 ( $obj + \".\" + $attrib );\n\n\t\t//rename the attribute to a temporary name.  You can't rename it to its own name, so we need to rename it to a proxy name, and then back again\n\t\tstring $tempAttrib = `renameAttr ( $obj + \".\" + $attrib ) \"temp\"`;\n\t\trenameAttr ( $obj + \".\" + $tempAttrib ) $attrib;\n\n\t\t//if the attribute WAS locked, lock it again, in order to maximise transparency\n\t\tif( $isAttrLocked ) setAttr -l 1 ( $obj + \".\" + $attrib );\n\t\t}\n\n\tselect -r $selObjs;\n\tselect $selObjs;\n\t}\n\n\n\n//------\n//this proc deals with getting the new attribute name from the UI, and renaming the attribute\n//------\nglobal proc zooAttrManDoRename() {\n\tstring $obj = `text -q -l dwAttrManObjTXT`;\n\tstring $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;\n\tstring $oldName = $selAttrs[0];\n\tstring $newName = `textField -q -tx dwNewAttrName`;\n\n\tzooAttrManRenameAttrInPlace $obj $oldName $newName;\n\n\tdwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n\ttextScrollList -e -si $newName dwAttrManTSL;\n\t}\n\n\n\n//------\n//renames an attribute without changing its order\n//NOTE: this proc is taken from zooReorderAttribs - its put here for the sake of simplicity\n//------\nglobal proc zooAttrManRenameAttrInPlace( string $obj, string $oldAttr, string $newAttr ) {\n\tstring $attrs[] = `listAttr -k -ud $obj`;\n\n\tfor( $n=0; $n<`size $attrs`; $n++ ) if( $attrs[$n] == $oldAttr ) {\n\t\tint $isLocked = `getAttr -l ( $obj + \".\" + $attrs[$n] )`;\n\t\tsetAttr -l 0 ( $obj + \".\" + $attrs[$n] );\n\t\trenameAttr ( $obj + \".\" + $attrs[$n] ) $newAttr;\n\t\t$attrs[$n] = $newAttr;\n\t\tsetAttr -l $isLocked ( $obj + \".\" + $attrs[$n] );\n\t\t}\n\n\tzooAttrManReorder $obj $attrs;\n\t}\n\n\n\n///////////////////////////////////////////////////////////////\n\n//Proc loads the attributes for the selected object into the UI.\n//For now we?re skipping all compound attributes...they?re tricky lil? bastards...!\nglobal proc dwAttrMan_LoadAttributes (string $obj, int $keyableCheck)\n{\n//string $sel[] = `ls -sl -o`;\nif (! `objExists $obj`)\n\t{\n\tprint \"Object invalid or unspecified. Try again.\\n\";\n\treturn;\n\t}\n\n//Query user-defined attrs, depending on $keyableCheck int.\nstring $attrs[];\nif ($keyableCheck)\n\t$attrs = `listAttr -ud -k $obj`;\nelse\n\t$attrs = `listAttr -ud $obj`;\n\n\n//if the attribute is a \"vector\" (ie the vector type was checked when the attribute was added)\n//then explicitly list all its children\nstring $expandedAttrs[];\nfor( $a in $attrs ) {\n\tstring $children[] = `attributeQuery -listChildren -n $obj $a`;\n\tif( `size $children` ) for( $b in $children ) $expandedAttrs[( `size $expandedAttrs` )] = $b;\n\telse $expandedAttrs[( `size $expandedAttrs` )] = $a;\n\t}\n//clear $attrs;\n//$attrs = $expandedAttrs;\n//$attrs = `stringArrayRemoveDuplicates $attrs`;\n\n\n//if (! `size $attrs`)\n//\tprint ($obj + \" has no custom attributes.\\n\");\n\n\n//Load obj name\ntext -e -l $obj dwAttrManObjTXT;\n//Remove all from TSL.\ntextScrollList -e -ra dwAttrManTSL;\n//Load attrs\nfor ($a in $attrs)\n\t{\n\t//Skip over compound attributes for now.\n\t//string $parent = `addAttr -q -parent ($obj + \".\" + $a)`;\n\t//string $parentType = `addAttr -q -attributeType ($obj + \".\" + $parent)`;\n\t//if (($parentType == \"double3\") || ($parentType == \"double2\") || ($parentType == \"float3\") || ($parentType == \"float2\"))\n\t//\tcontinue;\n\tstring $parent = `addAttr -q -parent ($obj + \".\" + $a)`;\n\t//Only add parent attributes (for compound). Compound attrs should be transferred as a group.\n\t//print $parent;\n\tif ($parent == $a)\n\t\ttextScrollList -e -a $a dwAttrManTSL;\n\t}\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc transfers connections from a given object attribute to a target object attribute.\nglobal proc int dwAttrMan_TransferConnections(string $sourceObj, \t\t//Source obj.\n\t\t\t\t\t\t\tstring $attr, \t\t//Source attribute.\n\t\t\t\t\t\t\tstring $targetObj, \t//Target obj.\n\t\t\t\t\t\t\tint $isMulti)\t\t//Is the attribute a multi attribute?\n{\n//Get all connection to- and from- the source object attribute.\nstring $sourceConnections[] = `listConnections -source 1 -destination 0 -plugs 1 ($sourceObj + \".\" + $attr)`;\nstring $destinationConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + \".\" + $attr)`;\n\n\n//If the source obj?s \".message\" attribute is connected to the same obj as $sourceConnections, then it is locked and we can?t transfer it.\nstring $messageConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + \".message\")`;\nstring $messageBuffer[];\nstring $destinationBuffer[];\nint $isLockedByMessage = 0;\nint $n = 0;\nif (`size $messageConnections`)\n\t{\n\ttokenize $messageConnections[0] \".\" $messageBuffer;\n\ttokenize $destinationConnections[0] \".\" $destinationBuffer;\n\tfor ($n = 0; $n < `size $destinationConnections`; $n++)\n\t\t{\n\t\tif ($messageBuffer[0] == $destinationBuffer[$n])\n\t\t\t{\n\t\t\twarning ($sourceObj + \".\" + $attr + \" is locked to \" + $destinationBuffer[$n] + \". Cannot transfer connections for this attribute.\");\n\t\t\t$isLockedByMessage = 1;\n\t\t\t}\n\t\t}\n\t}\nif ($isLockedByMessage)\n\treturn $isLockedByMessage;\n\n\n//Disconnect old attributes and make connections for new attribute.\n//SOURCE CONNECTIONS (CONNECTIONS COMING FROM OTHER OBJECTS).\nint $i = 0;\nfor ($s in $sourceConnections)\n\t{\n\t//If the attribute is multi, we have to find the indexes that are connected.\n\tif ($isMulti)\n\t\t{\n\t\t//Not sure how important $indexMatters really is... it seems to work fine without specifiying it, so let?s ignore it for now.\n\t\t//if ($indexMatters)\n\t\t//\t{\n\t\t\tdisconnectAttr $s ($sourceObj + \".\" + $attr + \"[\" + $i + \"]\");\n\t\t\tconnectAttr -f $s ($targetObj + \".\" + $attr + \"[\" + $i + \"]\");\n\t\t//\t}\n\t\t//else if (! $indexMatters)\n\t\t//\t{\n\t\t//\tdisconnectAttr -na $s ($sourceObj + \".\" + $attr);\n\t\t//\tconnectAttr -f -na $s ($targetObj + \".\" + $attr);\n\t\t//\t}\n\t\t}\n\telse\n\t\t{\n\t\tdisconnectAttr $s ($sourceObj + \".\" + $attr);\n\t\tconnectAttr -f $s ($targetObj + \".\" + $attr);\n\t\t}\n\t$i++;\n\t}\n//DESTINATION CONNECTIONS (CONNECTIONS GOING TO OTHER OBJECTS).\n$i = 0;\nfor ($d in $destinationConnections)\n\t{\n\t//If the attribute is multi, we have to find the indexes that are connected.\n\tif ($isMulti)\n\t\t{\n\t\t//if ($indexMatters)\n\t\t//\t{\n\t\t\tdisconnectAttr ($sourceObj + \".\" + $attr + \"[\" + $i + \"]\") $d;\n\t\t\tconnectAttr -f ($targetObj + \".\" + $attr + \"[\" + $i + \"]\") $d;\n\t\t//\t}\n\t\t//else if (! $indexMatters)\n\t\t//\t{\n\t\t//\tdisconnectAttr -na ($sourceObj + \".\" + $a) $d;\n\t\t//\tconnectAttr -f -na ($targetObj + \".\" + $a) $d;\n\t\t//\t}\n\t\t}\n\telse\n\t\t{\n\t\tdisconnectAttr ($sourceObj + \".\" + $attr) $d;\n\t\tconnectAttr -f ($targetObj + \".\" + $attr) $d;\n\t\t}\n\t$i++;\n\t}\n\n//Return if the object is locked by its message attribute.\nreturn $isLockedByMessage;\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc returns 1 if the attribute is a compound type attr, 0 if not. \"Compound\" attributes require the \"-nc\" flag, other\n//attribs of compound type do not.\nglobal proc int dwAttrMan_IsCompoundType(string $sourceObj, string $attribute)\n{\nstring $type = `addAttr -q -attributeType ($sourceObj + \".\" + $attribute)`;\n\nif (($type == \"reflectance\") || ($type == \"spectrum\") || ($type == \"float2\") || ($type == \"float3\")\n\t\t || ($type == \"double2\") || ($type == \"double3\") || ($type == \"long2\") || ($type == \"long3\")\n\t\t || ($type == \"short2\") || ($type == \"short3\") || ($type == \"compound\"))\n\treturn 1;\nelse\n\treturn 0;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Proc returns 1 if the attr requires the \"-dataType\" flag. 0 if not.\nglobal proc int dwAttrMan_IsDataType(string $object, string $attr)\n{\nstring $type = `addAttr -q -attributeType ($object + \".\" + $attr)`;\n\nif ($type == \"typed\")\n\treturn 1;\nelse\n\treturn 0;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Proc transfers attributes from the selection in the UI list to the selected obj.\n//All connections to- and from- the attribute are maintained (if user desires), and attributes on original obj are deleted (if user desires).\n//Note: for compound attributes, we will only input the parent attribute into this procedure. That means we need to query the children attrs.\nglobal proc dwAttrMan_TransferAttributes(string $sourceObj,\t\t\t  //Source object\n\t\t\t\t\t\tstring $attrs[], \t  //Attr list\n\t\t\t\t\t\tstring $parent,\t\t  //Parent attr (necessary for compound attrs)\n\t\t\t\t\t\tint $transferConnections, //Transfer connections?\n\t\t\t\t\t\tint $deleteOriginals)\t  //Delete original attrs?\n{\nif (! `objExists $sourceObj`)\n\terror \"Source object specified incorrectly. Try again.\";\nif (! `size $attrs`)\n\terror \"No attributes selected in list. Try again.\";\nstring $sel[] = `ls -sl -o`;\nif (! `size $sel`)\n\terror \"Nothing selected. Select one object and try again.\";\nif (`size $sel` > 1)\n\terror \"Select only one object and try again.\";\n\n//Report error if user wants to transfer attribute to same obj.\nif ($sel[0] == $sourceObj)\n\terror (\"Selected object is the same as the source. Try again.\");\n\n//Report error if attribute already exists on target obj. Do this BEFORE transferring anything.\nfor ($a in $attrs)\n\t{\n\tif (`attributeExists $a $sel[0]`)\n\t\terror (\"Attribute \\\"\" + $a + \"\\\" conflicts with name of existing attribute on target \" + $sel[0] + \". Try again.\");\n\t}\n\nint $numberOfChildren;\nfor ($a in $attrs)\n\t{\n\t//GET ALL THE INFORMATION ABOUT THE ATTRIBUTE.\n\t//Get the -attributeType flag. For now we are skipping attributes that require the \"-dataType\" flag.\n\tstring $type = `addAttr -q -attributeType ($sourceObj + \".\" + $a)`;\n\t//IF THE ATTRIBUTE IS A COMPOUND ATTRIBUTE, GET ITS CHILDREN.\n\n\tstring $children[];\n\tint $isCompoundType = `dwAttrMan_IsCompoundType $sourceObj $a`;\n\tif ($isCompoundType)\n\t\t{\n\t\t//Assign $numberOfChildren only if the attr is a compound type.\n\t\t$numberOfChildren = `addAttr -q -numberOfChildren ($sourceObj + \".\" + $a)`;\n\t\t//Get list of children attrs.\n\t\t$children = `listAttr ($sourceObj + \".\" + $a)`;\n\t\t//Remove parent name from $children array.\n\t\t$children = `stringArrayRemove {$a} $children`;\n\t\t//print $children; return;\n\t\t}\n\n\tint $keyable = `getAttr -keyable ($sourceObj + \".\" + $a)`;\n\tint $locked = `getAttr -lock ($sourceObj + \".\" + $a)`;\n\t//Let?s ignore the attribute value for now.\n\t//$value = `getAttr ($sourceObj + \".\" + $a)`;\n\tstring $longName = `addAttr -q -longName ($sourceObj + \".\" + $a)`;\n\tstring $shortName = `addAttr -q -shortName ($sourceObj + \".\" + $a)`;\n\n\t//Get range information (if attr is not a string type or a vector type (double3)).\n\tint $hasMin; int $hasMax; float $minValue; float $maxValue; int $hasSoftMin;\n\tint $hasSoftMax; float $softMinValue; float $softMaxValue;\n\tif (($type != \"typed\") && ($type != \"message\") && ($type != \"fltMatrix\") && ($type != \"matrix\") && (! $isCompoundType))\n\t\t{\n\t\t$hasMin = `addAttr -q -hasMinValue ($sourceObj + \".\" + $a)`;\n\t\t$hasMax = `addAttr -q -hasMaxValue ($sourceObj + \".\" + $a)`;\n\t\t$minValue = `addAttr -q -minValue ($sourceObj + \".\" + $a)`;\n\t\t$maxValue = `addAttr -q -maxValue ($sourceObj + \".\" + $a)`;\n\t\t$hasSoftMin = `addAttr -q -hasSoftMinValue ($sourceObj + \".\" + $a)`;\n\t\t$hasSoftMax = `addAttr -q -hasSoftMaxValue ($sourceObj + \".\" + $a)`;\n\t\t$softMinValue = `addAttr -q -softMinValue ($sourceObj + \".\" + $a)`;\n\t\t$softMaxValue = `addAttr -q -softMaxValue ($sourceObj + \".\" + $a)`;\n\t\t}\n\n\n\t//Find out if the attribute is a string attribute.\n\tint $isString = 0;\n\tstring $typedDataType[]; //For some reason querying \"-dataType\" returns an array (while \"-attributeType\" returns a string).\n\tif ($type == \"typed\")\n\t\t{\n\t\t$typedDataType = `addAttr -q -dataType ($sourceObj + \".\" + $a)`;\n\t\tif ($typedDataType[0] == \"string\")\n\t\t\t$isString = 1;\n\t\t}\n\n\t//Find out if the attribute is a multi attribute.\n\tint $isMulti = `attributeQuery -n $sourceObj -multi $a`;\n\tint $multiSize = `getAttr -size ($sourceObj + \".\" + $a)`;\n\tint $indexMatters = `addAttr -q -indexMatters ($sourceObj + \".\" + $a)`;\n\n\t//Get the -enumName value if the attribute is an \"enum\" type.\n\tstring $enumName;\n\tif ($type == \"enum\")\n\t\t$enumName = `addAttr -q -enumName ($sourceObj + \".\" + $a)`;\n\n\t//print ($a + \" : \" + $type + \"\\n\");return;\n\n\t//ADD THE ATTR TO THE SELECTED OBJECT.\n\t//We need special cases for \"enum\" type, \"string\" type, and for multi attributes.\n\t//Criteria for multi attributes.\n\tif (! $isMulti)\n\t\t{\n\t\t//Criteria for enum attributes.\n\t\tif ($type != \"enum\")\n\t\t\t{\n\t\t\t//Criteria for string attributes.\n\t\t\tif (! $isString)\n\t\t\t\t{\n\t\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\t\tif (`size $parent`)\n\t\t\t\t\t{\n\t\t\t\t\t//print `addAttr -q -numberOfChildren ($sel[0] + \".\" + $parent)`; return;\n\t\t\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];\n\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\t\t//Note: attributes using the \"-dataType\" flag cannot use the -numberOfChildren flag... cool!\n\t\t\t\tif (`size $parent`)\n\t\t\t\t\taddAttr -parent $parent -dataType \"string\" -longName $longName -shortName $shortName $sel[0];\n\t\t\t\telse\n\t\t\t\t\taddAttr -dataType \"string\" -longName $longName -shortName $shortName $sel[0];\n\t\t\t\t}\n\t\t\t}\n\t\telse\n\t\t\t{\n\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\tif (`size $parent`)\n\t\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType \"enum\" -enumName $enumName -longName $longName -shortName $shortName $sel[0];\n\t\t\telse\n\t\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType \"enum\" -enumName $enumName -longName $longName -shortName $shortName $sel[0];\n\t\t\t}\n\t\t}\n\telse if ($isMulti)\n\t\t{\n\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\tif (`size $parent`)\n\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];\n\t\telse\n\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];\n\t\t}\n\n\t//Now, after transferring the attr: if the attr is a compound type, transfer all its children before continuing.\n\t//This is a recursive part because we are calling this same procedure for each child.\n\tif ($isCompoundType)\n\t\t{\n\t\tfor ($c in $children)\n\t\t\tdwAttrMan_TransferAttributes($sourceObj,\t\t//Source obj\n\t\t\t\t\t\t\t {$c}, \t\t\t//child attribute to add.\n\t\t\t\t\t\t\t $a, \t\t\t//Parent attribute (same as current attr).\n\t\t\t\t\t\t\t $transferConnections,  //transfer connections?\n\t\t\t\t\t\t\t 0);\t\t\t//Don?t delete attr (we?ll delete the parent attr later).\n\t\t}\n\n\n\n\n\t//Edit attribute accordingly. Attributes of type \"typed\" are string attributes and do not have min-max ranges.\n\tif (($type != \"typed\") && ($type != \"message\") && ($type != \"fltMatrix\") && ($type != \"matrix\") && (! $isCompoundType))\n\t\t{\n\t\tif ($hasMin)\n\t\t\taddAttr -e -minValue $minValue ($sel[0] + \".\" + $a);\n\t\tif ($hasMax)\n\t\t\taddAttr -e -maxValue $maxValue ($sel[0] + \".\" + $a);\n\t\tif ($hasSoftMin)\n\t\t\taddAttr -e -softMinValue $softMinValue ($sel[0] + \".\" + $a);\n\t\tif ($hasSoftMax)\n\t\t\taddAttr -e -softMaxValue $softMaxValue ($sel[0] + \".\" + $a);\n\t\t}\n\n\n\n\t//For some reason, this produces a very bizarre error message. Instead, let?s specifiy the -keyable state upon adding the attr (above).\n\t//if ($keyable)\n\t//\tsetAttr -keyable 1 ($sel[0] + \".\" + $a);\n\tif ($locked)\n\t\tsetAttr -lock 1 ($sel[0] + \".\" + $a);\n\n\t//For now we can ignore the value of the attribute.\n\t//Set the attribute value. String attributes require special case.\n\t//if ($type != \"typed\")\n\t//\tsetAttr ($sel[0] + \".\" + $a) $value;\n\t//else if ($isString)\n\t//\tsetAttr -type \"string\" ($sel[0] + \".\" + $a) $value;\n\n\n\t//TRANSFER CONNECTIONS.\n\tint $isLockedByMessage = 0;\n\tif ($transferConnections)\n\t\t{\n\t\t//For compound attrib members, let?s wait until all children are transferred before we do the connections.\n\t\t//***I learned something really important: the parent (compound) attribute exists ONLY when all the children exist.\n\t\t//Only when they ALL exist (the entire compound group, parent and all children) are any of them editable.\n\t\t//So, first check to see if the attr has a given parent, and if that parent indeed exists. If the parent exists,\n\t\t//it exists because all the children attributes have been added to the group. Only then can we proceed to\n\t\t//transfer connections to/from compound attributes and their children attributes.\n\t\tif ((`size $parent`) && (`attributeExists $parent $sel[0]`))\n\t\t\t{\n\t\t\t//Get the children of the parent.\n\t\t\t$children = `listAttr ($sel[0] + \".\" + $parent)`;\n\t\t\t//Remove parent name from $children array.\n\t\t\t$children = `stringArrayRemove {$parent} $children`;\n\t\t\tfor ($c in $children)\n\t\t\t\t$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $c $sel[0] $isMulti`;\n\t\t\t}\n\t\telse if (! `size $parent`)\n\t\t\t$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $a $sel[0] $isMulti`;\n\t\t}\n\n\t//Continue the loop if the attribute is locked by its message attr.\n\tif ($isLockedByMessage)\n\t\tcontinue;\n\nstring $deleteOriginals;\n\t//DELETE ATTR FROM SOURCE OBJ.\n\tif ($deleteOriginals)\n\t\t{\n\t\t//We need to unlock it first.\n\t\tif ($locked)\n\t\t\tsetAttr -lock 0 ($sourceObj + \".\" + $a);\n\t\t//Delete it only if it has no specified parent (ie, not a member of a compound attr group)\n\t\tif (! `size $parent`)\n\t\t\tdeleteAttr ($sourceObj + \".\" + $a);\n\t\t}\n\t}\n\n\n//Refresh TSL to reflect transferred attributes (but only if not a child of a compound attr).\nif (! `size $parent`)\n\tdwAttrMan_LoadAttributes $sourceObj `checkBox -q -v dwAttrManListKeyableCheck`;\n}\n\n\n\n\n///////////////////////////////////////////////////////////////\n\n\nglobal proc doHideConXnList() {\n\tint $hideState = `control -q -vis dwAttrManConXnForm`;\n\tstring $buttonLabel = ( $hideState )? \"<\": \">\";\n\tint $newPos = ( $hideState )? 100: 50;\n\n\tbutton -e -width 12 -l $buttonLabel dwAttrManButtonCollapseConXn;\n\tcontrol -e -vis (!$hideState) dwAttrManConXnForm;\n\n\tformLayout -e\n\t\t-ap dwAttrManConXnForm left -3 $newPos\n\t\t//-af dwAttrManConXnForm top 0\n\t\t//-af dwAttrManConXnForm right 0\n\t\t//-ac dwAttrManConXnForm bottom 0 dwAttrManBottomForm\n\t\tdwAttrManFormMaster;\n\t}\n\n\n\n\n\n///////////////////////////////////////////////////////////////\n//Proc shows connections in the right-hand TSL in the main UI.\nglobal proc dwAttrMan_ShowConnections(int $kind)\n{\n//Clear the TSL\ntextScrollList -e -ra dwAttrManConXnTSL;\n//Get the full object attribute name.\nstring $obj = `text -q -l dwAttrManObjTXT`;\nif (! `objExists $obj`)\n\treturn;\nstring $attr[] = `textScrollList -q -si dwAttrManTSL`;\n//If many attributes are selected, display \"...\"\nif (`size $attr` > 1)\n\ttextScrollList -e -a \"...\" dwAttrManConXnTSL;\nelse if (`size $attr` == 1)\n\t{\n\tstring $connections[];\n\tif ($kind == 1)\n\t\t$connections = `listConnections -s 1 -d 0 -p 1 ($obj + \".\" + $attr[0])`;\n\telse if ($kind == 2)\n\t\t$connections = `listConnections -s 0 -d 1 -p 1 ($obj + \".\" + $attr[0])`;\n\n\tfor ($c in $connections)\n\t\t{\n\t\t//Get the nodeType.\n\t\tstring $nodeBuffer[];\n\t\ttokenize $c \".\" $nodeBuffer;\n\t\tstring $nodeType = `nodeType $nodeBuffer[0]`;\n\t\t//Show the connection name as well as its nodeType.\n\t\ttextScrollList -e -a ($c + \" (\" + $nodeType + \")\") dwAttrManConXnTSL;\n\t\t}\n\t}\n}\n\n\n///////////////////////////////////////////////////////////////\n//Proc deletes selected attributes.\nglobal proc dwAttrMan_DeleteAttributes(string $obj, string $attrs[])\n{\nif (! `size $attrs`)\n\treturn;\n\nfor ($a in $attrs)\n\tdeleteAttr ($obj + \".\" + $a);\n\n//Refresh source TSL\ndwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n//Refresh connection TSL\ndwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;\n}\n\n///////////////////////////////////////////////////////////////\n//Procedure selects a connected obj, as listed in the connection TSL.\nglobal proc dwAttrMan_SelectConnectionObject()\n{\nstring $objAttr[] = `textScrollList -q -si dwAttrManConXnTSL`;\nif (! `size $objAttr`)\n\treturn;\n\n//Tokenize the $objAttrs by \".\", make sure the buffer exists, then add it to a final selection string.\nstring $objBuffer[];\nstring $selectionString;\nfor ($i = 0; $i < `size $objAttr`; $i++)\n\t{\n\ttokenize $objAttr[$i] \".\" $objBuffer;\n\tif (`objExists $objBuffer[$i]`)\n\t\t$selectionString += ($objBuffer[$i] + \" \");\n\t}\n\nif (`size $selectionString`)\n\tselect -r $selectionString;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Procedure selects the original source obj.\nglobal proc dwAttrMan_SelectSourceObject()\n{\nstring $obj = `text -q -l dwAttrManObjTXT`;\nif (! `objExists $obj`)\n\treturn;\nselect -r $obj;\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc sets the source attr?s keyable or not.\nglobal proc dwAttrMan_SetKeyable()\n{\nstring $obj = `text -q -l dwAttrManObjTXT`;\nstring $attrs[] = `textScrollList -q -si dwAttrManTSL`;\nfor ($a in $attrs)\n\t{\n\t//If attribute is a compound attr, then set children keyable.\n\tif (`dwAttrMan_IsCompoundType $obj $a `)\n\t\t{\n\t\tstring $children[] = `listAttr ($obj + \".\" + $a)`;\n\t\t$children = `stringArrayRemove {($obj + \".\" + $a)} $children`;\n\t\tint $keyable;\n\t\tfor ($c in $children)\n\t\t\t{\n\t\t\t$keyable = `getAttr -k ($obj + \".\" + $c)`;\n\t\t\tsetAttr -k (! $keyable) ($obj + \".\" + $c);\n\t\t\t//print ($c + \" ----> \" + (! $keyable) + \"\\n\");\n\t\t\t}\n\t\t//Another bizarre anomoly: I must set the compound parent?s \"keyability\" to the *opposite* of the children (???)\n\t\tsetAttr -k ($keyable) ($obj + \".\" + $a);\n\t\t//print ($a + \" ----> \" + ($keyable) + \"\\n\");\n\t\t}\n\n\tif (`dwAttrMan_IsDataType $obj $a`)\n\t\t{\n\t\twarning ($obj + \".\" + $a + \" is a dataType attribute. Attributes that require the \\\"-dataType\\\" flag cannot be keyable.\");\n\t\tcontinue;\n\t\t}\n\n\tif (`getAttr -k ($obj + \".\" + $a)` == 0)\n\t\tsetAttr -k 1 ($obj + \".\" + $a);\n\telse\n\t\tsetAttr -k 0 ($obj + \".\" + $a);\n\t}\n//Refresh TSL.\ndwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Returns the exact attribute type, regardless whether it is an -at or a -dt type.\nglobal proc string dwAttrManGetAttrTypeGeneral(string $object, string $attribute)\n{\nstring $type = `addAttr -q -attributeType ($object + \".\" + $attribute)`;\n\nif ($type == \"typed\")\n\t{\n\t//Data typed attrs return an array for their -dataType\n\tstring $dataType[] = `addAttr -q -dataType ($object + \".\" + $attribute)`;\n\treturn $dataType[0];\n\t}\n\nelse\n\treturn $type;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Returns 1 if the attribute is a multi attribute, 0 if not\nglobal proc int dwAttrManIsMulti(string $object, string $attribute)\n{\nstring $isMulti = `addAttr -q -multi ($object + \".\" + $attribute)`;\n\nreturn $isMulti;\n}\n\n///////////////////////////////////////////////////////////////\n\nglobal proc attrManHelp()\n{\nif (`window -ex attrManHelpUI`)\n\tdeleteUI attrManHelpUI;\n\nwindow -t \"AttributeMan Help\" -wh 450 350 attrManHelpUI;\n\tstring $form = `formLayout`;\n\t\tstring $scroll = `scrollLayout`;\n\t\t\tcolumnLayout;\n\n\t\t\t\trowColumnLayout -nc 2 -cw 1 75 -cw 2 300;\n\t\t\t\t\ttext -label \"Authors: \" -font boldLabelFont;\n\t\t\t\t\ttext -label \"Hamish McKenzie:  www.macaronikazoo.com\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"David Walden:        www.davidwalden.com\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"Created:\" -font boldLabelFont;\n\t\t\t\t\ttext -label \"May 5-18, 2004\";\n\t\t\t\t\tsetParent..;\n\n\t\t\t\ttext -label \"\" -h 30;\n\n\n\t\t\t\ttext -label \"   About: \" -font boldLabelFont;\n\t\t\t\tstring $noteText = \"  This tool allows the user to manage custom object attributes, providing the following\\n\";\n\t\t\t\t$noteText += \"   functionality:  reordering of attributes, renaming attributes, and transferring attributes\\n\";\n\t\t\t\t$noteText += \"   between objects. To use, simply select an object and load it into the UI via the \\\"Load Obj\\\"\\n\";\n\t\t\t\t$noteText += \"   button. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Reordering of attributes is done via the \\\"Move Up\\\" and \\\"Move Down\\\" buttons. User can  \\n\" ;\n\t\t\t\t$noteText += \"   rename attributes by simply providing a new name for the selected attribute in the text  \\n\";\n\t\t\t\t$noteText += \"   field below the attribute list. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Transferring attributes allows the user to move custom attributes between objects. User  \\n\";\n\t\t\t\t$noteText += \"   has the option of transferring all input and output connections. The original object \\n\";\n\t\t\t\t$noteText += \"   attributes can either be preserved or deleted. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   In the main attribute UI list, the user can access additional functionality via the RMB popup \\n\";\n\t\t\t\t$noteText += \"   menu. Here the user can see the exact attribute type, toggle the attribute?s keyable status, \\n\";\n\t\t\t\t$noteText += \"   and delete the attribute. On the right-hand side of the UI is a button that opens another text \\n\";\n\t\t\t\t$noteText += \"   list which allows the user to view both input and output connections on the selected attribute.\\n\";\n\t\t\t\t$noteText += \"   Double clicking in this list selects the connected object. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Virtually all attribute types are supported. Compound attributes, for example vector attributes, \\n\";\n\t\t\t\t$noteText += \"   are shown in the UI according to their parent attribute name. Compound children attributes \\n\";\n\t\t\t\t$noteText += \"   must be transferred together with their parent, and thus are not available in the UI. \\\"Move Up\\\"   \\n\";\n\t\t\t\t$noteText += \"   and \\\"Move Down\\\" is currently not supported with compound attributes, nor with attributes that   \\n\";\n\t\t\t\t$noteText += \"   require the \\\"-dataType\\\" flag upon creation.  \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   There are some known bugs with transferring compound attributes multiple times in the same \\n\";\n\t\t\t\t$noteText += \"   Maya session.  Compound attributes (with their connections) can be transferred once per \\n\";\n\t\t\t\t$noteText += \"   Maya session; more than that and Maya will report errors, or worse, crash. There is currently \\n\";\n\t\t\t\t$noteText += \"   no known fix for this, so just try to avoid it.   \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Comments etc. can be sent to mel@macaroniKazoo.com or dwalden74@hotmail.com. \\n\";\n\t\t\t\ttext -label $noteText -align left;\n\n\t\t\t\ttext -label \"\" -h 10;\n\n\n\t\t\t\tsetParent..;\n\t\t\tsetParent..;\n\t\tstring $closeButton = `button -label \"Close Window\" -c \"deleteUI attrManHelpUI\"`;\n\t\tsetParent..;\n\n\tformLayout -e\n\t\t-attachForm $scroll left 0\n\t\t-attachForm $scroll top 0\n\t\t-attachForm $scroll right 0\n\t\t-attachControl $scroll bottom 0 $closeButton\n\n\t\t-attachForm $closeButton left 0\n\t\t-attachNone $closeButton top\n\t\t-attachForm $closeButton right 0\n\t\t-attachForm $closeButton bottom 0\n\t\t$form;\n\nshowWindow attrManHelpUI;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Proc creates main UI.\nglobal proc attributeMan()\n{\nif (`window -ex dwAttrManWin`)\n\tdeleteUI dwAttrManWin;\n\nwindow -t \"AttributeMan\" -menuBar true dwAttrManWin;\nmenu -label \"Help\" -tearOff true attributeMangerHelpMenu;\n\tmenuItem -l \"AttributeMan Help\" -c \"attrManHelp\";\n\n//Master form layout; contains three children formLayouts ($sourceForm, $conXnform, and $bottomForm)\nstring $masterForm = `formLayout dwAttrManFormMaster`;\n\n\n//Source object formLayout.\nstring $sourceForm = `formLayout sourceObjForm`;\n\n\tstring $sourceText = `text -l \"Source Object:\"`;\n\tstring $objText = `text -l \"\" -font boldLabelFont -align left dwAttrManObjTXT`;\n\t\tpopupMenu -p $objText -b 3;\n\t\t\tmenuItem -l \"Select\" -c \"dwAttrMan_SelectSourceObject\";\n\n\tstring $TSL = `textScrollList\n\t\t\t-ams 1\n\t\t\t-sc (\"textField -e -tx (zooAttrManUtilsReturnElement(0,`textScrollList -q -si dwAttrManTSL`)) dwNewAttrName; \\\n\t\t\t\tdwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;\")\n\t\t\tdwAttrManTSL`;\n\n\t\t//PopupMenu for main TSL.\n\t\t//Show the attribute type via a popup menu.\n\t\tpopupMenu -p $TSL -b 3 -postMenuCommand \"{string $obj = `text -q -l dwAttrManObjTXT`; \\\n\t\t\t\t\t\t\t\tif (`objExists $obj`) { \\\n\t\t\t\t\t\t\t\t\tstring $attr[] = `textScrollList -q -si dwAttrManTSL`; \\\n\t\t\t\t\t\t\t\tif (`attributeExists $attr[0] $obj`) {\\\n\t\t\t\t\t\t\t\t\tstring $attrType; \\\n\t\t\t\t\t\t\t\tif (`size $attr` > 1) \\\n\t\t\t\t\t\t\t\t\t$attrType = \\\"\\\"; \\\n\t\t\t\t\t\t\t\telse \\\n\t\t\t\t\t\t\t\t\t{$attrType = `dwAttrManGetAttrTypeGeneral $obj $attr[0]`; \\\n\t\t\t\t\t\t\t\t\tif (`dwAttrManIsMulti $obj $attr[0]`) \\\n\t\t\t\t\t\t\t\t\t$attrType += \\\" (multi)\\\";} \\\n\t\t\t\t\t\t\t\tstring $newMenuLabel = (\\\"Attribute Type: \\\" + $attrType); \\\n\t\t\t\t\t\t\t\tmenuItem -e -l $newMenuLabel attrMan_AttrTypeMI;}}}\";\n\t\t\tmenuItem -l \"Attribute Type: \" attrMan_AttrTypeMI;\n\t\t\tmenuItem -d 1;\n\t\t\tmenuItem -l \"Toggle keyable\" -c \"dwAttrMan_SetKeyable\";\n\t\t\tmenuItem -l \"Delete attribute\" -c \"dwAttrMan_DeleteAttributes `text -q -l dwAttrManObjTXT` `textScrollList -q -si dwAttrManTSL`\";\n\n\tstring $moveUpBTN = `button -l \"Move Up\" -c ( \"zooDoReorder up\" )`;\n\tstring $moveDownBTN = `button -l \"Move Down\" -c ( \"zooDoReorder down\" )`;\n\n\t//Button form is a child of $sourceForm.\n\t//string $buttForm = `formLayout`;\n\t//\tstring $upButt = `symbolButton -i \"arrowup.xpm\" -width 15 -c( \"zooDoReorder up\" )`;\n\t//\tstring $dnButt = `symbolButton -i \"arrowdown.xpm\" -width 15 -c( \"zooDoReorder down\" )`;\n\t//setParent ..;\n\n\tstring $collapseButton = `button -l \">\" -width 13 -c( \"doHideConXnList\" ) dwAttrManButtonCollapseConXn`;\nsetParent ..;\n\n\n//Show connections formLayout.\nstring $conXnform = `formLayout -vis 0 dwAttrManConXnForm`;\n\tstring $connectionsTXT = `text\n\t\t\t\t\t-l \"Show Connections:\"\n\t\t\t\t\t-align left`;\n\tstring $conXnRBG = `radioButtonGrp\n\t\t\t\t-nrb 2\n\t\t\t\t-cw 1 70\n\t\t\t\t-la2 \"Inputs\" \"Outputs\"\n\t\t\t\t-on1 \"dwAttrMan_ShowConnections 1\"\n\t\t\t\t-on2 \"dwAttrMan_ShowConnections 2\"\n\t\t\t\tattrManConnectionsRBG`;\n\t\tradioButtonGrp -e -sl 1 attrManConnectionsRBG;\n\tstring $conXnTSL = `textScrollList\n\t\t\t-en 1\n\t\t\t-ams 0\n\t\t\t-dcc \"dwAttrMan_SelectConnectionObject\"\n\t\t\t-sc \"\"\n\t\t\tdwAttrManConXnTSL`;\n\t\tpopupMenu -p $conXnTSL -b 3;\n\t\t\tmenuItem -l \"Select object\" -c \"dwAttrMan_SelectConnectionObject\";\nsetParent ..;\n\n\n//Bottom formLayout.\nstring $bottomForm = `formLayout dwAttrManBottomForm`;\n\tstring $renameTF = `textField -cc( \"zooAttrManDoRename\" ) dwNewAttrName`;\n\tstring $keyableCheck = `checkBox\n\t\t\t\t\t-l \"List keyable only\"\n\t\t\t\t\t-v 1\n\t\t\t\t\t-ofc \"dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 0;\"\n\t\t\t\t\t-onc \"dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 1;\"\n\t\t\t\t\tdwAttrManListKeyableCheck`;\n\tstring $separator = `separator`;\n\tstring $spacerTXT = `text -l \"\" -h 5`;\n\tstring $transferOptionsTXT = `text -l \"Transfer Attribute Options:\" -font boldLabelFont`;\n\tstring $deleteOriginalsCheck = `checkBox\n\t\t\t\t\t\t-l \"Delete source attributes\"\n\t\t\t\t\t\t-v 1\n\t\t\t\t\t\t-ofc \"checkBox -e -en 1 dwAttrManConnectionsCheck;\"\n\t\t\t\t\t\t-onc \"checkBox -e -en 0 dwAttrManConnectionsCheck; checkBox -e -v 1 dwAttrManConnectionsCheck;\"\n\t\t\t\t\t\tdwAttrManDeleteSourceAttrsCheck`;\n\tstring $transferConnectionsCheck = `checkBox\n\t\t\t\t\t\t-l \"Transfer connections\"\n\t\t\t\t\t\t-v 1\n\t\t\t\t\t\t-en 0\n\t\t\t\t\t\tdwAttrManConnectionsCheck`;\n\n\tstring $loadButton = `button -l \"Load Obj\" -c \"{string $sel[] = `ls -sl -o`; \\\n\t\t\t\t\t\t\tdwAttrMan_LoadAttributes $sel[0] `checkBox -q -v dwAttrManListKeyableCheck`; \\\n\t\t\t\t\t\t\ttextField -e -tx \\\"\\\" dwNewAttrName; \\\n\t\t\t\t\t\t\ttextScrollList -e -ra dwAttrManConXnTSL;}\"`;\n\tstring $transferButton = `button -l \"Transfer Attrs\" -c \"dwAttrMan_TransferAttributes \\\n\t\t\t\t\t\t\t\t\t`text -q -l dwAttrManObjTXT` \\\n\t\t\t\t\t\t\t\t\t`textScrollList -q -si dwAttrManTSL` \\\n\t\t\t\t\t\t\t\t\t\\\"\\\" \\\n\t\t\t\t\t\t\t\t\t`checkBox -q -v dwAttrManConnectionsCheck` \\\n\t\t\t\t\t\t\t\t\t`checkBox -q -v dwAttrManDeleteSourceAttrsCheck`;\"`;\nsetParent ..;\n\n//Edit button form\n/*formLayout -e\n\t-an $upButt left\n\t-af $upButt top 0\n\t-af $upButt right 0\n\t-ap $upButt bottom 0 50\n\n\t-an $dnButt left\n\t-ac $dnButt top 0 $upButt\n\t-af $dnButt right 0\n\t-af $dnButt bottom 0\n\t$buttForm;\n*/\n//Edit source form.\nformLayout -e\n\t-af $sourceText left 0\n\t-af $sourceText top 0\n\t-an $sourceText right\n\t-an $sourceText bottom\n\n\t-ac $objText left 5 $sourceText\n\t-af $objText top 0\n\t-af $objText right 0\n\t-an $objText bottom\n\n\t-af $TSL left 0\n\t-ac $TSL top 0 $sourceText\n\t-ac $TSL right 5 $collapseButton\n\t-ac $TSL bottom 5 $moveUpBTN\n\n\t-af $moveUpBTN left 5\n\t-an $moveUpBTN top\n\t-ap $moveUpBTN right 5 50\n\t-af $moveUpBTN bottom 0\n\n\t-ac $moveDownBTN left 5 $moveUpBTN\n\t-an $moveDownBTN top\n\t-ac $moveDownBTN right 10 $collapseButton\n\t-af $moveDownBTN bottom 0\n\n\t//-an $buttForm left\n\t//-ac $buttForm top 0 $sourceText\n\t//-ac $buttForm right 3 $collapseButton\n\t//-af $buttForm bottom 0\n\n\t-an $collapseButton left\n\t-ac $collapseButton top 0 $sourceText\n\t-af $collapseButton right 0\n\t-af $collapseButton bottom 0\n\t$sourceForm;\n\n//Edit connection form\nformLayout -e\n\t-af $connectionsTXT left 3\n\t-af $connectionsTXT top 0\n\t-af $connectionsTXT right 0\n\t-an $connectionsTXT bottom\n\n\t-af $conXnRBG left 3\n\t-ac $conXnRBG top 0 $connectionsTXT\n\t-af $conXnRBG right 0\n\t-an $conXnRBG bottom\n\n\t-af $conXnTSL left 3\n\t-ac $conXnTSL top 5 $conXnRBG\n\t-af $conXnTSL right 0\n\t-af $conXnTSL bottom 0\n\t$conXnform;\n\n//Edit bottom form.\nformLayout -e\n\t-af $renameTF left 0\n\t-an $renameTF top\n\t-af $renameTF right 0\n\t-ac $renameTF bottom 0 $keyableCheck\n\n\t-af $keyableCheck left 0\n\t-an $keyableCheck top\n\t-af $keyableCheck right 0\n\t-ac $keyableCheck bottom 0 $separator\n\n\t-af $separator left 0\n\t-an $separator top\n\t-af $separator right 0\n\t-ac $separator bottom 0 $spacerTXT\n\n\t-af $spacerTXT left 0\n\t-an $spacerTXT top\n\t-af $spacerTXT right 0\n\t-ac $spacerTXT bottom 0 $transferOptionsTXT\n\n\t-af $transferOptionsTXT left 0\n\t-an $transferOptionsTXT top\n\t-af $transferOptionsTXT right 0\n\t-ac $transferOptionsTXT bottom 0 $deleteOriginalsCheck\n\n\t-af $deleteOriginalsCheck left 0\n\t-an $deleteOriginalsCheck top\n\t-af $deleteOriginalsCheck right 0\n\t-ac $deleteOriginalsCheck bottom 0 $transferConnectionsCheck\n\n\t-af $transferConnectionsCheck left 0\n\t-an $transferConnectionsCheck top\n\t-af $transferConnectionsCheck right 0\n\t-ac $transferConnectionsCheck bottom 0 $loadButton\n\n\t-af $loadButton left 0\n\t-an $loadButton top\n\t-ap $loadButton right 0 50\n\t-af $loadButton bottom 0\n\n\t-ac $transferButton left 0 $loadButton\n\t-an $transferButton top\n\t-af $transferButton right 0\n\t-af $transferButton bottom 0\n\t$bottomForm;\n\n\n//Edit master form\nint $spacer = 3;\nformLayout -e\n\t-af $sourceForm left $spacer\n\t-af $sourceForm top $spacer\n\t-ac $sourceForm right $spacer $conXnform\n\t-ac $sourceForm bottom $spacer $bottomForm\n\n\t-ap $conXnform left -2 100\n\t-af $conXnform top $spacer\n\t-af $conXnform right $spacer\n\t-ac $conXnform bottom $spacer $bottomForm\n\t//-ap $conXnform left 0 50\n\t//-af $conXnform top 0\n\t//-af $conXnform right 0\n\t//-af $conXnform bottom 0\n\n\t-af $bottomForm left $spacer\n\t-an $bottomForm top\n\t-af $bottomForm right $spacer\n\t-af $bottomForm bottom $spacer\n\t$masterForm;\n\n\nshowWindow dwAttrManWin;\n}\nattributeMan()" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "atMan" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "atMan" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "global proc string[] zooAttrManUtilsArrayReorder( string $array[], int $entries[], string $dir ) {\n\tstring $newArray[] = $array;\n\tint $gaps[];\n\tint $be;\n\n\tif( !`size $entries` ) return $array;\n\t$entries = `sort $entries`;\n\t$gaps[0] = $entries[0];\n\tfor( $n = 0; $n < `size $entries`-1; $n++ ) if( $entries[$n]+1 != $entries[( $n+1 )] ) {\n\t\t$gaps[( `size $gaps` )] = $entries[$n];\n\t\t$gaps[( `size $gaps` )] = $entries[( $n+1 )];\n\t\t}\n\t$gaps[( `size $gaps` )] = $entries[( `size $entries`-1 )];\n\n\tfor( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == \"up\" ) $newArray = `zooAttrManUtilsArrayShiftUp $newArray $gaps[$n] $gaps[( $n+1 )]`;\n\tfor( $n = 0; $n < `size $gaps`; $n+=2 ) if( $dir == \"down\" ) $newArray = `zooAttrManUtilsArrayShiftDown $newArray $gaps[$n] $gaps[( $n+1 )]`;\n\n\treturn $newArray;\n\t}\n\n\n\n\nglobal proc string[] zooAttrManUtilsArrayShiftUp( string $array[], int $startIndex, int $endIndex ) {\n\tstring $newArray[];\n\tint $displaced = $startIndex-1;\n\tint $num = ( $endIndex-$startIndex )+1;\n\n\tif( $startIndex == 0 ) return $array;\n\n\t//copy the original array to the newArray variable\n\tfor( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];\n\n\tint $i = $startIndex-1;\n\tfor( $n = 0; $n < $num; $n++, $i++) $newArray[$i] = $array[( $i+1 )];\n\n\t$newArray[$endIndex] = $array[$displaced];\n\treturn $newArray;\n\t}\n\n\n\n//------\n//shifts entries inclusive from the start index, to the end index down (ie away from zero) in an array\n//------\nglobal proc string[] zooAttrManUtilsArrayShiftDown( string $array[], int $startIndex, int $endIndex ) {\n\tstring $newArray[];\n\tint $displaced = $endIndex+1;\n\tint $num = ( $endIndex-$startIndex )+1;\n\n\tif( $endIndex >= `size $array`-1 ) return $array;\n\n\t//copy the original array to the newArray variable\n\tfor( $n = 0; $n < `size $array`; $n++ ) $newArray[$n] = $array[$n];\n\n\tint $i = $startIndex+$num;\n\tfor( $n = 0; $n < $num; $i--, $n++ ) $newArray[$i] = $array[( $i-1 )];\n\n\t$newArray[$startIndex] = $array[$displaced];\n\treturn $newArray;\n\t}\n\n\n\n//------\n//returns the first entry in an array.\n//this is useful for commands that only return a single string, but return an array\n//\n//example: string $constraint = zooAttrManUtilsReturnElement( 0,`parentConstraint -mo $obj2 $obj1` );\n//example: string $parent = zooAttrManUtilsReturnElement( 0,`listRelatives -p $obj2` );\n//------\nglobal proc string zooAttrManUtilsReturnElement( int $entry, string $array[] ) {\n\tif( $entry<0 ) $entry = `size $array` + $entry;\n\treturn $array[$entry];\n\t}\n\n\n\n//------\n//this proc deals with getting the attribute selection from the UI, and passing it to the reorder proc below\n//------\nglobal proc zooDoReorder( string $dir ) {\n\tstring $validTypes[] = { \"bool\", \"enum\", \"long\", \"double\" };\n\tstring $obj = `text -q -l dwAttrManObjTXT`;\n\tstring $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;\n\tif( !`size $selAttrs` ) return;\n\n\tstring $attrs[] = `listAttr -k -ud $obj`;\n\tstring $validAttrs[];\n\tint $toReorder[];\n\n\t//filters the list of attributes - the re-ordering process only works on attributes that show up in the channel box\n\tfor( $n=0; $n<`size $attrs`; $n++ ) {\n\t\tstring $type = `addAttr -q -at ( $obj +\".\"+ $attrs[$n] )`;\n\t\tint $isValid = 0;\n\t\tfor( $a in $validTypes ) if( $type == $a ) { $isValid = 1; break; }\n\t\tif( $isValid ) $validAttrs[( `size $validAttrs` )] = $attrs[$n];\n\t\t}\n\n\t//gets a list of which attributes are selected, and puts their indicies into an array\n\tfor( $n=0; $n<`size $validAttrs`; $n++ ) for( $a in $selAttrs ){\n\t\tif( $a == $validAttrs[$n] ) $toReorder[( `size $toReorder` )] = $n;\n\t\t}\n\n\tstring $newOrder[] = `zooAttrManUtilsArrayReorder $validAttrs $toReorder $dir`;\n\tzooAttrManReorder $obj $newOrder;\n\tdwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n\tfor( $a in $selAttrs ) textScrollList -e -si $a dwAttrManTSL;\n\t}\n\n\n\n//------\n//reorders dynamic attributes on an object\n//NOTE: this proc is taken from zooReorderAttribs - its put here for the sake of simplicity\n//------\nglobal proc zooAttrManReorder ( string $obj, string $newAttribOrder[] ) {\n\tstring $selObjs[] = `ls -sl`;\n\tfor ( $attrib in $newAttribOrder ) {\n\t\t//if the attribute is locked, we'll need to unlock it to rename it\n\t\tint $isAttrLocked = `getAttr -l ( $obj + \".\" + $attrib )`;\n\t\tif( $isAttrLocked ) setAttr -l 0 ( $obj + \".\" + $attrib );\n\n\t\t//rename the attribute to a temporary name.  You can't rename it to its own name, so we need to rename it to a proxy name, and then back again\n\t\tstring $tempAttrib = `renameAttr ( $obj + \".\" + $attrib ) \"temp\"`;\n\t\trenameAttr ( $obj + \".\" + $tempAttrib ) $attrib;\n\n\t\t//if the attribute WAS locked, lock it again, in order to maximise transparency\n\t\tif( $isAttrLocked ) setAttr -l 1 ( $obj + \".\" + $attrib );\n\t\t}\n\n\tselect -r $selObjs;\n\tselect $selObjs;\n\t}\n\n\n\n//------\n//this proc deals with getting the new attribute name from the UI, and renaming the attribute\n//------\nglobal proc zooAttrManDoRename() {\n\tstring $obj = `text -q -l dwAttrManObjTXT`;\n\tstring $selAttrs[] = `textScrollList -q -si dwAttrManTSL`;\n\tstring $oldName = $selAttrs[0];\n\tstring $newName = `textField -q -tx dwNewAttrName`;\n\n\tzooAttrManRenameAttrInPlace $obj $oldName $newName;\n\n\tdwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n\ttextScrollList -e -si $newName dwAttrManTSL;\n\t}\n\n\n\n//------\n//renames an attribute without changing its order\n//NOTE: this proc is taken from zooReorderAttribs - its put here for the sake of simplicity\n//------\nglobal proc zooAttrManRenameAttrInPlace( string $obj, string $oldAttr, string $newAttr ) {\n\tstring $attrs[] = `listAttr -k -ud $obj`;\n\n\tfor( $n=0; $n<`size $attrs`; $n++ ) if( $attrs[$n] == $oldAttr ) {\n\t\tint $isLocked = `getAttr -l ( $obj + \".\" + $attrs[$n] )`;\n\t\tsetAttr -l 0 ( $obj + \".\" + $attrs[$n] );\n\t\trenameAttr ( $obj + \".\" + $attrs[$n] ) $newAttr;\n\t\t$attrs[$n] = $newAttr;\n\t\tsetAttr -l $isLocked ( $obj + \".\" + $attrs[$n] );\n\t\t}\n\n\tzooAttrManReorder $obj $attrs;\n\t}\n\n\n\n///////////////////////////////////////////////////////////////\n\n//Proc loads the attributes for the selected object into the UI.\n//For now we?re skipping all compound attributes...they?re tricky lil? bastards...!\nglobal proc dwAttrMan_LoadAttributes (string $obj, int $keyableCheck)\n{\n//string $sel[] = `ls -sl -o`;\nif (! `objExists $obj`)\n\t{\n\tprint \"Object invalid or unspecified. Try again.\\n\";\n\treturn;\n\t}\n\n//Query user-defined attrs, depending on $keyableCheck int.\nstring $attrs[];\nif ($keyableCheck)\n\t$attrs = `listAttr -ud -k $obj`;\nelse\n\t$attrs = `listAttr -ud $obj`;\n\n\n//if the attribute is a \"vector\" (ie the vector type was checked when the attribute was added)\n//then explicitly list all its children\nstring $expandedAttrs[];\nfor( $a in $attrs ) {\n\tstring $children[] = `attributeQuery -listChildren -n $obj $a`;\n\tif( `size $children` ) for( $b in $children ) $expandedAttrs[( `size $expandedAttrs` )] = $b;\n\telse $expandedAttrs[( `size $expandedAttrs` )] = $a;\n\t}\n//clear $attrs;\n//$attrs = $expandedAttrs;\n//$attrs = `stringArrayRemoveDuplicates $attrs`;\n\n\n//if (! `size $attrs`)\n//\tprint ($obj + \" has no custom attributes.\\n\");\n\n\n//Load obj name\ntext -e -l $obj dwAttrManObjTXT;\n//Remove all from TSL.\ntextScrollList -e -ra dwAttrManTSL;\n//Load attrs\nfor ($a in $attrs)\n\t{\n\t//Skip over compound attributes for now.\n\t//string $parent = `addAttr -q -parent ($obj + \".\" + $a)`;\n\t//string $parentType = `addAttr -q -attributeType ($obj + \".\" + $parent)`;\n\t//if (($parentType == \"double3\") || ($parentType == \"double2\") || ($parentType == \"float3\") || ($parentType == \"float2\"))\n\t//\tcontinue;\n\tstring $parent = `addAttr -q -parent ($obj + \".\" + $a)`;\n\t//Only add parent attributes (for compound). Compound attrs should be transferred as a group.\n\t//print $parent;\n\tif ($parent == $a)\n\t\ttextScrollList -e -a $a dwAttrManTSL;\n\t}\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc transfers connections from a given object attribute to a target object attribute.\nglobal proc int dwAttrMan_TransferConnections(string $sourceObj, \t\t//Source obj.\n\t\t\t\t\t\t\tstring $attr, \t\t//Source attribute.\n\t\t\t\t\t\t\tstring $targetObj, \t//Target obj.\n\t\t\t\t\t\t\tint $isMulti)\t\t//Is the attribute a multi attribute?\n{\n//Get all connection to- and from- the source object attribute.\nstring $sourceConnections[] = `listConnections -source 1 -destination 0 -plugs 1 ($sourceObj + \".\" + $attr)`;\nstring $destinationConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + \".\" + $attr)`;\n\n\n//If the source obj?s \".message\" attribute is connected to the same obj as $sourceConnections, then it is locked and we can?t transfer it.\nstring $messageConnections[] = `listConnections -source 0 -destination 1 -plugs 1 ($sourceObj + \".message\")`;\nstring $messageBuffer[];\nstring $destinationBuffer[];\nint $isLockedByMessage = 0;\nint $n = 0;\nif (`size $messageConnections`)\n\t{\n\ttokenize $messageConnections[0] \".\" $messageBuffer;\n\ttokenize $destinationConnections[0] \".\" $destinationBuffer;\n\tfor ($n = 0; $n < `size $destinationConnections`; $n++)\n\t\t{\n\t\tif ($messageBuffer[0] == $destinationBuffer[$n])\n\t\t\t{\n\t\t\twarning ($sourceObj + \".\" + $attr + \" is locked to \" + $destinationBuffer[$n] + \". Cannot transfer connections for this attribute.\");\n\t\t\t$isLockedByMessage = 1;\n\t\t\t}\n\t\t}\n\t}\nif ($isLockedByMessage)\n\treturn $isLockedByMessage;\n\n\n//Disconnect old attributes and make connections for new attribute.\n//SOURCE CONNECTIONS (CONNECTIONS COMING FROM OTHER OBJECTS).\nint $i = 0;\nfor ($s in $sourceConnections)\n\t{\n\t//If the attribute is multi, we have to find the indexes that are connected.\n\tif ($isMulti)\n\t\t{\n\t\t//Not sure how important $indexMatters really is... it seems to work fine without specifiying it, so let?s ignore it for now.\n\t\t//if ($indexMatters)\n\t\t//\t{\n\t\t\tdisconnectAttr $s ($sourceObj + \".\" + $attr + \"[\" + $i + \"]\");\n\t\t\tconnectAttr -f $s ($targetObj + \".\" + $attr + \"[\" + $i + \"]\");\n\t\t//\t}\n\t\t//else if (! $indexMatters)\n\t\t//\t{\n\t\t//\tdisconnectAttr -na $s ($sourceObj + \".\" + $attr);\n\t\t//\tconnectAttr -f -na $s ($targetObj + \".\" + $attr);\n\t\t//\t}\n\t\t}\n\telse\n\t\t{\n\t\tdisconnectAttr $s ($sourceObj + \".\" + $attr);\n\t\tconnectAttr -f $s ($targetObj + \".\" + $attr);\n\t\t}\n\t$i++;\n\t}\n//DESTINATION CONNECTIONS (CONNECTIONS GOING TO OTHER OBJECTS).\n$i = 0;\nfor ($d in $destinationConnections)\n\t{\n\t//If the attribute is multi, we have to find the indexes that are connected.\n\tif ($isMulti)\n\t\t{\n\t\t//if ($indexMatters)\n\t\t//\t{\n\t\t\tdisconnectAttr ($sourceObj + \".\" + $attr + \"[\" + $i + \"]\") $d;\n\t\t\tconnectAttr -f ($targetObj + \".\" + $attr + \"[\" + $i + \"]\") $d;\n\t\t//\t}\n\t\t//else if (! $indexMatters)\n\t\t//\t{\n\t\t//\tdisconnectAttr -na ($sourceObj + \".\" + $a) $d;\n\t\t//\tconnectAttr -f -na ($targetObj + \".\" + $a) $d;\n\t\t//\t}\n\t\t}\n\telse\n\t\t{\n\t\tdisconnectAttr ($sourceObj + \".\" + $attr) $d;\n\t\tconnectAttr -f ($targetObj + \".\" + $attr) $d;\n\t\t}\n\t$i++;\n\t}\n\n//Return if the object is locked by its message attribute.\nreturn $isLockedByMessage;\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc returns 1 if the attribute is a compound type attr, 0 if not. \"Compound\" attributes require the \"-nc\" flag, other\n//attribs of compound type do not.\nglobal proc int dwAttrMan_IsCompoundType(string $sourceObj, string $attribute)\n{\nstring $type = `addAttr -q -attributeType ($sourceObj + \".\" + $attribute)`;\n\nif (($type == \"reflectance\") || ($type == \"spectrum\") || ($type == \"float2\") || ($type == \"float3\")\n\t\t || ($type == \"double2\") || ($type == \"double3\") || ($type == \"long2\") || ($type == \"long3\")\n\t\t || ($type == \"short2\") || ($type == \"short3\") || ($type == \"compound\"))\n\treturn 1;\nelse\n\treturn 0;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Proc returns 1 if the attr requires the \"-dataType\" flag. 0 if not.\nglobal proc int dwAttrMan_IsDataType(string $object, string $attr)\n{\nstring $type = `addAttr -q -attributeType ($object + \".\" + $attr)`;\n\nif ($type == \"typed\")\n\treturn 1;\nelse\n\treturn 0;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Proc transfers attributes from the selection in the UI list to the selected obj.\n//All connections to- and from- the attribute are maintained (if user desires), and attributes on original obj are deleted (if user desires).\n//Note: for compound attributes, we will only input the parent attribute into this procedure. That means we need to query the children attrs.\nglobal proc dwAttrMan_TransferAttributes(string $sourceObj,\t\t\t  //Source object\n\t\t\t\t\t\tstring $attrs[], \t  //Attr list\n\t\t\t\t\t\tstring $parent,\t\t  //Parent attr (necessary for compound attrs)\n\t\t\t\t\t\tint $transferConnections, //Transfer connections?\n\t\t\t\t\t\tint $deleteOriginals)\t  //Delete original attrs?\n{\nif (! `objExists $sourceObj`)\n\terror \"Source object specified incorrectly. Try again.\";\nif (! `size $attrs`)\n\terror \"No attributes selected in list. Try again.\";\nstring $sel[] = `ls -sl -o`;\nif (! `size $sel`)\n\terror \"Nothing selected. Select one object and try again.\";\nif (`size $sel` > 1)\n\terror \"Select only one object and try again.\";\n\n//Report error if user wants to transfer attribute to same obj.\nif ($sel[0] == $sourceObj)\n\terror (\"Selected object is the same as the source. Try again.\");\n\n//Report error if attribute already exists on target obj. Do this BEFORE transferring anything.\nfor ($a in $attrs)\n\t{\n\tif (`attributeExists $a $sel[0]`)\n\t\terror (\"Attribute \\\"\" + $a + \"\\\" conflicts with name of existing attribute on target \" + $sel[0] + \". Try again.\");\n\t}\n\nint $numberOfChildren;\nfor ($a in $attrs)\n\t{\n\t//GET ALL THE INFORMATION ABOUT THE ATTRIBUTE.\n\t//Get the -attributeType flag. For now we are skipping attributes that require the \"-dataType\" flag.\n\tstring $type = `addAttr -q -attributeType ($sourceObj + \".\" + $a)`;\n\t//IF THE ATTRIBUTE IS A COMPOUND ATTRIBUTE, GET ITS CHILDREN.\n\n\tstring $children[];\n\tint $isCompoundType = `dwAttrMan_IsCompoundType $sourceObj $a`;\n\tif ($isCompoundType)\n\t\t{\n\t\t//Assign $numberOfChildren only if the attr is a compound type.\n\t\t$numberOfChildren = `addAttr -q -numberOfChildren ($sourceObj + \".\" + $a)`;\n\t\t//Get list of children attrs.\n\t\t$children = `listAttr ($sourceObj + \".\" + $a)`;\n\t\t//Remove parent name from $children array.\n\t\t$children = `stringArrayRemove {$a} $children`;\n\t\t//print $children; return;\n\t\t}\n\n\tint $keyable = `getAttr -keyable ($sourceObj + \".\" + $a)`;\n\tint $locked = `getAttr -lock ($sourceObj + \".\" + $a)`;\n\t//Let?s ignore the attribute value for now.\n\t//$value = `getAttr ($sourceObj + \".\" + $a)`;\n\tstring $longName = `addAttr -q -longName ($sourceObj + \".\" + $a)`;\n\tstring $shortName = `addAttr -q -shortName ($sourceObj + \".\" + $a)`;\n\n\t//Get range information (if attr is not a string type or a vector type (double3)).\n\tint $hasMin; int $hasMax; float $minValue; float $maxValue; int $hasSoftMin;\n\tint $hasSoftMax; float $softMinValue; float $softMaxValue;\n\tif (($type != \"typed\") && ($type != \"message\") && ($type != \"fltMatrix\") && ($type != \"matrix\") && (! $isCompoundType))\n\t\t{\n\t\t$hasMin = `addAttr -q -hasMinValue ($sourceObj + \".\" + $a)`;\n\t\t$hasMax = `addAttr -q -hasMaxValue ($sourceObj + \".\" + $a)`;\n\t\t$minValue = `addAttr -q -minValue ($sourceObj + \".\" + $a)`;\n\t\t$maxValue = `addAttr -q -maxValue ($sourceObj + \".\" + $a)`;\n\t\t$hasSoftMin = `addAttr -q -hasSoftMinValue ($sourceObj + \".\" + $a)`;\n\t\t$hasSoftMax = `addAttr -q -hasSoftMaxValue ($sourceObj + \".\" + $a)`;\n\t\t$softMinValue = `addAttr -q -softMinValue ($sourceObj + \".\" + $a)`;\n\t\t$softMaxValue = `addAttr -q -softMaxValue ($sourceObj + \".\" + $a)`;\n\t\t}\n\n\n\t//Find out if the attribute is a string attribute.\n\tint $isString = 0;\n\tstring $typedDataType[]; //For some reason querying \"-dataType\" returns an array (while \"-attributeType\" returns a string).\n\tif ($type == \"typed\")\n\t\t{\n\t\t$typedDataType = `addAttr -q -dataType ($sourceObj + \".\" + $a)`;\n\t\tif ($typedDataType[0] == \"string\")\n\t\t\t$isString = 1;\n\t\t}\n\n\t//Find out if the attribute is a multi attribute.\n\tint $isMulti = `attributeQuery -n $sourceObj -multi $a`;\n\tint $multiSize = `getAttr -size ($sourceObj + \".\" + $a)`;\n\tint $indexMatters = `addAttr -q -indexMatters ($sourceObj + \".\" + $a)`;\n\n\t//Get the -enumName value if the attribute is an \"enum\" type.\n\tstring $enumName;\n\tif ($type == \"enum\")\n\t\t$enumName = `addAttr -q -enumName ($sourceObj + \".\" + $a)`;\n\n\t//print ($a + \" : \" + $type + \"\\n\");return;\n\n\t//ADD THE ATTR TO THE SELECTED OBJECT.\n\t//We need special cases for \"enum\" type, \"string\" type, and for multi attributes.\n\t//Criteria for multi attributes.\n\tif (! $isMulti)\n\t\t{\n\t\t//Criteria for enum attributes.\n\t\tif ($type != \"enum\")\n\t\t\t{\n\t\t\t//Criteria for string attributes.\n\t\t\tif (! $isString)\n\t\t\t\t{\n\t\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\t\tif (`size $parent`)\n\t\t\t\t\t{\n\t\t\t\t\t//print `addAttr -q -numberOfChildren ($sel[0] + \".\" + $parent)`; return;\n\t\t\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -longName $longName -shortName $shortName $sel[0];\n\n\t\t\t\t}\n\t\t\telse\n\t\t\t\t{\n\t\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\t\t//Note: attributes using the \"-dataType\" flag cannot use the -numberOfChildren flag... cool!\n\t\t\t\tif (`size $parent`)\n\t\t\t\t\taddAttr -parent $parent -dataType \"string\" -longName $longName -shortName $shortName $sel[0];\n\t\t\t\telse\n\t\t\t\t\taddAttr -dataType \"string\" -longName $longName -shortName $shortName $sel[0];\n\t\t\t\t}\n\t\t\t}\n\t\telse\n\t\t\t{\n\t\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\t\tif (`size $parent`)\n\t\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType \"enum\" -enumName $enumName -longName $longName -shortName $shortName $sel[0];\n\t\t\telse\n\t\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType \"enum\" -enumName $enumName -longName $longName -shortName $shortName $sel[0];\n\t\t\t}\n\t\t}\n\telse if ($isMulti)\n\t\t{\n\t\t//If there is a specified parent, add the attr using the \"-parent\" flag.\n\t\tif (`size $parent`)\n\t\t\taddAttr -parent $parent -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];\n\t\telse\n\t\t\taddAttr -numberOfChildren $numberOfChildren -keyable $keyable -attributeType $type -m -indexMatters $indexMatters -longName $longName -shortName $shortName $sel[0];\n\t\t}\n\n\t//Now, after transferring the attr: if the attr is a compound type, transfer all its children before continuing.\n\t//This is a recursive part because we are calling this same procedure for each child.\n\tif ($isCompoundType)\n\t\t{\n\t\tfor ($c in $children)\n\t\t\tdwAttrMan_TransferAttributes($sourceObj,\t\t//Source obj\n\t\t\t\t\t\t\t {$c}, \t\t\t//child attribute to add.\n\t\t\t\t\t\t\t $a, \t\t\t//Parent attribute (same as current attr).\n\t\t\t\t\t\t\t $transferConnections,  //transfer connections?\n\t\t\t\t\t\t\t 0);\t\t\t//Don?t delete attr (we?ll delete the parent attr later).\n\t\t}\n\n\n\n\n\t//Edit attribute accordingly. Attributes of type \"typed\" are string attributes and do not have min-max ranges.\n\tif (($type != \"typed\") && ($type != \"message\") && ($type != \"fltMatrix\") && ($type != \"matrix\") && (! $isCompoundType))\n\t\t{\n\t\tif ($hasMin)\n\t\t\taddAttr -e -minValue $minValue ($sel[0] + \".\" + $a);\n\t\tif ($hasMax)\n\t\t\taddAttr -e -maxValue $maxValue ($sel[0] + \".\" + $a);\n\t\tif ($hasSoftMin)\n\t\t\taddAttr -e -softMinValue $softMinValue ($sel[0] + \".\" + $a);\n\t\tif ($hasSoftMax)\n\t\t\taddAttr -e -softMaxValue $softMaxValue ($sel[0] + \".\" + $a);\n\t\t}\n\n\n\n\t//For some reason, this produces a very bizarre error message. Instead, let?s specifiy the -keyable state upon adding the attr (above).\n\t//if ($keyable)\n\t//\tsetAttr -keyable 1 ($sel[0] + \".\" + $a);\n\tif ($locked)\n\t\tsetAttr -lock 1 ($sel[0] + \".\" + $a);\n\n\t//For now we can ignore the value of the attribute.\n\t//Set the attribute value. String attributes require special case.\n\t//if ($type != \"typed\")\n\t//\tsetAttr ($sel[0] + \".\" + $a) $value;\n\t//else if ($isString)\n\t//\tsetAttr -type \"string\" ($sel[0] + \".\" + $a) $value;\n\n\n\t//TRANSFER CONNECTIONS.\n\tint $isLockedByMessage = 0;\n\tif ($transferConnections)\n\t\t{\n\t\t//For compound attrib members, let?s wait until all children are transferred before we do the connections.\n\t\t//***I learned something really important: the parent (compound) attribute exists ONLY when all the children exist.\n\t\t//Only when they ALL exist (the entire compound group, parent and all children) are any of them editable.\n\t\t//So, first check to see if the attr has a given parent, and if that parent indeed exists. If the parent exists,\n\t\t//it exists because all the children attributes have been added to the group. Only then can we proceed to\n\t\t//transfer connections to/from compound attributes and their children attributes.\n\t\tif ((`size $parent`) && (`attributeExists $parent $sel[0]`))\n\t\t\t{\n\t\t\t//Get the children of the parent.\n\t\t\t$children = `listAttr ($sel[0] + \".\" + $parent)`;\n\t\t\t//Remove parent name from $children array.\n\t\t\t$children = `stringArrayRemove {$parent} $children`;\n\t\t\tfor ($c in $children)\n\t\t\t\t$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $c $sel[0] $isMulti`;\n\t\t\t}\n\t\telse if (! `size $parent`)\n\t\t\t$isLockedByMessage = `dwAttrMan_TransferConnections $sourceObj $a $sel[0] $isMulti`;\n\t\t}\n\n\t//Continue the loop if the attribute is locked by its message attr.\n\tif ($isLockedByMessage)\n\t\tcontinue;\n\nstring $deleteOriginals;\n\t//DELETE ATTR FROM SOURCE OBJ.\n\tif ($deleteOriginals)\n\t\t{\n\t\t//We need to unlock it first.\n\t\tif ($locked)\n\t\t\tsetAttr -lock 0 ($sourceObj + \".\" + $a);\n\t\t//Delete it only if it has no specified parent (ie, not a member of a compound attr group)\n\t\tif (! `size $parent`)\n\t\t\tdeleteAttr ($sourceObj + \".\" + $a);\n\t\t}\n\t}\n\n\n//Refresh TSL to reflect transferred attributes (but only if not a child of a compound attr).\nif (! `size $parent`)\n\tdwAttrMan_LoadAttributes $sourceObj `checkBox -q -v dwAttrManListKeyableCheck`;\n}\n\n\n\n\n///////////////////////////////////////////////////////////////\n\n\nglobal proc doHideConXnList() {\n\tint $hideState = `control -q -vis dwAttrManConXnForm`;\n\tstring $buttonLabel = ( $hideState )? \"<\": \">\";\n\tint $newPos = ( $hideState )? 100: 50;\n\n\tbutton -e -width 12 -l $buttonLabel dwAttrManButtonCollapseConXn;\n\tcontrol -e -vis (!$hideState) dwAttrManConXnForm;\n\n\tformLayout -e\n\t\t-ap dwAttrManConXnForm left -3 $newPos\n\t\t//-af dwAttrManConXnForm top 0\n\t\t//-af dwAttrManConXnForm right 0\n\t\t//-ac dwAttrManConXnForm bottom 0 dwAttrManBottomForm\n\t\tdwAttrManFormMaster;\n\t}\n\n\n\n\n\n///////////////////////////////////////////////////////////////\n//Proc shows connections in the right-hand TSL in the main UI.\nglobal proc dwAttrMan_ShowConnections(int $kind)\n{\n//Clear the TSL\ntextScrollList -e -ra dwAttrManConXnTSL;\n//Get the full object attribute name.\nstring $obj = `text -q -l dwAttrManObjTXT`;\nif (! `objExists $obj`)\n\treturn;\nstring $attr[] = `textScrollList -q -si dwAttrManTSL`;\n//If many attributes are selected, display \"...\"\nif (`size $attr` > 1)\n\ttextScrollList -e -a \"...\" dwAttrManConXnTSL;\nelse if (`size $attr` == 1)\n\t{\n\tstring $connections[];\n\tif ($kind == 1)\n\t\t$connections = `listConnections -s 1 -d 0 -p 1 ($obj + \".\" + $attr[0])`;\n\telse if ($kind == 2)\n\t\t$connections = `listConnections -s 0 -d 1 -p 1 ($obj + \".\" + $attr[0])`;\n\n\tfor ($c in $connections)\n\t\t{\n\t\t//Get the nodeType.\n\t\tstring $nodeBuffer[];\n\t\ttokenize $c \".\" $nodeBuffer;\n\t\tstring $nodeType = `nodeType $nodeBuffer[0]`;\n\t\t//Show the connection name as well as its nodeType.\n\t\ttextScrollList -e -a ($c + \" (\" + $nodeType + \")\") dwAttrManConXnTSL;\n\t\t}\n\t}\n}\n\n\n///////////////////////////////////////////////////////////////\n//Proc deletes selected attributes.\nglobal proc dwAttrMan_DeleteAttributes(string $obj, string $attrs[])\n{\nif (! `size $attrs`)\n\treturn;\n\nfor ($a in $attrs)\n\tdeleteAttr ($obj + \".\" + $a);\n\n//Refresh source TSL\ndwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n//Refresh connection TSL\ndwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;\n}\n\n///////////////////////////////////////////////////////////////\n//Procedure selects a connected obj, as listed in the connection TSL.\nglobal proc dwAttrMan_SelectConnectionObject()\n{\nstring $objAttr[] = `textScrollList -q -si dwAttrManConXnTSL`;\nif (! `size $objAttr`)\n\treturn;\n\n//Tokenize the $objAttrs by \".\", make sure the buffer exists, then add it to a final selection string.\nstring $objBuffer[];\nstring $selectionString;\nfor ($i = 0; $i < `size $objAttr`; $i++)\n\t{\n\ttokenize $objAttr[$i] \".\" $objBuffer;\n\tif (`objExists $objBuffer[$i]`)\n\t\t$selectionString += ($objBuffer[$i] + \" \");\n\t}\n\nif (`size $selectionString`)\n\tselect -r $selectionString;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Procedure selects the original source obj.\nglobal proc dwAttrMan_SelectSourceObject()\n{\nstring $obj = `text -q -l dwAttrManObjTXT`;\nif (! `objExists $obj`)\n\treturn;\nselect -r $obj;\n}\n\n///////////////////////////////////////////////////////////////\n\n\n//Proc sets the source attr?s keyable or not.\nglobal proc dwAttrMan_SetKeyable()\n{\nstring $obj = `text -q -l dwAttrManObjTXT`;\nstring $attrs[] = `textScrollList -q -si dwAttrManTSL`;\nfor ($a in $attrs)\n\t{\n\t//If attribute is a compound attr, then set children keyable.\n\tif (`dwAttrMan_IsCompoundType $obj $a `)\n\t\t{\n\t\tstring $children[] = `listAttr ($obj + \".\" + $a)`;\n\t\t$children = `stringArrayRemove {($obj + \".\" + $a)} $children`;\n\t\tint $keyable;\n\t\tfor ($c in $children)\n\t\t\t{\n\t\t\t$keyable = `getAttr -k ($obj + \".\" + $c)`;\n\t\t\tsetAttr -k (! $keyable) ($obj + \".\" + $c);\n\t\t\t//print ($c + \" ----> \" + (! $keyable) + \"\\n\");\n\t\t\t}\n\t\t//Another bizarre anomoly: I must set the compound parent?s \"keyability\" to the *opposite* of the children (???)\n\t\tsetAttr -k ($keyable) ($obj + \".\" + $a);\n\t\t//print ($a + \" ----> \" + ($keyable) + \"\\n\");\n\t\t}\n\n\tif (`dwAttrMan_IsDataType $obj $a`)\n\t\t{\n\t\twarning ($obj + \".\" + $a + \" is a dataType attribute. Attributes that require the \\\"-dataType\\\" flag cannot be keyable.\");\n\t\tcontinue;\n\t\t}\n\n\tif (`getAttr -k ($obj + \".\" + $a)` == 0)\n\t\tsetAttr -k 1 ($obj + \".\" + $a);\n\telse\n\t\tsetAttr -k 0 ($obj + \".\" + $a);\n\t}\n//Refresh TSL.\ndwAttrMan_LoadAttributes $obj `checkBox -q -v dwAttrManListKeyableCheck`;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Returns the exact attribute type, regardless whether it is an -at or a -dt type.\nglobal proc string dwAttrManGetAttrTypeGeneral(string $object, string $attribute)\n{\nstring $type = `addAttr -q -attributeType ($object + \".\" + $attribute)`;\n\nif ($type == \"typed\")\n\t{\n\t//Data typed attrs return an array for their -dataType\n\tstring $dataType[] = `addAttr -q -dataType ($object + \".\" + $attribute)`;\n\treturn $dataType[0];\n\t}\n\nelse\n\treturn $type;\n}\n\n\n///////////////////////////////////////////////////////////////\n//Returns 1 if the attribute is a multi attribute, 0 if not\nglobal proc int dwAttrManIsMulti(string $object, string $attribute)\n{\nstring $isMulti = `addAttr -q -multi ($object + \".\" + $attribute)`;\n\nreturn $isMulti;\n}\n\n///////////////////////////////////////////////////////////////\n\nglobal proc attrManHelp()\n{\nif (`window -ex attrManHelpUI`)\n\tdeleteUI attrManHelpUI;\n\nwindow -t \"AttributeMan Help\" -wh 450 350 attrManHelpUI;\n\tstring $form = `formLayout`;\n\t\tstring $scroll = `scrollLayout`;\n\t\t\tcolumnLayout;\n\n\t\t\t\trowColumnLayout -nc 2 -cw 1 75 -cw 2 300;\n\t\t\t\t\ttext -label \"Authors: \" -font boldLabelFont;\n\t\t\t\t\ttext -label \"Hamish McKenzie:  www.macaronikazoo.com\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"David Walden:        www.davidwalden.com\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"\";\n\t\t\t\t\ttext -label \"Created:\" -font boldLabelFont;\n\t\t\t\t\ttext -label \"May 5-18, 2004\";\n\t\t\t\t\tsetParent..;\n\n\t\t\t\ttext -label \"\" -h 30;\n\n\n\t\t\t\ttext -label \"   About: \" -font boldLabelFont;\n\t\t\t\tstring $noteText = \"  This tool allows the user to manage custom object attributes, providing the following\\n\";\n\t\t\t\t$noteText += \"   functionality:  reordering of attributes, renaming attributes, and transferring attributes\\n\";\n\t\t\t\t$noteText += \"   between objects. To use, simply select an object and load it into the UI via the \\\"Load Obj\\\"\\n\";\n\t\t\t\t$noteText += \"   button. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Reordering of attributes is done via the \\\"Move Up\\\" and \\\"Move Down\\\" buttons. User can  \\n\" ;\n\t\t\t\t$noteText += \"   rename attributes by simply providing a new name for the selected attribute in the text  \\n\";\n\t\t\t\t$noteText += \"   field below the attribute list. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Transferring attributes allows the user to move custom attributes between objects. User  \\n\";\n\t\t\t\t$noteText += \"   has the option of transferring all input and output connections. The original object \\n\";\n\t\t\t\t$noteText += \"   attributes can either be preserved or deleted. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   In the main attribute UI list, the user can access additional functionality via the RMB popup \\n\";\n\t\t\t\t$noteText += \"   menu. Here the user can see the exact attribute type, toggle the attribute?s keyable status, \\n\";\n\t\t\t\t$noteText += \"   and delete the attribute. On the right-hand side of the UI is a button that opens another text \\n\";\n\t\t\t\t$noteText += \"   list which allows the user to view both input and output connections on the selected attribute.\\n\";\n\t\t\t\t$noteText += \"   Double clicking in this list selects the connected object. \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Virtually all attribute types are supported. Compound attributes, for example vector attributes, \\n\";\n\t\t\t\t$noteText += \"   are shown in the UI according to their parent attribute name. Compound children attributes \\n\";\n\t\t\t\t$noteText += \"   must be transferred together with their parent, and thus are not available in the UI. \\\"Move Up\\\"   \\n\";\n\t\t\t\t$noteText += \"   and \\\"Move Down\\\" is currently not supported with compound attributes, nor with attributes that   \\n\";\n\t\t\t\t$noteText += \"   require the \\\"-dataType\\\" flag upon creation.  \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   There are some known bugs with transferring compound attributes multiple times in the same \\n\";\n\t\t\t\t$noteText += \"   Maya session.  Compound attributes (with their connections) can be transferred once per \\n\";\n\t\t\t\t$noteText += \"   Maya session; more than that and Maya will report errors, or worse, crash. There is currently \\n\";\n\t\t\t\t$noteText += \"   no known fix for this, so just try to avoid it.   \\n\";\n\t\t\t\t$noteText += \"   \\n\";\n\t\t\t\t$noteText += \"   Comments etc. can be sent to mel@macaroniKazoo.com or dwalden74@hotmail.com. \\n\";\n\t\t\t\ttext -label $noteText -align left;\n\n\t\t\t\ttext -label \"\" -h 10;\n\n\n\t\t\t\tsetParent..;\n\t\t\tsetParent..;\n\t\tstring $closeButton = `button -label \"Close Window\" -c \"deleteUI attrManHelpUI\"`;\n\t\tsetParent..;\n\n\tformLayout -e\n\t\t-attachForm $scroll left 0\n\t\t-attachForm $scroll top 0\n\t\t-attachForm $scroll right 0\n\t\t-attachControl $scroll bottom 0 $closeButton\n\n\t\t-attachForm $closeButton left 0\n\t\t-attachNone $closeButton top\n\t\t-attachForm $closeButton right 0\n\t\t-attachForm $closeButton bottom 0\n\t\t$form;\n\nshowWindow attrManHelpUI;\n}\n\n///////////////////////////////////////////////////////////////\n\n//Proc creates main UI.\nglobal proc attributeMan()\n{\nif (`window -ex dwAttrManWin`)\n\tdeleteUI dwAttrManWin;\n\nwindow -t \"AttributeMan\" -menuBar true dwAttrManWin;\nmenu -label \"Help\" -tearOff true attributeMangerHelpMenu;\n\tmenuItem -l \"AttributeMan Help\" -c \"attrManHelp\";\n\n//Master form layout; contains three children formLayouts ($sourceForm, $conXnform, and $bottomForm)\nstring $masterForm = `formLayout dwAttrManFormMaster`;\n\n\n//Source object formLayout.\nstring $sourceForm = `formLayout sourceObjForm`;\n\n\tstring $sourceText = `text -l \"Source Object:\"`;\n\tstring $objText = `text -l \"\" -font boldLabelFont -align left dwAttrManObjTXT`;\n\t\tpopupMenu -p $objText -b 3;\n\t\t\tmenuItem -l \"Select\" -c \"dwAttrMan_SelectSourceObject\";\n\n\tstring $TSL = `textScrollList\n\t\t\t-ams 1\n\t\t\t-sc (\"textField -e -tx (zooAttrManUtilsReturnElement(0,`textScrollList -q -si dwAttrManTSL`)) dwNewAttrName; \\\n\t\t\t\tdwAttrMan_ShowConnections `radioButtonGrp -q -sl attrManConnectionsRBG`;\")\n\t\t\tdwAttrManTSL`;\n\n\t\t//PopupMenu for main TSL.\n\t\t//Show the attribute type via a popup menu.\n\t\tpopupMenu -p $TSL -b 3 -postMenuCommand \"{string $obj = `text -q -l dwAttrManObjTXT`; \\\n\t\t\t\t\t\t\t\tif (`objExists $obj`) { \\\n\t\t\t\t\t\t\t\t\tstring $attr[] = `textScrollList -q -si dwAttrManTSL`; \\\n\t\t\t\t\t\t\t\tif (`attributeExists $attr[0] $obj`) {\\\n\t\t\t\t\t\t\t\t\tstring $attrType; \\\n\t\t\t\t\t\t\t\tif (`size $attr` > 1) \\\n\t\t\t\t\t\t\t\t\t$attrType = \\\"\\\"; \\\n\t\t\t\t\t\t\t\telse \\\n\t\t\t\t\t\t\t\t\t{$attrType = `dwAttrManGetAttrTypeGeneral $obj $attr[0]`; \\\n\t\t\t\t\t\t\t\t\tif (`dwAttrManIsMulti $obj $attr[0]`) \\\n\t\t\t\t\t\t\t\t\t$attrType += \\\" (multi)\\\";} \\\n\t\t\t\t\t\t\t\tstring $newMenuLabel = (\\\"Attribute Type: \\\" + $attrType); \\\n\t\t\t\t\t\t\t\tmenuItem -e -l $newMenuLabel attrMan_AttrTypeMI;}}}\";\n\t\t\tmenuItem -l \"Attribute Type: \" attrMan_AttrTypeMI;\n\t\t\tmenuItem -d 1;\n\t\t\tmenuItem -l \"Toggle keyable\" -c \"dwAttrMan_SetKeyable\";\n\t\t\tmenuItem -l \"Delete attribute\" -c \"dwAttrMan_DeleteAttributes `text -q -l dwAttrManObjTXT` `textScrollList -q -si dwAttrManTSL`\";\n\n\tstring $moveUpBTN = `button -l \"Move Up\" -c ( \"zooDoReorder up\" )`;\n\tstring $moveDownBTN = `button -l \"Move Down\" -c ( \"zooDoReorder down\" )`;\n\n\t//Button form is a child of $sourceForm.\n\t//string $buttForm = `formLayout`;\n\t//\tstring $upButt = `symbolButton -i \"arrowup.xpm\" -width 15 -c( \"zooDoReorder up\" )`;\n\t//\tstring $dnButt = `symbolButton -i \"arrowdown.xpm\" -width 15 -c( \"zooDoReorder down\" )`;\n\t//setParent ..;\n\n\tstring $collapseButton = `button -l \">\" -width 13 -c( \"doHideConXnList\" ) dwAttrManButtonCollapseConXn`;\nsetParent ..;\n\n\n//Show connections formLayout.\nstring $conXnform = `formLayout -vis 0 dwAttrManConXnForm`;\n\tstring $connectionsTXT = `text\n\t\t\t\t\t-l \"Show Connections:\"\n\t\t\t\t\t-align left`;\n\tstring $conXnRBG = `radioButtonGrp\n\t\t\t\t-nrb 2\n\t\t\t\t-cw 1 70\n\t\t\t\t-la2 \"Inputs\" \"Outputs\"\n\t\t\t\t-on1 \"dwAttrMan_ShowConnections 1\"\n\t\t\t\t-on2 \"dwAttrMan_ShowConnections 2\"\n\t\t\t\tattrManConnectionsRBG`;\n\t\tradioButtonGrp -e -sl 1 attrManConnectionsRBG;\n\tstring $conXnTSL = `textScrollList\n\t\t\t-en 1\n\t\t\t-ams 0\n\t\t\t-dcc \"dwAttrMan_SelectConnectionObject\"\n\t\t\t-sc \"\"\n\t\t\tdwAttrManConXnTSL`;\n\t\tpopupMenu -p $conXnTSL -b 3;\n\t\t\tmenuItem -l \"Select object\" -c \"dwAttrMan_SelectConnectionObject\";\nsetParent ..;\n\n\n//Bottom formLayout.\nstring $bottomForm = `formLayout dwAttrManBottomForm`;\n\tstring $renameTF = `textField -cc( \"zooAttrManDoRename\" ) dwNewAttrName`;\n\tstring $keyableCheck = `checkBox\n\t\t\t\t\t-l \"List keyable only\"\n\t\t\t\t\t-v 1\n\t\t\t\t\t-ofc \"dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 0;\"\n\t\t\t\t\t-onc \"dwAttrMan_LoadAttributes `text -q -l dwAttrManObjTXT` 1;\"\n\t\t\t\t\tdwAttrManListKeyableCheck`;\n\tstring $separator = `separator`;\n\tstring $spacerTXT = `text -l \"\" -h 5`;\n\tstring $transferOptionsTXT = `text -l \"Transfer Attribute Options:\" -font boldLabelFont`;\n\tstring $deleteOriginalsCheck = `checkBox\n\t\t\t\t\t\t-l \"Delete source attributes\"\n\t\t\t\t\t\t-v 1\n\t\t\t\t\t\t-ofc \"checkBox -e -en 1 dwAttrManConnectionsCheck;\"\n\t\t\t\t\t\t-onc \"checkBox -e -en 0 dwAttrManConnectionsCheck; checkBox -e -v 1 dwAttrManConnectionsCheck;\"\n\t\t\t\t\t\tdwAttrManDeleteSourceAttrsCheck`;\n\tstring $transferConnectionsCheck = `checkBox\n\t\t\t\t\t\t-l \"Transfer connections\"\n\t\t\t\t\t\t-v 1\n\t\t\t\t\t\t-en 0\n\t\t\t\t\t\tdwAttrManConnectionsCheck`;\n\n\tstring $loadButton = `button -l \"Load Obj\" -c \"{string $sel[] = `ls -sl -o`; \\\n\t\t\t\t\t\t\tdwAttrMan_LoadAttributes $sel[0] `checkBox -q -v dwAttrManListKeyableCheck`; \\\n\t\t\t\t\t\t\ttextField -e -tx \\\"\\\" dwNewAttrName; \\\n\t\t\t\t\t\t\ttextScrollList -e -ra dwAttrManConXnTSL;}\"`;\n\tstring $transferButton = `button -l \"Transfer Attrs\" -c \"dwAttrMan_TransferAttributes \\\n\t\t\t\t\t\t\t\t\t`text -q -l dwAttrManObjTXT` \\\n\t\t\t\t\t\t\t\t\t`textScrollList -q -si dwAttrManTSL` \\\n\t\t\t\t\t\t\t\t\t\\\"\\\" \\\n\t\t\t\t\t\t\t\t\t`checkBox -q -v dwAttrManConnectionsCheck` \\\n\t\t\t\t\t\t\t\t\t`checkBox -q -v dwAttrManDeleteSourceAttrsCheck`;\"`;\nsetParent ..;\n\n//Edit button form\n/*formLayout -e\n\t-an $upButt left\n\t-af $upButt top 0\n\t-af $upButt right 0\n\t-ap $upButt bottom 0 50\n\n\t-an $dnButt left\n\t-ac $dnButt top 0 $upButt\n\t-af $dnButt right 0\n\t-af $dnButt bottom 0\n\t$buttForm;\n*/\n//Edit source form.\nformLayout -e\n\t-af $sourceText left 0\n\t-af $sourceText top 0\n\t-an $sourceText right\n\t-an $sourceText bottom\n\n\t-ac $objText left 5 $sourceText\n\t-af $objText top 0\n\t-af $objText right 0\n\t-an $objText bottom\n\n\t-af $TSL left 0\n\t-ac $TSL top 0 $sourceText\n\t-ac $TSL right 5 $collapseButton\n\t-ac $TSL bottom 5 $moveUpBTN\n\n\t-af $moveUpBTN left 5\n\t-an $moveUpBTN top\n\t-ap $moveUpBTN right 5 50\n\t-af $moveUpBTN bottom 0\n\n\t-ac $moveDownBTN left 5 $moveUpBTN\n\t-an $moveDownBTN top\n\t-ac $moveDownBTN right 10 $collapseButton\n\t-af $moveDownBTN bottom 0\n\n\t//-an $buttForm left\n\t//-ac $buttForm top 0 $sourceText\n\t//-ac $buttForm right 3 $collapseButton\n\t//-af $buttForm bottom 0\n\n\t-an $collapseButton left\n\t-ac $collapseButton top 0 $sourceText\n\t-af $collapseButton right 0\n\t-af $collapseButton bottom 0\n\t$sourceForm;\n\n//Edit connection form\nformLayout -e\n\t-af $connectionsTXT left 3\n\t-af $connectionsTXT top 0\n\t-af $connectionsTXT right 0\n\t-an $connectionsTXT bottom\n\n\t-af $conXnRBG left 3\n\t-ac $conXnRBG top 0 $connectionsTXT\n\t-af $conXnRBG right 0\n\t-an $conXnRBG bottom\n\n\t-af $conXnTSL left 3\n\t-ac $conXnTSL top 5 $conXnRBG\n\t-af $conXnTSL right 0\n\t-af $conXnTSL bottom 0\n\t$conXnform;\n\n//Edit bottom form.\nformLayout -e\n\t-af $renameTF left 0\n\t-an $renameTF top\n\t-af $renameTF right 0\n\t-ac $renameTF bottom 0 $keyableCheck\n\n\t-af $keyableCheck left 0\n\t-an $keyableCheck top\n\t-af $keyableCheck right 0\n\t-ac $keyableCheck bottom 0 $separator\n\n\t-af $separator left 0\n\t-an $separator top\n\t-af $separator right 0\n\t-ac $separator bottom 0 $spacerTXT\n\n\t-af $spacerTXT left 0\n\t-an $spacerTXT top\n\t-af $spacerTXT right 0\n\t-ac $spacerTXT bottom 0 $transferOptionsTXT\n\n\t-af $transferOptionsTXT left 0\n\t-an $transferOptionsTXT top\n\t-af $transferOptionsTXT right 0\n\t-ac $transferOptionsTXT bottom 0 $deleteOriginalsCheck\n\n\t-af $deleteOriginalsCheck left 0\n\t-an $deleteOriginalsCheck top\n\t-af $deleteOriginalsCheck right 0\n\t-ac $deleteOriginalsCheck bottom 0 $transferConnectionsCheck\n\n\t-af $transferConnectionsCheck left 0\n\t-an $transferConnectionsCheck top\n\t-af $transferConnectionsCheck right 0\n\t-ac $transferConnectionsCheck bottom 0 $loadButton\n\n\t-af $loadButton left 0\n\t-an $loadButton top\n\t-ap $loadButton right 0 50\n\t-af $loadButton bottom 0\n\n\t-ac $transferButton left 0 $loadButton\n\t-an $transferButton top\n\t-af $transferButton right 0\n\t-af $transferButton bottom 0\n\t$bottomForm;\n\n\n//Edit master form\nint $spacer = 3;\nformLayout -e\n\t-af $sourceForm left $spacer\n\t-af $sourceForm top $spacer\n\t-ac $sourceForm right $spacer $conXnform\n\t-ac $sourceForm bottom $spacer $bottomForm\n\n\t-ap $conXnform left -2 100\n\t-af $conXnform top $spacer\n\t-af $conXnform right $spacer\n\t-ac $conXnform bottom $spacer $bottomForm\n\t//-ap $conXnform left 0 50\n\t//-af $conXnform top 0\n\t//-af $conXnform right 0\n\t//-af $conXnform bottom 0\n\n\t-af $bottomForm left $spacer\n\t-an $bottomForm top\n\t-af $bottomForm right $spacer\n\t-af $bottomForm bottom $spacer\n\t$masterForm;\n\n\nshowWindow dwAttrManWin;\n}\nattributeMan()" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "AdvancedSkeleton5" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "AdvancedSkeleton5" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/AS5.png" 
        -image1 "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/AS5.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5.mel\";AdvancedSkeleton5;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Selector:biped" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Selector:biped" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asBiped.png" 
        -image1 "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asBiped.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/Selector/biped.mel\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Selector:face" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Selector:face" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asFace.png" 
        -image1 "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/icons/asFace.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/Selector/face.mel\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "picker" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "picker" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/picker/pickerFiles/icons/picker.png" 
        -image1 "/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/picker/pickerFiles/icons/picker.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"/spin/ldap_accounts/smehra/maya/scripts/AdvancedSkeleton5/AdvancedSkeleton5Files/picker/picker.mel\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Smooth bind skin" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Bind Skin" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "smoothSkin.png" 
        -image1 "smoothSkin.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "SmoothBindSkin" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
